Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     primary_expression -> constant
Rule 4     primary_expression -> string
Rule 5     primary_expression -> LPAREN expression RPAREN
Rule 6     primary_expression -> generic_selection
Rule 7     primary_expression -> IDENTIFIER
Rule 8     constant -> I_CONSTANT
Rule 9     constant -> F_CONSTANT
Rule 10    constant -> CCONST
Rule 11    enumeration_constant -> IDENTIFIER
Rule 12    string -> STRINGLITERAL
Rule 13    string -> FUNC_NAME
Rule 14    generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
Rule 15    generic_assoc_list -> generic_association
Rule 16    generic_assoc_list -> generic_assoc_list COMMA generic_association
Rule 17    generic_association -> type_name COLON assignment_expression
Rule 18    generic_association -> DEFAULT COLON assignment_expression
Rule 19    postfix_expression -> primary_expression
Rule 20    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 21    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 22    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 23    postfix_expression -> postfix_expression PERIOD IDENTIFIER
Rule 24    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 25    postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE
Rule 26    postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
Rule 27    postfix_expression -> postfix_expression INC_OP
Rule 28    postfix_expression -> postfix_expression DEC_OP
Rule 29    argument_expression_list -> assignment_expression
Rule 30    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 31    unary_expression -> postfix_expression
Rule 32    unary_expression -> INC_OP unary_expression
Rule 33    unary_expression -> DEC_OP unary_expression
Rule 34    unary_expression -> unary_operator cast_expression
Rule 35    unary_expression -> SIZEOF unary_expression
Rule 36    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 37    unary_expression -> ALIGNOF LPAREN type_name RPAREN
Rule 38    unary_operator -> AND_OP
Rule 39    unary_operator -> TIMES
Rule 40    unary_operator -> PLUS
Rule 41    unary_operator -> MINUS
Rule 42    unary_operator -> NOT_OP
Rule 43    unary_operator -> LNOT
Rule 44    cast_expression -> unary_expression
Rule 45    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 46    multiplicative_expression -> cast_expression
Rule 47    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 48    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 49    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 50    additive_expression -> multiplicative_expression
Rule 51    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 52    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 53    shift_expression -> additive_expression
Rule 54    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 55    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 56    relational_expression -> shift_expression
Rule 57    relational_expression -> relational_expression LT_OP shift_expression
Rule 58    relational_expression -> relational_expression GT_OP shift_expression
Rule 59    relational_expression -> relational_expression LE_OP shift_expression
Rule 60    relational_expression -> relational_expression GE_OP shift_expression
Rule 61    equality_expression -> relational_expression
Rule 62    equality_expression -> equality_expression EQ_OP relational_expression
Rule 63    equality_expression -> equality_expression NE_OP relational_expression
Rule 64    and_expression -> equality_expression
Rule 65    and_expression -> and_expression AND_OP equality_expression
Rule 66    exclusive_or_expression -> and_expression
Rule 67    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 68    inclusive_or_expression -> exclusive_or_expression
Rule 69    inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression
Rule 70    logical_and_expression -> inclusive_or_expression
Rule 71    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 72    logical_or_expression -> logical_and_expression
Rule 73    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 74    conditional_expression -> logical_or_expression
Rule 75    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 76    assignment_expression -> conditional_expression
Rule 77    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 78    assignment_operator -> EQUALS
Rule 79    assignment_operator -> MUL_ASSIGN
Rule 80    assignment_operator -> DIV_ASSIGN
Rule 81    assignment_operator -> MOD_ASSIGN
Rule 82    assignment_operator -> ADD_ASSIGN
Rule 83    assignment_operator -> SUB_ASSIGN
Rule 84    assignment_operator -> LEFT_ASSIGN
Rule 85    assignment_operator -> RIGHT_ASSIGN
Rule 86    assignment_operator -> AND_ASSIGN
Rule 87    assignment_operator -> XOR_ASSIGN
Rule 88    assignment_operator -> OR_ASSIGN
Rule 89    expression -> assignment_expression
Rule 90    expression -> expression COMMA assignment_expression
Rule 91    constant_expression -> conditional_expression
Rule 92    declaration -> declaration_specifiers SEMI
Rule 93    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 94    declaration -> static_assert_declaration
Rule 95    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 96    declaration_specifiers -> storage_class_specifier
Rule 97    declaration_specifiers -> type_specifier declaration_specifiers
Rule 98    declaration_specifiers -> type_specifier
Rule 99    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 100   declaration_specifiers -> type_qualifier
Rule 101   declaration_specifiers -> function_specifier declaration_specifiers
Rule 102   declaration_specifiers -> function_specifier
Rule 103   declaration_specifiers -> alignment_specifier declaration_specifiers
Rule 104   declaration_specifiers -> alignment_specifier
Rule 105   init_declarator_list -> init_declarator
Rule 106   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 107   init_declarator -> declarator EQUALS initializer
Rule 108   init_declarator -> declarator
Rule 109   storage_class_specifier -> TYPEDEF
Rule 110   storage_class_specifier -> EXTERN
Rule 111   storage_class_specifier -> STATIC
Rule 112   storage_class_specifier -> THREAD_LOCAL
Rule 113   storage_class_specifier -> AUTO
Rule 114   storage_class_specifier -> REGISTER
Rule 115   type_specifier -> VOID
Rule 116   type_specifier -> CHAR
Rule 117   type_specifier -> SHORT
Rule 118   type_specifier -> INT
Rule 119   type_specifier -> LONG
Rule 120   type_specifier -> FLOAT
Rule 121   type_specifier -> DOUBLE
Rule 122   type_specifier -> SIGNED
Rule 123   type_specifier -> UNSIGNED
Rule 124   type_specifier -> BOOL
Rule 125   type_specifier -> COMPLEX
Rule 126   type_specifier -> IMAGINARY
Rule 127   type_specifier -> struct_or_union_specifier
Rule 128   type_specifier -> enum_specifier
Rule 129   type_specifier -> TYPEID
Rule 130   struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 131   struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
Rule 132   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 133   struct_or_union -> STRUCT
Rule 134   struct_or_union -> UNION
Rule 135   struct_declaration_list -> struct_declaration
Rule 136   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 137   struct_declaration -> specifier_qualifier_list SEMI
Rule 138   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 139   struct_declaration -> static_assert_declaration
Rule 140   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 141   specifier_qualifier_list -> type_specifier
Rule 142   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 143   specifier_qualifier_list -> type_qualifier
Rule 144   struct_declarator_list -> struct_declarator
Rule 145   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 146   struct_declarator -> COLON constant_expression
Rule 147   struct_declarator -> declarator COLON constant_expression
Rule 148   struct_declarator -> declarator
Rule 149   enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 150   enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE
Rule 151   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE
Rule 152   enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
Rule 153   enum_specifier -> ENUM IDENTIFIER
Rule 154   enumerator_list -> enumerator
Rule 155   enumerator_list -> enumerator_list COMMA enumerator
Rule 156   enumerator -> enumeration_constant EQUALS constant_expression
Rule 157   enumerator -> enumeration_constant
Rule 158   type_qualifier -> CONST
Rule 159   type_qualifier -> RESTRICT
Rule 160   type_qualifier -> VOLATILE
Rule 161   function_specifier -> INLINE
Rule 162   function_specifier -> NORETURN
Rule 163   alignment_specifier -> ALIGNAS LPAREN type_name RPAREN
Rule 164   alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN
Rule 165   declarator -> pointer direct_declarator
Rule 166   declarator -> direct_declarator
Rule 167   direct_declarator -> IDENTIFIER
Rule 168   direct_declarator -> LPAREN declarator RPAREN
Rule 169   direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 170   direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 171   direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 172   direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 173   direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
Rule 174   direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 175   direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 176   direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET
Rule 177   direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET
Rule 178   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 179   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 180   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 181   pointer -> TIMES type_qualifier_list pointer
Rule 182   pointer -> TIMES type_qualifier_list
Rule 183   pointer -> TIMES pointer
Rule 184   pointer -> TIMES
Rule 185   type_qualifier_list -> type_qualifier
Rule 186   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 187   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 188   parameter_type_list -> parameter_list
Rule 189   parameter_list -> parameter_declaration
Rule 190   parameter_list -> parameter_list COMMA parameter_declaration
Rule 191   parameter_declaration -> declaration_specifiers declarator
Rule 192   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 193   parameter_declaration -> declaration_specifiers
Rule 194   identifier_list -> IDENTIFIER
Rule 195   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 196   type_name -> specifier_qualifier_list abstract_declarator
Rule 197   type_name -> specifier_qualifier_list
Rule 198   abstract_declarator -> pointer direct_abstract_declarator
Rule 199   abstract_declarator -> pointer
Rule 200   abstract_declarator -> direct_abstract_declarator
Rule 201   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 202   direct_abstract_declarator -> LBRACKET RBRACKET
Rule 203   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 204   direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 205   direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET
Rule 206   direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 207   direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 208   direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET
Rule 209   direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET
Rule 210   direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET
Rule 211   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 212   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 213   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 214   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 215   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 216   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
Rule 217   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET
Rule 218   direct_abstract_declarator -> LPAREN RPAREN
Rule 219   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 220   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 221   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 222   initializer -> LBRACE initializer_list RBRACE
Rule 223   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 224   initializer -> assignment_expression
Rule 225   initializer_list -> designation initializer
Rule 226   initializer_list -> initializer
Rule 227   initializer_list -> initializer_list COMMA designation initializer
Rule 228   initializer_list -> initializer_list COMMA initializer
Rule 229   designation -> designator_list EQUALS
Rule 230   designator_list -> designator
Rule 231   designator_list -> designator_list designator
Rule 232   designator -> LBRACKET constant_expression RBRACKET
Rule 233   designator -> PERIOD IDENTIFIER
Rule 234   static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
Rule 235   statement -> labeled_statement
Rule 236   statement -> compound_statement
Rule 237   statement -> expression_statement
Rule 238   statement -> selection_statement
Rule 239   statement -> iteration_statement
Rule 240   statement -> jump_statement
Rule 241   labeled_statement -> IDENTIFIER COLON statement
Rule 242   labeled_statement -> CASE constant_expression COLON statement
Rule 243   labeled_statement -> DEFAULT COLON statement
Rule 244   compound_statement -> LBRACE RBRACE
Rule 245   compound_statement -> LBRACE block_item_list RBRACE
Rule 246   block_item_list -> block_item
Rule 247   block_item_list -> block_item_list block_item
Rule 248   block_item -> declaration
Rule 249   block_item -> statement
Rule 250   expression_statement -> SEMI
Rule 251   expression_statement -> expression SEMI
Rule 252   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 253   selection_statement -> IF LPAREN expression RPAREN statement
Rule 254   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 255   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 256   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 257   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 258   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 259   iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement
Rule 260   iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement
Rule 261   jump_statement -> GOTO IDENTIFIER SEMI
Rule 262   jump_statement -> CONTINUE SEMI
Rule 263   jump_statement -> BREAK SEMI
Rule 264   jump_statement -> RETURN SEMI
Rule 265   jump_statement -> RETURN expression SEMI
Rule 266   external_declaration -> function_definition
Rule 267   external_declaration -> declaration
Rule 268   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 269   function_definition -> declaration_specifiers declarator compound_statement
Rule 270   declaration_list -> declaration
Rule 271   declaration_list -> declaration_list declaration

Terminals, with rules where they appear

ADD_ASSIGN           : 82
ALIGNAS              : 163 164
ALIGNOF              : 37
AND_ASSIGN           : 86
AND_OP               : 38 65
AUTO                 : 113
BOOL                 : 124
BREAK                : 263
CASE                 : 242
CCONST               : 10
CHAR                 : 116
COLON                : 17 18 75 146 147 241 242 243
COMMA                : 14 16 26 30 90 106 145 150 152 155 187 190 195 223 227 228 234
COMPLEX              : 125
CONDOP               : 75
CONST                : 158
CONTINUE             : 262
DEC_OP               : 28 33
DEFAULT              : 18 243
DIVIDE               : 48
DIV_ASSIGN           : 80
DO                   : 256
DOUBLE               : 121
ELLIPSIS             : 187
ELSE                 : 252
ENUM                 : 149 150 151 152 153
EQUALS               : 78 107 156 229
EQ_OP                : 62
EXTERN               : 110
FLOAT                : 120
FOR                  : 257 258 259 260
FUNC_NAME            : 13
F_CONSTANT           : 9
GENERIC              : 14
GE_OP                : 60
GOTO                 : 261
GT_OP                : 58
IDENTIFIER           : 7 11 23 24 131 132 151 152 153 167 194 195 233 241 261
IF                   : 252 253
IMAGINARY            : 126
INC_OP               : 27 32
INLINE               : 161
INT                  : 118
I_CONSTANT           : 8
LAND                 : 71
LBRACE               : 25 26 130 131 149 150 151 152 222 223 244 245
LBRACKET             : 20 169 170 171 172 173 174 175 176 177 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 232
LEFT_ASSIGN          : 84
LEFT_OP              : 54
LE_OP                : 59
LNOT                 : 43
LONG                 : 119
LOR                  : 73
LPAREN               : 5 14 21 22 25 26 36 37 45 163 164 168 178 179 180 201 218 219 220 221 234 252 253 254 255 256 257 258 259 260
LT_OP                : 57
MINUS                : 41 52
MOD                  : 49
MOD_ASSIGN           : 81
MUL_ASSIGN           : 79
NE_OP                : 63
NORETURN             : 162
NOT_OP               : 42
OR_ASSIGN            : 88
OR_OP                : 69
PERIOD               : 23 233
PLUS                 : 40 51
PTR_OP               : 24
RBRACE               : 25 26 130 131 149 150 151 152 222 223 244 245
RBRACKET             : 20 169 170 171 172 173 174 175 176 177 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 232
REGISTER             : 114
RESTRICT             : 159
RETURN               : 264 265
RIGHT_ASSIGN         : 85
RIGHT_OP             : 55
RPAREN               : 5 14 21 22 25 26 36 37 45 163 164 168 178 179 180 201 218 219 220 221 234 252 253 254 255 256 257 258 259 260
SEMI                 : 92 93 137 138 234 250 251 256 261 262 263 264 265
SHORT                : 117
SIGNED               : 122
SIZEOF               : 35 36
STATIC               : 111 171 172 174 204 205 206 212 213 215
STATIC_ASSERT        : 234
STRINGLITERAL        : 12 234
STRUCT               : 133
SUB_ASSIGN           : 83
SWITCH               : 254
THREAD_LOCAL         : 112
TIMES                : 39 47 170 173 181 182 183 184 203 211
TYPEDEF              : 109
TYPEID               : 129
UNION                : 134
UNSIGNED             : 123
VOID                 : 115
VOLATILE             : 160
WHILE                : 255 256
XOR                  : 67
XOR_ASSIGN           : 87
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 192 196 201
additive_expression  : 51 52 53 54 55
alignment_specifier  : 103 104
and_expression       : 65 66 67
argument_expression_list : 22 30
assignment_expression : 14 17 18 29 30 77 89 90 171 172 174 175 177 204 205 206 207 209 212 213 214 215 217 224
assignment_operator  : 77
block_item           : 246 247
block_item_list      : 245 247
cast_expression      : 34 45 46 47 48 49
compound_statement   : 236 268 269
conditional_expression : 75 76 91
constant             : 3
constant_expression  : 146 147 156 164 232 234 242
declaration          : 248 259 260 267 270 271
declaration_list     : 268 271
declaration_specifiers : 92 93 95 97 99 101 103 191 192 193 268 269
declarator           : 107 108 147 148 168 191 268 269
designation          : 225 227
designator           : 230 231
designator_list      : 229 231
direct_abstract_declarator : 198 200 210 211 212 213 214 215 216 217 220 221
direct_declarator    : 165 166 169 170 171 172 173 174 175 176 177 178 179 180
enum_specifier       : 128
enumeration_constant : 156 157
enumerator           : 154 155
enumerator_list      : 149 150 151 152 155
equality_expression  : 62 63 64 65
exclusive_or_expression : 67 68 69
expression           : 5 20 75 90 251 252 253 254 255 256 258 260 265
expression_statement : 237 257 257 258 258 259 260
external_declaration : 1 2
function_definition  : 266
function_specifier   : 101 102
generic_assoc_list   : 14 16
generic_association  : 15 16
generic_selection    : 6
identifier_list      : 180 195
inclusive_or_expression : 69 70 71
init_declarator      : 105 106
init_declarator_list : 93 106
initializer          : 107 225 226 227 228
initializer_list     : 25 26 222 223 227 228
iteration_statement  : 239
jump_statement       : 240
labeled_statement    : 235
logical_and_expression : 71 72 73
logical_or_expression : 73 74 75
multiplicative_expression : 47 48 49 50 51 52
parameter_declaration : 189 190
parameter_list       : 187 188 190
parameter_type_list  : 178 219 221
pointer              : 165 181 183 198 199
postfix_expression   : 20 21 22 23 24 27 28 31
primary_expression   : 19
relational_expression : 57 58 59 60 61 62 63
selection_statement  : 238
shift_expression     : 54 55 56 57 58 59 60
specifier_qualifier_list : 137 138 140 142 196 197
statement            : 241 242 243 249 252 252 253 254 255 256 257 258 259 260
static_assert_declaration : 94 139
storage_class_specifier : 95 96
string               : 4
struct_declaration   : 135 136
struct_declaration_list : 130 131 136
struct_declarator    : 144 145
struct_declarator_list : 138 145
struct_or_union      : 130 131 132
struct_or_union_specifier : 127
translation_unit     : 2 0
type_name            : 17 25 26 36 37 45 163
type_qualifier       : 99 100 142 143 185 186
type_qualifier_list  : 171 173 174 175 176 181 182 186 204 206 207 208 212 214 215 216
type_specifier       : 97 98 140 141
unary_expression     : 32 33 35 44 77
unary_operator       : 34

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (266) external_declaration -> . function_definition
    (267) external_declaration -> . declaration
    (268) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (269) function_definition -> . declaration_specifiers declarator compound_statement
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    external_declaration           shift and go to state 12
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 4
    declaration                    shift and go to state 26
    function_definition            shift and go to state 30
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    translation_unit               shift and go to state 40

state 1

    (95) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (96) declaration_specifiers -> storage_class_specifier .
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    SEMI            reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    LBRACKET        reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 96 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 44

state 2

    (94) declaration -> static_assert_declaration .

    RBRACE          reduce using rule 94 (declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 94 (declaration -> static_assert_declaration .)
    IDENTIFIER      reduce using rule 94 (declaration -> static_assert_declaration .)
    CASE            reduce using rule 94 (declaration -> static_assert_declaration .)
    DEFAULT         reduce using rule 94 (declaration -> static_assert_declaration .)
    LBRACE          reduce using rule 94 (declaration -> static_assert_declaration .)
    SEMI            reduce using rule 94 (declaration -> static_assert_declaration .)
    IF              reduce using rule 94 (declaration -> static_assert_declaration .)
    SWITCH          reduce using rule 94 (declaration -> static_assert_declaration .)
    WHILE           reduce using rule 94 (declaration -> static_assert_declaration .)
    DO              reduce using rule 94 (declaration -> static_assert_declaration .)
    FOR             reduce using rule 94 (declaration -> static_assert_declaration .)
    GOTO            reduce using rule 94 (declaration -> static_assert_declaration .)
    CONTINUE        reduce using rule 94 (declaration -> static_assert_declaration .)
    BREAK           reduce using rule 94 (declaration -> static_assert_declaration .)
    RETURN          reduce using rule 94 (declaration -> static_assert_declaration .)
    TYPEDEF         reduce using rule 94 (declaration -> static_assert_declaration .)
    EXTERN          reduce using rule 94 (declaration -> static_assert_declaration .)
    STATIC          reduce using rule 94 (declaration -> static_assert_declaration .)
    THREAD_LOCAL    reduce using rule 94 (declaration -> static_assert_declaration .)
    AUTO            reduce using rule 94 (declaration -> static_assert_declaration .)
    REGISTER        reduce using rule 94 (declaration -> static_assert_declaration .)
    VOID            reduce using rule 94 (declaration -> static_assert_declaration .)
    CHAR            reduce using rule 94 (declaration -> static_assert_declaration .)
    SHORT           reduce using rule 94 (declaration -> static_assert_declaration .)
    INT             reduce using rule 94 (declaration -> static_assert_declaration .)
    LONG            reduce using rule 94 (declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 94 (declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 94 (declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 94 (declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 94 (declaration -> static_assert_declaration .)
    BOOL            reduce using rule 94 (declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 94 (declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 94 (declaration -> static_assert_declaration .)
    TYPEID          reduce using rule 94 (declaration -> static_assert_declaration .)
    CONST           reduce using rule 94 (declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 94 (declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 94 (declaration -> static_assert_declaration .)
    INLINE          reduce using rule 94 (declaration -> static_assert_declaration .)
    NORETURN        reduce using rule 94 (declaration -> static_assert_declaration .)
    ALIGNAS         reduce using rule 94 (declaration -> static_assert_declaration .)
    ENUM            reduce using rule 94 (declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 94 (declaration -> static_assert_declaration .)
    UNION           reduce using rule 94 (declaration -> static_assert_declaration .)
    INC_OP          reduce using rule 94 (declaration -> static_assert_declaration .)
    DEC_OP          reduce using rule 94 (declaration -> static_assert_declaration .)
    SIZEOF          reduce using rule 94 (declaration -> static_assert_declaration .)
    ALIGNOF         reduce using rule 94 (declaration -> static_assert_declaration .)
    LPAREN          reduce using rule 94 (declaration -> static_assert_declaration .)
    AND_OP          reduce using rule 94 (declaration -> static_assert_declaration .)
    TIMES           reduce using rule 94 (declaration -> static_assert_declaration .)
    PLUS            reduce using rule 94 (declaration -> static_assert_declaration .)
    MINUS           reduce using rule 94 (declaration -> static_assert_declaration .)
    NOT_OP          reduce using rule 94 (declaration -> static_assert_declaration .)
    LNOT            reduce using rule 94 (declaration -> static_assert_declaration .)
    I_CONSTANT      reduce using rule 94 (declaration -> static_assert_declaration .)
    F_CONSTANT      reduce using rule 94 (declaration -> static_assert_declaration .)
    CCONST          reduce using rule 94 (declaration -> static_assert_declaration .)
    STRINGLITERAL   reduce using rule 94 (declaration -> static_assert_declaration .)
    FUNC_NAME       reduce using rule 94 (declaration -> static_assert_declaration .)
    GENERIC         reduce using rule 94 (declaration -> static_assert_declaration .)
    $end            reduce using rule 94 (declaration -> static_assert_declaration .)


state 3

    (158) type_qualifier -> CONST .

    VOID            reduce using rule 158 (type_qualifier -> CONST .)
    CHAR            reduce using rule 158 (type_qualifier -> CONST .)
    SHORT           reduce using rule 158 (type_qualifier -> CONST .)
    INT             reduce using rule 158 (type_qualifier -> CONST .)
    LONG            reduce using rule 158 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 158 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 158 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 158 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 158 (type_qualifier -> CONST .)
    BOOL            reduce using rule 158 (type_qualifier -> CONST .)
    COMPLEX         reduce using rule 158 (type_qualifier -> CONST .)
    IMAGINARY       reduce using rule 158 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 158 (type_qualifier -> CONST .)
    CONST           reduce using rule 158 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 158 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 158 (type_qualifier -> CONST .)
    ENUM            reduce using rule 158 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 158 (type_qualifier -> CONST .)
    UNION           reduce using rule 158 (type_qualifier -> CONST .)
    TIMES           reduce using rule 158 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 158 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 158 (type_qualifier -> CONST .)
    COLON           reduce using rule 158 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 158 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 158 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 158 (type_qualifier -> CONST .)
    ALIGNOF         reduce using rule 158 (type_qualifier -> CONST .)
    AND_OP          reduce using rule 158 (type_qualifier -> CONST .)
    PLUS            reduce using rule 158 (type_qualifier -> CONST .)
    MINUS           reduce using rule 158 (type_qualifier -> CONST .)
    NOT_OP          reduce using rule 158 (type_qualifier -> CONST .)
    LNOT            reduce using rule 158 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 158 (type_qualifier -> CONST .)
    I_CONSTANT      reduce using rule 158 (type_qualifier -> CONST .)
    F_CONSTANT      reduce using rule 158 (type_qualifier -> CONST .)
    CCONST          reduce using rule 158 (type_qualifier -> CONST .)
    STRINGLITERAL   reduce using rule 158 (type_qualifier -> CONST .)
    FUNC_NAME       reduce using rule 158 (type_qualifier -> CONST .)
    GENERIC         reduce using rule 158 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 158 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 158 (type_qualifier -> CONST .)
    STATIC          reduce using rule 158 (type_qualifier -> CONST .)
    THREAD_LOCAL    reduce using rule 158 (type_qualifier -> CONST .)
    AUTO            reduce using rule 158 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 158 (type_qualifier -> CONST .)
    INLINE          reduce using rule 158 (type_qualifier -> CONST .)
    NORETURN        reduce using rule 158 (type_qualifier -> CONST .)
    ALIGNAS         reduce using rule 158 (type_qualifier -> CONST .)
    SEMI            reduce using rule 158 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 158 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 158 (type_qualifier -> CONST .)
    COMMA           reduce using rule 158 (type_qualifier -> CONST .)


state 4

    (268) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (269) function_definition -> declaration_specifiers . declarator compound_statement
    (92) declaration -> declaration_specifiers . SEMI
    (93) declaration -> declaration_specifiers . init_declarator_list SEMI
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (105) init_declarator_list -> . init_declarator
    (106) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (107) init_declarator -> . declarator EQUALS initializer
    (108) init_declarator -> . declarator

    SEMI            shift and go to state 47
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 53
    init_declarator_list           shift and go to state 45
    declarator                     shift and go to state 52
    pointer                        shift and go to state 46

state 5

    (127) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    THREAD_LOCAL    reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    COMPLEX         reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    IMAGINARY       reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    NORETURN        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    ALIGNAS         reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 127 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 127 (type_specifier -> struct_or_union_specifier .)


state 6

    (115) type_specifier -> VOID .

    TYPEDEF         reduce using rule 115 (type_specifier -> VOID .)
    EXTERN          reduce using rule 115 (type_specifier -> VOID .)
    STATIC          reduce using rule 115 (type_specifier -> VOID .)
    THREAD_LOCAL    reduce using rule 115 (type_specifier -> VOID .)
    AUTO            reduce using rule 115 (type_specifier -> VOID .)
    REGISTER        reduce using rule 115 (type_specifier -> VOID .)
    VOID            reduce using rule 115 (type_specifier -> VOID .)
    CHAR            reduce using rule 115 (type_specifier -> VOID .)
    SHORT           reduce using rule 115 (type_specifier -> VOID .)
    INT             reduce using rule 115 (type_specifier -> VOID .)
    LONG            reduce using rule 115 (type_specifier -> VOID .)
    FLOAT           reduce using rule 115 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 115 (type_specifier -> VOID .)
    SIGNED          reduce using rule 115 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 115 (type_specifier -> VOID .)
    BOOL            reduce using rule 115 (type_specifier -> VOID .)
    COMPLEX         reduce using rule 115 (type_specifier -> VOID .)
    IMAGINARY       reduce using rule 115 (type_specifier -> VOID .)
    TYPEID          reduce using rule 115 (type_specifier -> VOID .)
    CONST           reduce using rule 115 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 115 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 115 (type_specifier -> VOID .)
    INLINE          reduce using rule 115 (type_specifier -> VOID .)
    NORETURN        reduce using rule 115 (type_specifier -> VOID .)
    ALIGNAS         reduce using rule 115 (type_specifier -> VOID .)
    ENUM            reduce using rule 115 (type_specifier -> VOID .)
    STRUCT          reduce using rule 115 (type_specifier -> VOID .)
    UNION           reduce using rule 115 (type_specifier -> VOID .)
    TIMES           reduce using rule 115 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 115 (type_specifier -> VOID .)
    LPAREN          reduce using rule 115 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 115 (type_specifier -> VOID .)
    COMMA           reduce using rule 115 (type_specifier -> VOID .)
    RPAREN          reduce using rule 115 (type_specifier -> VOID .)
    SEMI            reduce using rule 115 (type_specifier -> VOID .)
    COLON           reduce using rule 115 (type_specifier -> VOID .)


state 7

    (116) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 116 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 116 (type_specifier -> CHAR .)
    STATIC          reduce using rule 116 (type_specifier -> CHAR .)
    THREAD_LOCAL    reduce using rule 116 (type_specifier -> CHAR .)
    AUTO            reduce using rule 116 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 116 (type_specifier -> CHAR .)
    VOID            reduce using rule 116 (type_specifier -> CHAR .)
    CHAR            reduce using rule 116 (type_specifier -> CHAR .)
    SHORT           reduce using rule 116 (type_specifier -> CHAR .)
    INT             reduce using rule 116 (type_specifier -> CHAR .)
    LONG            reduce using rule 116 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 116 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 116 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 116 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 116 (type_specifier -> CHAR .)
    BOOL            reduce using rule 116 (type_specifier -> CHAR .)
    COMPLEX         reduce using rule 116 (type_specifier -> CHAR .)
    IMAGINARY       reduce using rule 116 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 116 (type_specifier -> CHAR .)
    CONST           reduce using rule 116 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 116 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 116 (type_specifier -> CHAR .)
    INLINE          reduce using rule 116 (type_specifier -> CHAR .)
    NORETURN        reduce using rule 116 (type_specifier -> CHAR .)
    ALIGNAS         reduce using rule 116 (type_specifier -> CHAR .)
    ENUM            reduce using rule 116 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 116 (type_specifier -> CHAR .)
    UNION           reduce using rule 116 (type_specifier -> CHAR .)
    TIMES           reduce using rule 116 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 116 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 116 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 116 (type_specifier -> CHAR .)
    COMMA           reduce using rule 116 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 116 (type_specifier -> CHAR .)
    SEMI            reduce using rule 116 (type_specifier -> CHAR .)
    COLON           reduce using rule 116 (type_specifier -> CHAR .)


state 8

    (117) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 117 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 117 (type_specifier -> SHORT .)
    STATIC          reduce using rule 117 (type_specifier -> SHORT .)
    THREAD_LOCAL    reduce using rule 117 (type_specifier -> SHORT .)
    AUTO            reduce using rule 117 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 117 (type_specifier -> SHORT .)
    VOID            reduce using rule 117 (type_specifier -> SHORT .)
    CHAR            reduce using rule 117 (type_specifier -> SHORT .)
    SHORT           reduce using rule 117 (type_specifier -> SHORT .)
    INT             reduce using rule 117 (type_specifier -> SHORT .)
    LONG            reduce using rule 117 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 117 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 117 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 117 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 117 (type_specifier -> SHORT .)
    BOOL            reduce using rule 117 (type_specifier -> SHORT .)
    COMPLEX         reduce using rule 117 (type_specifier -> SHORT .)
    IMAGINARY       reduce using rule 117 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 117 (type_specifier -> SHORT .)
    CONST           reduce using rule 117 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 117 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 117 (type_specifier -> SHORT .)
    INLINE          reduce using rule 117 (type_specifier -> SHORT .)
    NORETURN        reduce using rule 117 (type_specifier -> SHORT .)
    ALIGNAS         reduce using rule 117 (type_specifier -> SHORT .)
    ENUM            reduce using rule 117 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 117 (type_specifier -> SHORT .)
    UNION           reduce using rule 117 (type_specifier -> SHORT .)
    TIMES           reduce using rule 117 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 117 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 117 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 117 (type_specifier -> SHORT .)
    COMMA           reduce using rule 117 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 117 (type_specifier -> SHORT .)
    SEMI            reduce using rule 117 (type_specifier -> SHORT .)
    COLON           reduce using rule 117 (type_specifier -> SHORT .)


state 9

    (111) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 111 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 111 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 111 (storage_class_specifier -> STATIC .)
    THREAD_LOCAL    reduce using rule 111 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 111 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 111 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 111 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 111 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 111 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 111 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 111 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 111 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 111 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 111 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 111 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 111 (storage_class_specifier -> STATIC .)
    COMPLEX         reduce using rule 111 (storage_class_specifier -> STATIC .)
    IMAGINARY       reduce using rule 111 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 111 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 111 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 111 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 111 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 111 (storage_class_specifier -> STATIC .)
    NORETURN        reduce using rule 111 (storage_class_specifier -> STATIC .)
    ALIGNAS         reduce using rule 111 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 111 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 111 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 111 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 111 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 111 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 111 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 111 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 111 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 111 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 111 (storage_class_specifier -> STATIC .)


state 10

    (110) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 110 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    THREAD_LOCAL    reduce using rule 110 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 110 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    COMPLEX         reduce using rule 110 (storage_class_specifier -> EXTERN .)
    IMAGINARY       reduce using rule 110 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    NORETURN        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    ALIGNAS         reduce using rule 110 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 110 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 110 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 110 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 110 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 110 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 110 (storage_class_specifier -> EXTERN .)


state 11

    (101) declaration_specifiers -> function_specifier . declaration_specifiers
    (102) declaration_specifiers -> function_specifier .
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    SEMI            reduce using rule 102 (declaration_specifiers -> function_specifier .)
    TIMES           reduce using rule 102 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 102 (declaration_specifiers -> function_specifier .)
    LPAREN          reduce using rule 102 (declaration_specifiers -> function_specifier .)
    LBRACKET        reduce using rule 102 (declaration_specifiers -> function_specifier .)
    COMMA           reduce using rule 102 (declaration_specifiers -> function_specifier .)
    RPAREN          reduce using rule 102 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 54

state 12

    (1) translation_unit -> external_declaration .

    STATIC_ASSERT   reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    THREAD_LOCAL    reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    COMPLEX         reduce using rule 1 (translation_unit -> external_declaration .)
    IMAGINARY       reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    NORETURN        reduce using rule 1 (translation_unit -> external_declaration .)
    ALIGNAS         reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 13

    (97) declaration_specifiers -> type_specifier . declaration_specifiers
    (98) declaration_specifiers -> type_specifier .
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    SEMI            reduce using rule 98 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 98 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 98 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 98 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 98 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 98 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 98 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 55

state 14

    (114) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 114 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    THREAD_LOCAL    reduce using rule 114 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 114 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    COMPLEX         reduce using rule 114 (storage_class_specifier -> REGISTER .)
    IMAGINARY       reduce using rule 114 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    NORETURN        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    ALIGNAS         reduce using rule 114 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 114 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 114 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 114 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 114 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 114 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 114 (storage_class_specifier -> REGISTER .)


state 15

    (123) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 123 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 123 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 123 (type_specifier -> UNSIGNED .)
    THREAD_LOCAL    reduce using rule 123 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 123 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 123 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 123 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 123 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 123 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 123 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 123 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 123 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 123 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 123 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 123 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 123 (type_specifier -> UNSIGNED .)
    COMPLEX         reduce using rule 123 (type_specifier -> UNSIGNED .)
    IMAGINARY       reduce using rule 123 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 123 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 123 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 123 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 123 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 123 (type_specifier -> UNSIGNED .)
    NORETURN        reduce using rule 123 (type_specifier -> UNSIGNED .)
    ALIGNAS         reduce using rule 123 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 123 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 123 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 123 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 123 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 123 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 123 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 123 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 123 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 123 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 123 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 123 (type_specifier -> UNSIGNED .)


state 16

    (119) type_specifier -> LONG .

    TYPEDEF         reduce using rule 119 (type_specifier -> LONG .)
    EXTERN          reduce using rule 119 (type_specifier -> LONG .)
    STATIC          reduce using rule 119 (type_specifier -> LONG .)
    THREAD_LOCAL    reduce using rule 119 (type_specifier -> LONG .)
    AUTO            reduce using rule 119 (type_specifier -> LONG .)
    REGISTER        reduce using rule 119 (type_specifier -> LONG .)
    VOID            reduce using rule 119 (type_specifier -> LONG .)
    CHAR            reduce using rule 119 (type_specifier -> LONG .)
    SHORT           reduce using rule 119 (type_specifier -> LONG .)
    INT             reduce using rule 119 (type_specifier -> LONG .)
    LONG            reduce using rule 119 (type_specifier -> LONG .)
    FLOAT           reduce using rule 119 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 119 (type_specifier -> LONG .)
    SIGNED          reduce using rule 119 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 119 (type_specifier -> LONG .)
    BOOL            reduce using rule 119 (type_specifier -> LONG .)
    COMPLEX         reduce using rule 119 (type_specifier -> LONG .)
    IMAGINARY       reduce using rule 119 (type_specifier -> LONG .)
    TYPEID          reduce using rule 119 (type_specifier -> LONG .)
    CONST           reduce using rule 119 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 119 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 119 (type_specifier -> LONG .)
    INLINE          reduce using rule 119 (type_specifier -> LONG .)
    NORETURN        reduce using rule 119 (type_specifier -> LONG .)
    ALIGNAS         reduce using rule 119 (type_specifier -> LONG .)
    ENUM            reduce using rule 119 (type_specifier -> LONG .)
    STRUCT          reduce using rule 119 (type_specifier -> LONG .)
    UNION           reduce using rule 119 (type_specifier -> LONG .)
    TIMES           reduce using rule 119 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 119 (type_specifier -> LONG .)
    LPAREN          reduce using rule 119 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 119 (type_specifier -> LONG .)
    COMMA           reduce using rule 119 (type_specifier -> LONG .)
    RPAREN          reduce using rule 119 (type_specifier -> LONG .)
    SEMI            reduce using rule 119 (type_specifier -> LONG .)
    COLON           reduce using rule 119 (type_specifier -> LONG .)


state 17

    (160) type_qualifier -> VOLATILE .

    VOID            reduce using rule 160 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 160 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 160 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 160 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 160 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 160 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 160 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 160 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 160 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 160 (type_qualifier -> VOLATILE .)
    COMPLEX         reduce using rule 160 (type_qualifier -> VOLATILE .)
    IMAGINARY       reduce using rule 160 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 160 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 160 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 160 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 160 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 160 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 160 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 160 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 160 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 160 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 160 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 160 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 160 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 160 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 160 (type_qualifier -> VOLATILE .)
    ALIGNOF         reduce using rule 160 (type_qualifier -> VOLATILE .)
    AND_OP          reduce using rule 160 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 160 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 160 (type_qualifier -> VOLATILE .)
    NOT_OP          reduce using rule 160 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 160 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 160 (type_qualifier -> VOLATILE .)
    I_CONSTANT      reduce using rule 160 (type_qualifier -> VOLATILE .)
    F_CONSTANT      reduce using rule 160 (type_qualifier -> VOLATILE .)
    CCONST          reduce using rule 160 (type_qualifier -> VOLATILE .)
    STRINGLITERAL   reduce using rule 160 (type_qualifier -> VOLATILE .)
    FUNC_NAME       reduce using rule 160 (type_qualifier -> VOLATILE .)
    GENERIC         reduce using rule 160 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 160 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 160 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 160 (type_qualifier -> VOLATILE .)
    THREAD_LOCAL    reduce using rule 160 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 160 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 160 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 160 (type_qualifier -> VOLATILE .)
    NORETURN        reduce using rule 160 (type_qualifier -> VOLATILE .)
    ALIGNAS         reduce using rule 160 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 160 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 160 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 160 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 160 (type_qualifier -> VOLATILE .)


state 18

    (126) type_specifier -> IMAGINARY .

    TYPEDEF         reduce using rule 126 (type_specifier -> IMAGINARY .)
    EXTERN          reduce using rule 126 (type_specifier -> IMAGINARY .)
    STATIC          reduce using rule 126 (type_specifier -> IMAGINARY .)
    THREAD_LOCAL    reduce using rule 126 (type_specifier -> IMAGINARY .)
    AUTO            reduce using rule 126 (type_specifier -> IMAGINARY .)
    REGISTER        reduce using rule 126 (type_specifier -> IMAGINARY .)
    VOID            reduce using rule 126 (type_specifier -> IMAGINARY .)
    CHAR            reduce using rule 126 (type_specifier -> IMAGINARY .)
    SHORT           reduce using rule 126 (type_specifier -> IMAGINARY .)
    INT             reduce using rule 126 (type_specifier -> IMAGINARY .)
    LONG            reduce using rule 126 (type_specifier -> IMAGINARY .)
    FLOAT           reduce using rule 126 (type_specifier -> IMAGINARY .)
    DOUBLE          reduce using rule 126 (type_specifier -> IMAGINARY .)
    SIGNED          reduce using rule 126 (type_specifier -> IMAGINARY .)
    UNSIGNED        reduce using rule 126 (type_specifier -> IMAGINARY .)
    BOOL            reduce using rule 126 (type_specifier -> IMAGINARY .)
    COMPLEX         reduce using rule 126 (type_specifier -> IMAGINARY .)
    IMAGINARY       reduce using rule 126 (type_specifier -> IMAGINARY .)
    TYPEID          reduce using rule 126 (type_specifier -> IMAGINARY .)
    CONST           reduce using rule 126 (type_specifier -> IMAGINARY .)
    RESTRICT        reduce using rule 126 (type_specifier -> IMAGINARY .)
    VOLATILE        reduce using rule 126 (type_specifier -> IMAGINARY .)
    INLINE          reduce using rule 126 (type_specifier -> IMAGINARY .)
    NORETURN        reduce using rule 126 (type_specifier -> IMAGINARY .)
    ALIGNAS         reduce using rule 126 (type_specifier -> IMAGINARY .)
    ENUM            reduce using rule 126 (type_specifier -> IMAGINARY .)
    STRUCT          reduce using rule 126 (type_specifier -> IMAGINARY .)
    UNION           reduce using rule 126 (type_specifier -> IMAGINARY .)
    TIMES           reduce using rule 126 (type_specifier -> IMAGINARY .)
    IDENTIFIER      reduce using rule 126 (type_specifier -> IMAGINARY .)
    LPAREN          reduce using rule 126 (type_specifier -> IMAGINARY .)
    LBRACKET        reduce using rule 126 (type_specifier -> IMAGINARY .)
    COMMA           reduce using rule 126 (type_specifier -> IMAGINARY .)
    RPAREN          reduce using rule 126 (type_specifier -> IMAGINARY .)
    SEMI            reduce using rule 126 (type_specifier -> IMAGINARY .)
    COLON           reduce using rule 126 (type_specifier -> IMAGINARY .)


state 19

    (109) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    THREAD_LOCAL    reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    COMPLEX         reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    IMAGINARY       reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    NORETURN        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    ALIGNAS         reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 109 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 109 (storage_class_specifier -> TYPEDEF .)


state 20

    (162) function_specifier -> NORETURN .

    TYPEDEF         reduce using rule 162 (function_specifier -> NORETURN .)
    EXTERN          reduce using rule 162 (function_specifier -> NORETURN .)
    STATIC          reduce using rule 162 (function_specifier -> NORETURN .)
    THREAD_LOCAL    reduce using rule 162 (function_specifier -> NORETURN .)
    AUTO            reduce using rule 162 (function_specifier -> NORETURN .)
    REGISTER        reduce using rule 162 (function_specifier -> NORETURN .)
    VOID            reduce using rule 162 (function_specifier -> NORETURN .)
    CHAR            reduce using rule 162 (function_specifier -> NORETURN .)
    SHORT           reduce using rule 162 (function_specifier -> NORETURN .)
    INT             reduce using rule 162 (function_specifier -> NORETURN .)
    LONG            reduce using rule 162 (function_specifier -> NORETURN .)
    FLOAT           reduce using rule 162 (function_specifier -> NORETURN .)
    DOUBLE          reduce using rule 162 (function_specifier -> NORETURN .)
    SIGNED          reduce using rule 162 (function_specifier -> NORETURN .)
    UNSIGNED        reduce using rule 162 (function_specifier -> NORETURN .)
    BOOL            reduce using rule 162 (function_specifier -> NORETURN .)
    COMPLEX         reduce using rule 162 (function_specifier -> NORETURN .)
    IMAGINARY       reduce using rule 162 (function_specifier -> NORETURN .)
    TYPEID          reduce using rule 162 (function_specifier -> NORETURN .)
    CONST           reduce using rule 162 (function_specifier -> NORETURN .)
    RESTRICT        reduce using rule 162 (function_specifier -> NORETURN .)
    VOLATILE        reduce using rule 162 (function_specifier -> NORETURN .)
    INLINE          reduce using rule 162 (function_specifier -> NORETURN .)
    NORETURN        reduce using rule 162 (function_specifier -> NORETURN .)
    ALIGNAS         reduce using rule 162 (function_specifier -> NORETURN .)
    ENUM            reduce using rule 162 (function_specifier -> NORETURN .)
    STRUCT          reduce using rule 162 (function_specifier -> NORETURN .)
    UNION           reduce using rule 162 (function_specifier -> NORETURN .)
    TIMES           reduce using rule 162 (function_specifier -> NORETURN .)
    IDENTIFIER      reduce using rule 162 (function_specifier -> NORETURN .)
    LPAREN          reduce using rule 162 (function_specifier -> NORETURN .)
    LBRACKET        reduce using rule 162 (function_specifier -> NORETURN .)
    COMMA           reduce using rule 162 (function_specifier -> NORETURN .)
    RPAREN          reduce using rule 162 (function_specifier -> NORETURN .)
    SEMI            reduce using rule 162 (function_specifier -> NORETURN .)


state 21

    (134) struct_or_union -> UNION .

    LBRACE          reduce using rule 134 (struct_or_union -> UNION .)
    IDENTIFIER      reduce using rule 134 (struct_or_union -> UNION .)


state 22

    (113) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 113 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 113 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 113 (storage_class_specifier -> AUTO .)
    THREAD_LOCAL    reduce using rule 113 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 113 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 113 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 113 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 113 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 113 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 113 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 113 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 113 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 113 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 113 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 113 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 113 (storage_class_specifier -> AUTO .)
    COMPLEX         reduce using rule 113 (storage_class_specifier -> AUTO .)
    IMAGINARY       reduce using rule 113 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 113 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 113 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 113 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 113 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 113 (storage_class_specifier -> AUTO .)
    NORETURN        reduce using rule 113 (storage_class_specifier -> AUTO .)
    ALIGNAS         reduce using rule 113 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 113 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 113 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 113 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 113 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 113 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 113 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 113 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 113 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 113 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 113 (storage_class_specifier -> AUTO .)


state 23

    (163) alignment_specifier -> ALIGNAS . LPAREN type_name RPAREN
    (164) alignment_specifier -> ALIGNAS . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 56


state 24

    (149) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (150) enum_specifier -> ENUM . LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> ENUM . IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> ENUM . IDENTIFIER

    LBRACE          shift and go to state 57
    IDENTIFIER      shift and go to state 58


state 25

    (112) storage_class_specifier -> THREAD_LOCAL .

    TYPEDEF         reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    EXTERN          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    STATIC          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    THREAD_LOCAL    reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    AUTO            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    REGISTER        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    VOID            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    CHAR            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    SHORT           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    INT             reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    LONG            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    FLOAT           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    DOUBLE          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    SIGNED          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    UNSIGNED        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    BOOL            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    COMPLEX         reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    IMAGINARY       reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    TYPEID          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    CONST           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    RESTRICT        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    VOLATILE        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    INLINE          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    NORETURN        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    ALIGNAS         reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    ENUM            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    STRUCT          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    UNION           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    SEMI            reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    TIMES           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    IDENTIFIER      reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    LPAREN          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    LBRACKET        reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    COMMA           reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)
    RPAREN          reduce using rule 112 (storage_class_specifier -> THREAD_LOCAL .)


state 26

    (267) external_declaration -> declaration .

    STATIC_ASSERT   reduce using rule 267 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 267 (external_declaration -> declaration .)
    EXTERN          reduce using rule 267 (external_declaration -> declaration .)
    STATIC          reduce using rule 267 (external_declaration -> declaration .)
    THREAD_LOCAL    reduce using rule 267 (external_declaration -> declaration .)
    AUTO            reduce using rule 267 (external_declaration -> declaration .)
    REGISTER        reduce using rule 267 (external_declaration -> declaration .)
    VOID            reduce using rule 267 (external_declaration -> declaration .)
    CHAR            reduce using rule 267 (external_declaration -> declaration .)
    SHORT           reduce using rule 267 (external_declaration -> declaration .)
    INT             reduce using rule 267 (external_declaration -> declaration .)
    LONG            reduce using rule 267 (external_declaration -> declaration .)
    FLOAT           reduce using rule 267 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 267 (external_declaration -> declaration .)
    SIGNED          reduce using rule 267 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 267 (external_declaration -> declaration .)
    BOOL            reduce using rule 267 (external_declaration -> declaration .)
    COMPLEX         reduce using rule 267 (external_declaration -> declaration .)
    IMAGINARY       reduce using rule 267 (external_declaration -> declaration .)
    TYPEID          reduce using rule 267 (external_declaration -> declaration .)
    CONST           reduce using rule 267 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 267 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 267 (external_declaration -> declaration .)
    INLINE          reduce using rule 267 (external_declaration -> declaration .)
    NORETURN        reduce using rule 267 (external_declaration -> declaration .)
    ALIGNAS         reduce using rule 267 (external_declaration -> declaration .)
    ENUM            reduce using rule 267 (external_declaration -> declaration .)
    STRUCT          reduce using rule 267 (external_declaration -> declaration .)
    UNION           reduce using rule 267 (external_declaration -> declaration .)
    $end            reduce using rule 267 (external_declaration -> declaration .)


state 27

    (159) type_qualifier -> RESTRICT .

    VOID            reduce using rule 159 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 159 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 159 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 159 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 159 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 159 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 159 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 159 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 159 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 159 (type_qualifier -> RESTRICT .)
    COMPLEX         reduce using rule 159 (type_qualifier -> RESTRICT .)
    IMAGINARY       reduce using rule 159 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 159 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 159 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 159 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 159 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 159 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 159 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 159 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 159 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 159 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 159 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 159 (type_qualifier -> RESTRICT .)
    INC_OP          reduce using rule 159 (type_qualifier -> RESTRICT .)
    DEC_OP          reduce using rule 159 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 159 (type_qualifier -> RESTRICT .)
    ALIGNOF         reduce using rule 159 (type_qualifier -> RESTRICT .)
    AND_OP          reduce using rule 159 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 159 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 159 (type_qualifier -> RESTRICT .)
    NOT_OP          reduce using rule 159 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 159 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 159 (type_qualifier -> RESTRICT .)
    I_CONSTANT      reduce using rule 159 (type_qualifier -> RESTRICT .)
    F_CONSTANT      reduce using rule 159 (type_qualifier -> RESTRICT .)
    CCONST          reduce using rule 159 (type_qualifier -> RESTRICT .)
    STRINGLITERAL   reduce using rule 159 (type_qualifier -> RESTRICT .)
    FUNC_NAME       reduce using rule 159 (type_qualifier -> RESTRICT .)
    GENERIC         reduce using rule 159 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 159 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 159 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 159 (type_qualifier -> RESTRICT .)
    THREAD_LOCAL    reduce using rule 159 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 159 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 159 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 159 (type_qualifier -> RESTRICT .)
    NORETURN        reduce using rule 159 (type_qualifier -> RESTRICT .)
    ALIGNAS         reduce using rule 159 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 159 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 159 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 159 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 159 (type_qualifier -> RESTRICT .)


state 28

    (129) type_specifier -> TYPEID .

    TYPEDEF         reduce using rule 129 (type_specifier -> TYPEID .)
    EXTERN          reduce using rule 129 (type_specifier -> TYPEID .)
    STATIC          reduce using rule 129 (type_specifier -> TYPEID .)
    THREAD_LOCAL    reduce using rule 129 (type_specifier -> TYPEID .)
    AUTO            reduce using rule 129 (type_specifier -> TYPEID .)
    REGISTER        reduce using rule 129 (type_specifier -> TYPEID .)
    VOID            reduce using rule 129 (type_specifier -> TYPEID .)
    CHAR            reduce using rule 129 (type_specifier -> TYPEID .)
    SHORT           reduce using rule 129 (type_specifier -> TYPEID .)
    INT             reduce using rule 129 (type_specifier -> TYPEID .)
    LONG            reduce using rule 129 (type_specifier -> TYPEID .)
    FLOAT           reduce using rule 129 (type_specifier -> TYPEID .)
    DOUBLE          reduce using rule 129 (type_specifier -> TYPEID .)
    SIGNED          reduce using rule 129 (type_specifier -> TYPEID .)
    UNSIGNED        reduce using rule 129 (type_specifier -> TYPEID .)
    BOOL            reduce using rule 129 (type_specifier -> TYPEID .)
    COMPLEX         reduce using rule 129 (type_specifier -> TYPEID .)
    IMAGINARY       reduce using rule 129 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 129 (type_specifier -> TYPEID .)
    CONST           reduce using rule 129 (type_specifier -> TYPEID .)
    RESTRICT        reduce using rule 129 (type_specifier -> TYPEID .)
    VOLATILE        reduce using rule 129 (type_specifier -> TYPEID .)
    INLINE          reduce using rule 129 (type_specifier -> TYPEID .)
    NORETURN        reduce using rule 129 (type_specifier -> TYPEID .)
    ALIGNAS         reduce using rule 129 (type_specifier -> TYPEID .)
    ENUM            reduce using rule 129 (type_specifier -> TYPEID .)
    STRUCT          reduce using rule 129 (type_specifier -> TYPEID .)
    UNION           reduce using rule 129 (type_specifier -> TYPEID .)
    TIMES           reduce using rule 129 (type_specifier -> TYPEID .)
    IDENTIFIER      reduce using rule 129 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 129 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 129 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 129 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 129 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 129 (type_specifier -> TYPEID .)
    COLON           reduce using rule 129 (type_specifier -> TYPEID .)


state 29

    (234) static_assert_declaration -> STATIC_ASSERT . LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI

    LPAREN          shift and go to state 59


state 30

    (266) external_declaration -> function_definition .

    STATIC_ASSERT   reduce using rule 266 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 266 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 266 (external_declaration -> function_definition .)
    STATIC          reduce using rule 266 (external_declaration -> function_definition .)
    THREAD_LOCAL    reduce using rule 266 (external_declaration -> function_definition .)
    AUTO            reduce using rule 266 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 266 (external_declaration -> function_definition .)
    VOID            reduce using rule 266 (external_declaration -> function_definition .)
    CHAR            reduce using rule 266 (external_declaration -> function_definition .)
    SHORT           reduce using rule 266 (external_declaration -> function_definition .)
    INT             reduce using rule 266 (external_declaration -> function_definition .)
    LONG            reduce using rule 266 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 266 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 266 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 266 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 266 (external_declaration -> function_definition .)
    BOOL            reduce using rule 266 (external_declaration -> function_definition .)
    COMPLEX         reduce using rule 266 (external_declaration -> function_definition .)
    IMAGINARY       reduce using rule 266 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 266 (external_declaration -> function_definition .)
    CONST           reduce using rule 266 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 266 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 266 (external_declaration -> function_definition .)
    INLINE          reduce using rule 266 (external_declaration -> function_definition .)
    NORETURN        reduce using rule 266 (external_declaration -> function_definition .)
    ALIGNAS         reduce using rule 266 (external_declaration -> function_definition .)
    ENUM            reduce using rule 266 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 266 (external_declaration -> function_definition .)
    UNION           reduce using rule 266 (external_declaration -> function_definition .)
    $end            reduce using rule 266 (external_declaration -> function_definition .)


state 31

    (133) struct_or_union -> STRUCT .

    LBRACE          reduce using rule 133 (struct_or_union -> STRUCT .)
    IDENTIFIER      reduce using rule 133 (struct_or_union -> STRUCT .)


state 32

    (118) type_specifier -> INT .

    TYPEDEF         reduce using rule 118 (type_specifier -> INT .)
    EXTERN          reduce using rule 118 (type_specifier -> INT .)
    STATIC          reduce using rule 118 (type_specifier -> INT .)
    THREAD_LOCAL    reduce using rule 118 (type_specifier -> INT .)
    AUTO            reduce using rule 118 (type_specifier -> INT .)
    REGISTER        reduce using rule 118 (type_specifier -> INT .)
    VOID            reduce using rule 118 (type_specifier -> INT .)
    CHAR            reduce using rule 118 (type_specifier -> INT .)
    SHORT           reduce using rule 118 (type_specifier -> INT .)
    INT             reduce using rule 118 (type_specifier -> INT .)
    LONG            reduce using rule 118 (type_specifier -> INT .)
    FLOAT           reduce using rule 118 (type_specifier -> INT .)
    DOUBLE          reduce using rule 118 (type_specifier -> INT .)
    SIGNED          reduce using rule 118 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 118 (type_specifier -> INT .)
    BOOL            reduce using rule 118 (type_specifier -> INT .)
    COMPLEX         reduce using rule 118 (type_specifier -> INT .)
    IMAGINARY       reduce using rule 118 (type_specifier -> INT .)
    TYPEID          reduce using rule 118 (type_specifier -> INT .)
    CONST           reduce using rule 118 (type_specifier -> INT .)
    RESTRICT        reduce using rule 118 (type_specifier -> INT .)
    VOLATILE        reduce using rule 118 (type_specifier -> INT .)
    INLINE          reduce using rule 118 (type_specifier -> INT .)
    NORETURN        reduce using rule 118 (type_specifier -> INT .)
    ALIGNAS         reduce using rule 118 (type_specifier -> INT .)
    ENUM            reduce using rule 118 (type_specifier -> INT .)
    STRUCT          reduce using rule 118 (type_specifier -> INT .)
    UNION           reduce using rule 118 (type_specifier -> INT .)
    TIMES           reduce using rule 118 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 118 (type_specifier -> INT .)
    LPAREN          reduce using rule 118 (type_specifier -> INT .)
    LBRACKET        reduce using rule 118 (type_specifier -> INT .)
    COMMA           reduce using rule 118 (type_specifier -> INT .)
    RPAREN          reduce using rule 118 (type_specifier -> INT .)
    SEMI            reduce using rule 118 (type_specifier -> INT .)
    COLON           reduce using rule 118 (type_specifier -> INT .)


state 33

    (121) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 121 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 121 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 121 (type_specifier -> DOUBLE .)
    THREAD_LOCAL    reduce using rule 121 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 121 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 121 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 121 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 121 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 121 (type_specifier -> DOUBLE .)
    INT             reduce using rule 121 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 121 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 121 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 121 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 121 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 121 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 121 (type_specifier -> DOUBLE .)
    COMPLEX         reduce using rule 121 (type_specifier -> DOUBLE .)
    IMAGINARY       reduce using rule 121 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 121 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 121 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 121 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 121 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 121 (type_specifier -> DOUBLE .)
    NORETURN        reduce using rule 121 (type_specifier -> DOUBLE .)
    ALIGNAS         reduce using rule 121 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 121 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 121 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 121 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 121 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 121 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 121 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 121 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 121 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 121 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 121 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 121 (type_specifier -> DOUBLE .)


state 34

    (99) declaration_specifiers -> type_qualifier . declaration_specifiers
    (100) declaration_specifiers -> type_qualifier .
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    SEMI            reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 100 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 60

state 35

    (103) declaration_specifiers -> alignment_specifier . declaration_specifiers
    (104) declaration_specifiers -> alignment_specifier .
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    SEMI            reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    TIMES           reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    IDENTIFIER      reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    LPAREN          reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    LBRACKET        reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    COMMA           reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    RPAREN          reduce using rule 104 (declaration_specifiers -> alignment_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 61

state 36

    (122) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 122 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 122 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 122 (type_specifier -> SIGNED .)
    THREAD_LOCAL    reduce using rule 122 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 122 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 122 (type_specifier -> SIGNED .)
    VOID            reduce using rule 122 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 122 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 122 (type_specifier -> SIGNED .)
    INT             reduce using rule 122 (type_specifier -> SIGNED .)
    LONG            reduce using rule 122 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 122 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 122 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 122 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 122 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 122 (type_specifier -> SIGNED .)
    COMPLEX         reduce using rule 122 (type_specifier -> SIGNED .)
    IMAGINARY       reduce using rule 122 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 122 (type_specifier -> SIGNED .)
    CONST           reduce using rule 122 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 122 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 122 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 122 (type_specifier -> SIGNED .)
    NORETURN        reduce using rule 122 (type_specifier -> SIGNED .)
    ALIGNAS         reduce using rule 122 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 122 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 122 (type_specifier -> SIGNED .)
    UNION           reduce using rule 122 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 122 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 122 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 122 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 122 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 122 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 122 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 122 (type_specifier -> SIGNED .)
    COLON           reduce using rule 122 (type_specifier -> SIGNED .)


state 37

    (128) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 128 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 128 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 128 (type_specifier -> enum_specifier .)
    THREAD_LOCAL    reduce using rule 128 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 128 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 128 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 128 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 128 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 128 (type_specifier -> enum_specifier .)
    INT             reduce using rule 128 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 128 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 128 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 128 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 128 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 128 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 128 (type_specifier -> enum_specifier .)
    COMPLEX         reduce using rule 128 (type_specifier -> enum_specifier .)
    IMAGINARY       reduce using rule 128 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 128 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 128 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 128 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 128 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 128 (type_specifier -> enum_specifier .)
    NORETURN        reduce using rule 128 (type_specifier -> enum_specifier .)
    ALIGNAS         reduce using rule 128 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 128 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 128 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 128 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 128 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 128 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 128 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 128 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 128 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 128 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 128 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 128 (type_specifier -> enum_specifier .)


state 38

    (125) type_specifier -> COMPLEX .

    TYPEDEF         reduce using rule 125 (type_specifier -> COMPLEX .)
    EXTERN          reduce using rule 125 (type_specifier -> COMPLEX .)
    STATIC          reduce using rule 125 (type_specifier -> COMPLEX .)
    THREAD_LOCAL    reduce using rule 125 (type_specifier -> COMPLEX .)
    AUTO            reduce using rule 125 (type_specifier -> COMPLEX .)
    REGISTER        reduce using rule 125 (type_specifier -> COMPLEX .)
    VOID            reduce using rule 125 (type_specifier -> COMPLEX .)
    CHAR            reduce using rule 125 (type_specifier -> COMPLEX .)
    SHORT           reduce using rule 125 (type_specifier -> COMPLEX .)
    INT             reduce using rule 125 (type_specifier -> COMPLEX .)
    LONG            reduce using rule 125 (type_specifier -> COMPLEX .)
    FLOAT           reduce using rule 125 (type_specifier -> COMPLEX .)
    DOUBLE          reduce using rule 125 (type_specifier -> COMPLEX .)
    SIGNED          reduce using rule 125 (type_specifier -> COMPLEX .)
    UNSIGNED        reduce using rule 125 (type_specifier -> COMPLEX .)
    BOOL            reduce using rule 125 (type_specifier -> COMPLEX .)
    COMPLEX         reduce using rule 125 (type_specifier -> COMPLEX .)
    IMAGINARY       reduce using rule 125 (type_specifier -> COMPLEX .)
    TYPEID          reduce using rule 125 (type_specifier -> COMPLEX .)
    CONST           reduce using rule 125 (type_specifier -> COMPLEX .)
    RESTRICT        reduce using rule 125 (type_specifier -> COMPLEX .)
    VOLATILE        reduce using rule 125 (type_specifier -> COMPLEX .)
    INLINE          reduce using rule 125 (type_specifier -> COMPLEX .)
    NORETURN        reduce using rule 125 (type_specifier -> COMPLEX .)
    ALIGNAS         reduce using rule 125 (type_specifier -> COMPLEX .)
    ENUM            reduce using rule 125 (type_specifier -> COMPLEX .)
    STRUCT          reduce using rule 125 (type_specifier -> COMPLEX .)
    UNION           reduce using rule 125 (type_specifier -> COMPLEX .)
    TIMES           reduce using rule 125 (type_specifier -> COMPLEX .)
    IDENTIFIER      reduce using rule 125 (type_specifier -> COMPLEX .)
    LPAREN          reduce using rule 125 (type_specifier -> COMPLEX .)
    LBRACKET        reduce using rule 125 (type_specifier -> COMPLEX .)
    COMMA           reduce using rule 125 (type_specifier -> COMPLEX .)
    RPAREN          reduce using rule 125 (type_specifier -> COMPLEX .)
    SEMI            reduce using rule 125 (type_specifier -> COMPLEX .)
    COLON           reduce using rule 125 (type_specifier -> COMPLEX .)


state 39

    (124) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 124 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 124 (type_specifier -> BOOL .)
    STATIC          reduce using rule 124 (type_specifier -> BOOL .)
    THREAD_LOCAL    reduce using rule 124 (type_specifier -> BOOL .)
    AUTO            reduce using rule 124 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 124 (type_specifier -> BOOL .)
    VOID            reduce using rule 124 (type_specifier -> BOOL .)
    CHAR            reduce using rule 124 (type_specifier -> BOOL .)
    SHORT           reduce using rule 124 (type_specifier -> BOOL .)
    INT             reduce using rule 124 (type_specifier -> BOOL .)
    LONG            reduce using rule 124 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 124 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 124 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 124 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 124 (type_specifier -> BOOL .)
    BOOL            reduce using rule 124 (type_specifier -> BOOL .)
    COMPLEX         reduce using rule 124 (type_specifier -> BOOL .)
    IMAGINARY       reduce using rule 124 (type_specifier -> BOOL .)
    TYPEID          reduce using rule 124 (type_specifier -> BOOL .)
    CONST           reduce using rule 124 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 124 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 124 (type_specifier -> BOOL .)
    INLINE          reduce using rule 124 (type_specifier -> BOOL .)
    NORETURN        reduce using rule 124 (type_specifier -> BOOL .)
    ALIGNAS         reduce using rule 124 (type_specifier -> BOOL .)
    ENUM            reduce using rule 124 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 124 (type_specifier -> BOOL .)
    UNION           reduce using rule 124 (type_specifier -> BOOL .)
    TIMES           reduce using rule 124 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 124 (type_specifier -> BOOL .)
    LPAREN          reduce using rule 124 (type_specifier -> BOOL .)
    LBRACKET        reduce using rule 124 (type_specifier -> BOOL .)
    COMMA           reduce using rule 124 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 124 (type_specifier -> BOOL .)
    SEMI            reduce using rule 124 (type_specifier -> BOOL .)
    COLON           reduce using rule 124 (type_specifier -> BOOL .)


state 40

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (266) external_declaration -> . function_definition
    (267) external_declaration -> . declaration
    (268) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (269) function_definition -> . declaration_specifiers declarator compound_statement
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    external_declaration           shift and go to state 62
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 4
    declaration                    shift and go to state 26
    function_definition            shift and go to state 30
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35

state 41

    (161) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 161 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 161 (function_specifier -> INLINE .)
    STATIC          reduce using rule 161 (function_specifier -> INLINE .)
    THREAD_LOCAL    reduce using rule 161 (function_specifier -> INLINE .)
    AUTO            reduce using rule 161 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 161 (function_specifier -> INLINE .)
    VOID            reduce using rule 161 (function_specifier -> INLINE .)
    CHAR            reduce using rule 161 (function_specifier -> INLINE .)
    SHORT           reduce using rule 161 (function_specifier -> INLINE .)
    INT             reduce using rule 161 (function_specifier -> INLINE .)
    LONG            reduce using rule 161 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 161 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 161 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 161 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 161 (function_specifier -> INLINE .)
    BOOL            reduce using rule 161 (function_specifier -> INLINE .)
    COMPLEX         reduce using rule 161 (function_specifier -> INLINE .)
    IMAGINARY       reduce using rule 161 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 161 (function_specifier -> INLINE .)
    CONST           reduce using rule 161 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 161 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 161 (function_specifier -> INLINE .)
    INLINE          reduce using rule 161 (function_specifier -> INLINE .)
    NORETURN        reduce using rule 161 (function_specifier -> INLINE .)
    ALIGNAS         reduce using rule 161 (function_specifier -> INLINE .)
    ENUM            reduce using rule 161 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 161 (function_specifier -> INLINE .)
    UNION           reduce using rule 161 (function_specifier -> INLINE .)
    TIMES           reduce using rule 161 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 161 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 161 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 161 (function_specifier -> INLINE .)
    COMMA           reduce using rule 161 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 161 (function_specifier -> INLINE .)
    SEMI            reduce using rule 161 (function_specifier -> INLINE .)


state 42

    (120) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 120 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 120 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 120 (type_specifier -> FLOAT .)
    THREAD_LOCAL    reduce using rule 120 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 120 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 120 (type_specifier -> FLOAT .)
    VOID            reduce using rule 120 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 120 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 120 (type_specifier -> FLOAT .)
    INT             reduce using rule 120 (type_specifier -> FLOAT .)
    LONG            reduce using rule 120 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 120 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 120 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 120 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 120 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 120 (type_specifier -> FLOAT .)
    COMPLEX         reduce using rule 120 (type_specifier -> FLOAT .)
    IMAGINARY       reduce using rule 120 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 120 (type_specifier -> FLOAT .)
    CONST           reduce using rule 120 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 120 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 120 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 120 (type_specifier -> FLOAT .)
    NORETURN        reduce using rule 120 (type_specifier -> FLOAT .)
    ALIGNAS         reduce using rule 120 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 120 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 120 (type_specifier -> FLOAT .)
    UNION           reduce using rule 120 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 120 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 120 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 120 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 120 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 120 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 120 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 120 (type_specifier -> FLOAT .)
    COLON           reduce using rule 120 (type_specifier -> FLOAT .)


state 43

    (130) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> struct_or_union . IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    LBRACE          shift and go to state 64
    IDENTIFIER      shift and go to state 63


state 44

    (95) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 95 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 45

    (93) declaration -> declaration_specifiers init_declarator_list . SEMI
    (106) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 66
    COMMA           shift and go to state 65


state 46

    (165) declarator -> pointer . direct_declarator
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 67

state 47

    (92) declaration -> declaration_specifiers SEMI .

    RBRACE          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    STATIC_ASSERT   reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    IDENTIFIER      reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    THREAD_LOCAL    reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    BOOL            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    COMPLEX         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    IMAGINARY       reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    RESTRICT        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    INLINE          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    NORETURN        reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    ALIGNAS         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    INC_OP          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    DEC_OP          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    ALIGNOF         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    AND_OP          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    NOT_OP          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    I_CONSTANT      reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    F_CONSTANT      reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    STRINGLITERAL   reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    FUNC_NAME       reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    GENERIC         reduce using rule 92 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 92 (declaration -> declaration_specifiers SEMI .)


state 48

    (167) direct_declarator -> IDENTIFIER .

    LBRACKET        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    LPAREN          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    SEMI            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    LBRACE          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    STATIC_ASSERT   reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    COMPLEX         reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    IMAGINARY       reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    TYPEID          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    NORETURN        reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    ALIGNAS         reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 167 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 167 (direct_declarator -> IDENTIFIER .)


state 49

    (166) declarator -> direct_declarator .
    (169) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (170) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (171) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> direct_declarator . LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> direct_declarator . LPAREN RPAREN
    (180) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

    COLON           reduce using rule 166 (declarator -> direct_declarator .)
    SEMI            reduce using rule 166 (declarator -> direct_declarator .)
    COMMA           reduce using rule 166 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 166 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 166 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 166 (declarator -> direct_declarator .)
    STATIC_ASSERT   reduce using rule 166 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 166 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 166 (declarator -> direct_declarator .)
    STATIC          reduce using rule 166 (declarator -> direct_declarator .)
    THREAD_LOCAL    reduce using rule 166 (declarator -> direct_declarator .)
    AUTO            reduce using rule 166 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 166 (declarator -> direct_declarator .)
    VOID            reduce using rule 166 (declarator -> direct_declarator .)
    CHAR            reduce using rule 166 (declarator -> direct_declarator .)
    SHORT           reduce using rule 166 (declarator -> direct_declarator .)
    INT             reduce using rule 166 (declarator -> direct_declarator .)
    LONG            reduce using rule 166 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 166 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 166 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 166 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 166 (declarator -> direct_declarator .)
    BOOL            reduce using rule 166 (declarator -> direct_declarator .)
    COMPLEX         reduce using rule 166 (declarator -> direct_declarator .)
    IMAGINARY       reduce using rule 166 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 166 (declarator -> direct_declarator .)
    CONST           reduce using rule 166 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 166 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 166 (declarator -> direct_declarator .)
    INLINE          reduce using rule 166 (declarator -> direct_declarator .)
    NORETURN        reduce using rule 166 (declarator -> direct_declarator .)
    ALIGNAS         reduce using rule 166 (declarator -> direct_declarator .)
    ENUM            reduce using rule 166 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 166 (declarator -> direct_declarator .)
    UNION           reduce using rule 166 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 68
    LPAREN          shift and go to state 69


state 50

    (181) pointer -> TIMES . type_qualifier_list pointer
    (182) pointer -> TIMES . type_qualifier_list
    (183) pointer -> TIMES . pointer
    (184) pointer -> TIMES .
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 184 (pointer -> TIMES .)
    LPAREN          reduce using rule 184 (pointer -> TIMES .)
    LBRACKET        reduce using rule 184 (pointer -> TIMES .)
    RPAREN          reduce using rule 184 (pointer -> TIMES .)
    COLON           reduce using rule 184 (pointer -> TIMES .)
    COMMA           reduce using rule 184 (pointer -> TIMES .)
    TIMES           shift and go to state 50
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17

    type_qualifier_list            shift and go to state 70
    pointer                        shift and go to state 72
    type_qualifier                 shift and go to state 71

state 51

    (168) direct_declarator -> LPAREN . declarator RPAREN
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 73
    pointer                        shift and go to state 46

state 52

    (268) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (269) function_definition -> declaration_specifiers declarator . compound_statement
    (107) init_declarator -> declarator . EQUALS initializer
    (108) init_declarator -> declarator .
    (270) declaration_list -> . declaration
    (271) declaration_list -> . declaration_list declaration
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    EQUALS          shift and go to state 76
    SEMI            reduce using rule 108 (init_declarator -> declarator .)
    COMMA           reduce using rule 108 (init_declarator -> declarator .)
    LBRACE          shift and go to state 78
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    type_qualifier                 shift and go to state 34
    static_assert_declaration      shift and go to state 2
    compound_statement             shift and go to state 75
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    alignment_specifier            shift and go to state 35
    declaration_list               shift and go to state 79
    type_specifier                 shift and go to state 13
    declaration_specifiers         shift and go to state 74
    declaration                    shift and go to state 77
    function_specifier             shift and go to state 11
    struct_or_union                shift and go to state 43

state 53

    (105) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 105 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 105 (init_declarator_list -> init_declarator .)


state 54

    (101) declaration_specifiers -> function_specifier declaration_specifiers .

    SEMI            reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    TIMES           reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LPAREN          reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    COMMA           reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)
    RPAREN          reduce using rule 101 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 55

    (97) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 97 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 56

    (163) alignment_specifier -> ALIGNAS LPAREN . type_name RPAREN
    (164) alignment_specifier -> ALIGNAS LPAREN . constant_expression RPAREN
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (91) constant_expression -> . conditional_expression
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    type_specifier                 shift and go to state 94
    inclusive_or_expression        shift and go to state 83
    type_name                      shift and go to state 103
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    constant_expression            shift and go to state 107
    relational_expression          shift and go to state 104
    struct_or_union                shift and go to state 43
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    unary_operator                 shift and go to state 115
    conditional_expression         shift and go to state 121

state 57

    (149) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (150) enum_specifier -> ENUM LBRACE . enumerator_list COMMA RBRACE
    (154) enumerator_list -> . enumerator
    (155) enumerator_list -> . enumerator_list COMMA enumerator
    (156) enumerator -> . enumeration_constant EQUALS constant_expression
    (157) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 125

    enumeration_constant           shift and go to state 123
    enumerator_list                shift and go to state 124
    enumerator                     shift and go to state 122

state 58

    (151) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list RBRACE
    (152) enum_specifier -> ENUM IDENTIFIER . LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> ENUM IDENTIFIER .

    LBRACE          shift and go to state 126
    VOID            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    COMPLEX         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    IMAGINARY       reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    TYPEID          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    LPAREN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACKET        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    RPAREN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    TYPEDEF         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    NORETURN        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    ALIGNAS         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER .)


state 59

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN . constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 121
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 127

state 60

    (99) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 99 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 61

    (103) declaration_specifiers -> alignment_specifier declaration_specifiers .

    SEMI            reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    TIMES           reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LPAREN          reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    COMMA           reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    RPAREN          reduce using rule 103 (declaration_specifiers -> alignment_specifier declaration_specifiers .)


state 62

    (2) translation_unit -> translation_unit external_declaration .

    STATIC_ASSERT   reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    THREAD_LOCAL    reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    COMPLEX         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IMAGINARY       reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NORETURN        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ALIGNAS         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 63

    (131) struct_or_union_specifier -> struct_or_union IDENTIFIER . LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    LBRACE          shift and go to state 128
    VOID            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMPLEX         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IMAGINARY       reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPEID          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACKET        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPEDEF         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    NORETURN        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ALIGNAS         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 64

    (130) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (135) struct_declaration_list -> . struct_declaration
    (136) struct_declaration_list -> . struct_declaration_list struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list SEMI
    (138) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (139) struct_declaration -> . static_assert_declaration
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 131
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 132
    struct_declaration_list        shift and go to state 129
    type_specifier                 shift and go to state 94

state 65

    (106) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (107) init_declarator -> . declarator EQUALS initializer
    (108) init_declarator -> . declarator
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 133
    declarator                     shift and go to state 134
    pointer                        shift and go to state 46

state 66

    (93) declaration -> declaration_specifiers init_declarator_list SEMI .

    RBRACE          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC_ASSERT   reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IDENTIFIER      reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    THREAD_LOCAL    reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BOOL            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    COMPLEX         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IMAGINARY       reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RESTRICT        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INLINE          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NORETURN        reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ALIGNAS         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INC_OP          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEC_OP          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ALIGNOF         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND_OP          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT_OP          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    I_CONSTANT      reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    F_CONSTANT      reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRINGLITERAL   reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FUNC_NAME       reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GENERIC         reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 93 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 67

    (165) declarator -> pointer direct_declarator .
    (169) direct_declarator -> direct_declarator . LBRACKET RBRACKET
    (170) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (171) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> direct_declarator . LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> direct_declarator . LPAREN RPAREN
    (180) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

    COLON           reduce using rule 165 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 165 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 165 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 165 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 165 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 165 (declarator -> pointer direct_declarator .)
    STATIC_ASSERT   reduce using rule 165 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 165 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 165 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 165 (declarator -> pointer direct_declarator .)
    THREAD_LOCAL    reduce using rule 165 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 165 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 165 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 165 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 165 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 165 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 165 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 165 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 165 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 165 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 165 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 165 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 165 (declarator -> pointer direct_declarator .)
    COMPLEX         reduce using rule 165 (declarator -> pointer direct_declarator .)
    IMAGINARY       reduce using rule 165 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 165 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 165 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 165 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 165 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 165 (declarator -> pointer direct_declarator .)
    NORETURN        reduce using rule 165 (declarator -> pointer direct_declarator .)
    ALIGNAS         reduce using rule 165 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 165 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 165 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 165 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 68
    LPAREN          shift and go to state 69


state 68

    (169) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (170) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (171) direct_declarator -> direct_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (173) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list RBRACKET
    (177) direct_declarator -> direct_declarator LBRACKET . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 142
    TIMES           shift and go to state 139
    STATIC          shift and go to state 136
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 137
    type_qualifier_list            shift and go to state 138
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 95
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 69

    (178) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (179) direct_declarator -> direct_declarator LPAREN . RPAREN
    (180) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (187) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (188) parameter_type_list -> . parameter_list
    (194) identifier_list -> . IDENTIFIER
    (195) identifier_list -> . identifier_list COMMA IDENTIFIER
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers declarator
    (192) parameter_declaration -> . declaration_specifiers abstract_declarator
    (193) parameter_declaration -> . declaration_specifiers
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RPAREN          shift and go to state 143
    IDENTIFIER      shift and go to state 144
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 149
    parameter_type_list            shift and go to state 145
    parameter_declaration          shift and go to state 146
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 147
    identifier_list                shift and go to state 148
    function_specifier             shift and go to state 11

state 70

    (181) pointer -> TIMES type_qualifier_list . pointer
    (182) pointer -> TIMES type_qualifier_list .
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    LPAREN          reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    COLON           reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 182 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 50
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17

    pointer                        shift and go to state 151
    type_qualifier                 shift and go to state 150

state 71

    (185) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    ALIGNOF         reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    AND_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    NOT_OP          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    I_CONSTANT      reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    F_CONSTANT      reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    CCONST          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    STRINGLITERAL   reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    FUNC_NAME       reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    GENERIC         reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 185 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 185 (type_qualifier_list -> type_qualifier .)


state 72

    (183) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 183 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 183 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 183 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 183 (pointer -> TIMES pointer .)
    COLON           reduce using rule 183 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 183 (pointer -> TIMES pointer .)


state 73

    (168) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 152


state 74

    (92) declaration -> declaration_specifiers . SEMI
    (93) declaration -> declaration_specifiers . init_declarator_list SEMI
    (105) init_declarator_list -> . init_declarator
    (106) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (107) init_declarator -> . declarator EQUALS initializer
    (108) init_declarator -> . declarator
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    SEMI            shift and go to state 47
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 53
    declarator                     shift and go to state 134
    init_declarator_list           shift and go to state 45
    pointer                        shift and go to state 46

state 75

    (269) function_definition -> declaration_specifiers declarator compound_statement .

    STATIC_ASSERT   reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    THREAD_LOCAL    reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    COMPLEX         reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    IMAGINARY       reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    NORETURN        reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    ALIGNAS         reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 269 (function_definition -> declaration_specifiers declarator compound_statement .)


state 76

    (107) init_declarator -> declarator EQUALS . initializer
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 155
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 153
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 141
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 77

    (270) declaration_list -> declaration .

    LBRACE          reduce using rule 270 (declaration_list -> declaration .)
    STATIC_ASSERT   reduce using rule 270 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 270 (declaration_list -> declaration .)
    EXTERN          reduce using rule 270 (declaration_list -> declaration .)
    STATIC          reduce using rule 270 (declaration_list -> declaration .)
    THREAD_LOCAL    reduce using rule 270 (declaration_list -> declaration .)
    AUTO            reduce using rule 270 (declaration_list -> declaration .)
    REGISTER        reduce using rule 270 (declaration_list -> declaration .)
    VOID            reduce using rule 270 (declaration_list -> declaration .)
    CHAR            reduce using rule 270 (declaration_list -> declaration .)
    SHORT           reduce using rule 270 (declaration_list -> declaration .)
    INT             reduce using rule 270 (declaration_list -> declaration .)
    LONG            reduce using rule 270 (declaration_list -> declaration .)
    FLOAT           reduce using rule 270 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 270 (declaration_list -> declaration .)
    SIGNED          reduce using rule 270 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 270 (declaration_list -> declaration .)
    BOOL            reduce using rule 270 (declaration_list -> declaration .)
    COMPLEX         reduce using rule 270 (declaration_list -> declaration .)
    IMAGINARY       reduce using rule 270 (declaration_list -> declaration .)
    TYPEID          reduce using rule 270 (declaration_list -> declaration .)
    CONST           reduce using rule 270 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 270 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 270 (declaration_list -> declaration .)
    INLINE          reduce using rule 270 (declaration_list -> declaration .)
    NORETURN        reduce using rule 270 (declaration_list -> declaration .)
    ALIGNAS         reduce using rule 270 (declaration_list -> declaration .)
    ENUM            reduce using rule 270 (declaration_list -> declaration .)
    STRUCT          reduce using rule 270 (declaration_list -> declaration .)
    UNION           reduce using rule 270 (declaration_list -> declaration .)


state 78

    (244) compound_statement -> LBRACE . RBRACE
    (245) compound_statement -> LBRACE . block_item_list RBRACE
    (246) block_item_list -> . block_item
    (247) block_item_list -> . block_item_list block_item
    (248) block_item -> . declaration
    (249) block_item -> . statement
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 177
    STATIC_ASSERT   shift and go to state 29
    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 101
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 13
    unary_expression               shift and go to state 135
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    selection_statement            shift and go to state 179
    cast_expression                shift and go to state 105
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 170
    unary_operator                 shift and go to state 115
    logical_or_expression          shift and go to state 114
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    declaration_specifiers         shift and go to state 74
    declaration                    shift and go to state 172
    logical_and_expression         shift and go to state 96
    block_item_list                shift and go to state 163
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    labeled_statement              shift and go to state 159
    function_specifier             shift and go to state 11
    block_item                     shift and go to state 175
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 79

    (268) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (271) declaration_list -> declaration_list . declaration
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    LBRACE          shift and go to state 78
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    type_qualifier                 shift and go to state 34
    static_assert_declaration      shift and go to state 2
    compound_statement             shift and go to state 182
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    alignment_specifier            shift and go to state 35
    type_specifier                 shift and go to state 13
    declaration_specifiers         shift and go to state 74
    declaration                    shift and go to state 183
    function_specifier             shift and go to state 11
    struct_or_union                shift and go to state 43

state 80

    (14) generic_selection -> GENERIC . LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 184


state 81

    (42) unary_operator -> NOT_OP .

    LPAREN          reduce using rule 42 (unary_operator -> NOT_OP .)
    INC_OP          reduce using rule 42 (unary_operator -> NOT_OP .)
    DEC_OP          reduce using rule 42 (unary_operator -> NOT_OP .)
    SIZEOF          reduce using rule 42 (unary_operator -> NOT_OP .)
    ALIGNOF         reduce using rule 42 (unary_operator -> NOT_OP .)
    AND_OP          reduce using rule 42 (unary_operator -> NOT_OP .)
    TIMES           reduce using rule 42 (unary_operator -> NOT_OP .)
    PLUS            reduce using rule 42 (unary_operator -> NOT_OP .)
    MINUS           reduce using rule 42 (unary_operator -> NOT_OP .)
    NOT_OP          reduce using rule 42 (unary_operator -> NOT_OP .)
    LNOT            reduce using rule 42 (unary_operator -> NOT_OP .)
    IDENTIFIER      reduce using rule 42 (unary_operator -> NOT_OP .)
    I_CONSTANT      reduce using rule 42 (unary_operator -> NOT_OP .)
    F_CONSTANT      reduce using rule 42 (unary_operator -> NOT_OP .)
    CCONST          reduce using rule 42 (unary_operator -> NOT_OP .)
    STRINGLITERAL   reduce using rule 42 (unary_operator -> NOT_OP .)
    FUNC_NAME       reduce using rule 42 (unary_operator -> NOT_OP .)
    GENERIC         reduce using rule 42 (unary_operator -> NOT_OP .)


state 82

    (41) unary_operator -> MINUS .

    LPAREN          reduce using rule 41 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 41 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 41 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 41 (unary_operator -> MINUS .)
    ALIGNOF         reduce using rule 41 (unary_operator -> MINUS .)
    AND_OP          reduce using rule 41 (unary_operator -> MINUS .)
    TIMES           reduce using rule 41 (unary_operator -> MINUS .)
    PLUS            reduce using rule 41 (unary_operator -> MINUS .)
    MINUS           reduce using rule 41 (unary_operator -> MINUS .)
    NOT_OP          reduce using rule 41 (unary_operator -> MINUS .)
    LNOT            reduce using rule 41 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 41 (unary_operator -> MINUS .)
    I_CONSTANT      reduce using rule 41 (unary_operator -> MINUS .)
    F_CONSTANT      reduce using rule 41 (unary_operator -> MINUS .)
    CCONST          reduce using rule 41 (unary_operator -> MINUS .)
    STRINGLITERAL   reduce using rule 41 (unary_operator -> MINUS .)
    FUNC_NAME       reduce using rule 41 (unary_operator -> MINUS .)
    GENERIC         reduce using rule 41 (unary_operator -> MINUS .)


state 83

    (70) logical_and_expression -> inclusive_or_expression .
    (69) inclusive_or_expression -> inclusive_or_expression . OR_OP exclusive_or_expression

    LAND            reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 70 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           shift and go to state 185


state 84

    (40) unary_operator -> PLUS .

    LPAREN          reduce using rule 40 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 40 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 40 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 40 (unary_operator -> PLUS .)
    ALIGNOF         reduce using rule 40 (unary_operator -> PLUS .)
    AND_OP          reduce using rule 40 (unary_operator -> PLUS .)
    TIMES           reduce using rule 40 (unary_operator -> PLUS .)
    PLUS            reduce using rule 40 (unary_operator -> PLUS .)
    MINUS           reduce using rule 40 (unary_operator -> PLUS .)
    NOT_OP          reduce using rule 40 (unary_operator -> PLUS .)
    LNOT            reduce using rule 40 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> PLUS .)
    I_CONSTANT      reduce using rule 40 (unary_operator -> PLUS .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> PLUS .)
    CCONST          reduce using rule 40 (unary_operator -> PLUS .)
    STRINGLITERAL   reduce using rule 40 (unary_operator -> PLUS .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> PLUS .)
    GENERIC         reduce using rule 40 (unary_operator -> PLUS .)


state 85

    (37) unary_expression -> ALIGNOF . LPAREN type_name RPAREN

    LPAREN          shift and go to state 186


state 86

    (10) constant -> CCONST .

    LBRACKET        reduce using rule 10 (constant -> CCONST .)
    LPAREN          reduce using rule 10 (constant -> CCONST .)
    PERIOD          reduce using rule 10 (constant -> CCONST .)
    PTR_OP          reduce using rule 10 (constant -> CCONST .)
    INC_OP          reduce using rule 10 (constant -> CCONST .)
    DEC_OP          reduce using rule 10 (constant -> CCONST .)
    EQUALS          reduce using rule 10 (constant -> CCONST .)
    MUL_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    DIV_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    MOD_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    ADD_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    SUB_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    LEFT_ASSIGN     reduce using rule 10 (constant -> CCONST .)
    RIGHT_ASSIGN    reduce using rule 10 (constant -> CCONST .)
    AND_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    XOR_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    OR_ASSIGN       reduce using rule 10 (constant -> CCONST .)
    TIMES           reduce using rule 10 (constant -> CCONST .)
    DIVIDE          reduce using rule 10 (constant -> CCONST .)
    MOD             reduce using rule 10 (constant -> CCONST .)
    PLUS            reduce using rule 10 (constant -> CCONST .)
    MINUS           reduce using rule 10 (constant -> CCONST .)
    LEFT_OP         reduce using rule 10 (constant -> CCONST .)
    RIGHT_OP        reduce using rule 10 (constant -> CCONST .)
    LT_OP           reduce using rule 10 (constant -> CCONST .)
    GT_OP           reduce using rule 10 (constant -> CCONST .)
    LE_OP           reduce using rule 10 (constant -> CCONST .)
    GE_OP           reduce using rule 10 (constant -> CCONST .)
    EQ_OP           reduce using rule 10 (constant -> CCONST .)
    NE_OP           reduce using rule 10 (constant -> CCONST .)
    AND_OP          reduce using rule 10 (constant -> CCONST .)
    XOR             reduce using rule 10 (constant -> CCONST .)
    OR_OP           reduce using rule 10 (constant -> CCONST .)
    LAND            reduce using rule 10 (constant -> CCONST .)
    CONDOP          reduce using rule 10 (constant -> CCONST .)
    LOR             reduce using rule 10 (constant -> CCONST .)
    RBRACKET        reduce using rule 10 (constant -> CCONST .)
    SEMI            reduce using rule 10 (constant -> CCONST .)
    COMMA           reduce using rule 10 (constant -> CCONST .)
    RPAREN          reduce using rule 10 (constant -> CCONST .)
    RBRACE          reduce using rule 10 (constant -> CCONST .)
    COLON           reduce using rule 10 (constant -> CCONST .)


state 87

    (32) unary_expression -> INC_OP . unary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 188
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    unary_operator                 shift and go to state 115

state 88

    (44) cast_expression -> unary_expression .

    TIMES           reduce using rule 44 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 44 (cast_expression -> unary_expression .)
    MOD             reduce using rule 44 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 44 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 44 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 44 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 44 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 44 (cast_expression -> unary_expression .)
    XOR             reduce using rule 44 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    LAND            reduce using rule 44 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 44 (cast_expression -> unary_expression .)
    LOR             reduce using rule 44 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 44 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 44 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 44 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 44 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 44 (cast_expression -> unary_expression .)
    COLON           reduce using rule 44 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 44 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 44 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 44 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 44 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 44 (cast_expression -> unary_expression .)


state 89

    (33) unary_expression -> DEC_OP . unary_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 188
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 189
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    unary_operator                 shift and go to state 115

state 90

    (13) string -> FUNC_NAME .

    LBRACKET        reduce using rule 13 (string -> FUNC_NAME .)
    LPAREN          reduce using rule 13 (string -> FUNC_NAME .)
    PERIOD          reduce using rule 13 (string -> FUNC_NAME .)
    PTR_OP          reduce using rule 13 (string -> FUNC_NAME .)
    INC_OP          reduce using rule 13 (string -> FUNC_NAME .)
    DEC_OP          reduce using rule 13 (string -> FUNC_NAME .)
    EQUALS          reduce using rule 13 (string -> FUNC_NAME .)
    MUL_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    DIV_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    MOD_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    ADD_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    SUB_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    LEFT_ASSIGN     reduce using rule 13 (string -> FUNC_NAME .)
    RIGHT_ASSIGN    reduce using rule 13 (string -> FUNC_NAME .)
    AND_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    XOR_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    OR_ASSIGN       reduce using rule 13 (string -> FUNC_NAME .)
    TIMES           reduce using rule 13 (string -> FUNC_NAME .)
    DIVIDE          reduce using rule 13 (string -> FUNC_NAME .)
    MOD             reduce using rule 13 (string -> FUNC_NAME .)
    PLUS            reduce using rule 13 (string -> FUNC_NAME .)
    MINUS           reduce using rule 13 (string -> FUNC_NAME .)
    LEFT_OP         reduce using rule 13 (string -> FUNC_NAME .)
    RIGHT_OP        reduce using rule 13 (string -> FUNC_NAME .)
    LT_OP           reduce using rule 13 (string -> FUNC_NAME .)
    GT_OP           reduce using rule 13 (string -> FUNC_NAME .)
    LE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    GE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    EQ_OP           reduce using rule 13 (string -> FUNC_NAME .)
    NE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    AND_OP          reduce using rule 13 (string -> FUNC_NAME .)
    XOR             reduce using rule 13 (string -> FUNC_NAME .)
    OR_OP           reduce using rule 13 (string -> FUNC_NAME .)
    LAND            reduce using rule 13 (string -> FUNC_NAME .)
    CONDOP          reduce using rule 13 (string -> FUNC_NAME .)
    LOR             reduce using rule 13 (string -> FUNC_NAME .)
    COMMA           reduce using rule 13 (string -> FUNC_NAME .)
    RBRACKET        reduce using rule 13 (string -> FUNC_NAME .)
    SEMI            reduce using rule 13 (string -> FUNC_NAME .)
    RPAREN          reduce using rule 13 (string -> FUNC_NAME .)
    RBRACE          reduce using rule 13 (string -> FUNC_NAME .)
    COLON           reduce using rule 13 (string -> FUNC_NAME .)


state 91

    (12) string -> STRINGLITERAL .

    LBRACKET        reduce using rule 12 (string -> STRINGLITERAL .)
    LPAREN          reduce using rule 12 (string -> STRINGLITERAL .)
    PERIOD          reduce using rule 12 (string -> STRINGLITERAL .)
    PTR_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    INC_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    DEC_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    EQUALS          reduce using rule 12 (string -> STRINGLITERAL .)
    MUL_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    DIV_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    MOD_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    ADD_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    SUB_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    LEFT_ASSIGN     reduce using rule 12 (string -> STRINGLITERAL .)
    RIGHT_ASSIGN    reduce using rule 12 (string -> STRINGLITERAL .)
    AND_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    XOR_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    OR_ASSIGN       reduce using rule 12 (string -> STRINGLITERAL .)
    TIMES           reduce using rule 12 (string -> STRINGLITERAL .)
    DIVIDE          reduce using rule 12 (string -> STRINGLITERAL .)
    MOD             reduce using rule 12 (string -> STRINGLITERAL .)
    PLUS            reduce using rule 12 (string -> STRINGLITERAL .)
    MINUS           reduce using rule 12 (string -> STRINGLITERAL .)
    LEFT_OP         reduce using rule 12 (string -> STRINGLITERAL .)
    RIGHT_OP        reduce using rule 12 (string -> STRINGLITERAL .)
    LT_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    GT_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    LE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    GE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    EQ_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    NE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    AND_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    XOR             reduce using rule 12 (string -> STRINGLITERAL .)
    OR_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    LAND            reduce using rule 12 (string -> STRINGLITERAL .)
    CONDOP          reduce using rule 12 (string -> STRINGLITERAL .)
    LOR             reduce using rule 12 (string -> STRINGLITERAL .)
    COMMA           reduce using rule 12 (string -> STRINGLITERAL .)
    RBRACKET        reduce using rule 12 (string -> STRINGLITERAL .)
    SEMI            reduce using rule 12 (string -> STRINGLITERAL .)
    RPAREN          reduce using rule 12 (string -> STRINGLITERAL .)
    RBRACE          reduce using rule 12 (string -> STRINGLITERAL .)
    COLON           reduce using rule 12 (string -> STRINGLITERAL .)


state 92

    (6) primary_expression -> generic_selection .

    LBRACKET        reduce using rule 6 (primary_expression -> generic_selection .)
    LPAREN          reduce using rule 6 (primary_expression -> generic_selection .)
    PERIOD          reduce using rule 6 (primary_expression -> generic_selection .)
    PTR_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    INC_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    DEC_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    EQUALS          reduce using rule 6 (primary_expression -> generic_selection .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> generic_selection .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> generic_selection .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> generic_selection .)
    TIMES           reduce using rule 6 (primary_expression -> generic_selection .)
    DIVIDE          reduce using rule 6 (primary_expression -> generic_selection .)
    MOD             reduce using rule 6 (primary_expression -> generic_selection .)
    PLUS            reduce using rule 6 (primary_expression -> generic_selection .)
    MINUS           reduce using rule 6 (primary_expression -> generic_selection .)
    LEFT_OP         reduce using rule 6 (primary_expression -> generic_selection .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> generic_selection .)
    LT_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    GT_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    LE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    GE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    EQ_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    NE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    AND_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    XOR             reduce using rule 6 (primary_expression -> generic_selection .)
    OR_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    LAND            reduce using rule 6 (primary_expression -> generic_selection .)
    CONDOP          reduce using rule 6 (primary_expression -> generic_selection .)
    LOR             reduce using rule 6 (primary_expression -> generic_selection .)
    RBRACE          reduce using rule 6 (primary_expression -> generic_selection .)
    COMMA           reduce using rule 6 (primary_expression -> generic_selection .)
    RPAREN          reduce using rule 6 (primary_expression -> generic_selection .)
    RBRACKET        reduce using rule 6 (primary_expression -> generic_selection .)
    SEMI            reduce using rule 6 (primary_expression -> generic_selection .)
    COLON           reduce using rule 6 (primary_expression -> generic_selection .)


state 93

    (35) unary_expression -> SIZEOF . unary_expression
    (36) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 191
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    unary_operator                 shift and go to state 115

state 94

    (140) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (141) specifier_qualifier_list -> type_specifier .
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    TIMES           reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    SEMI            reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 141 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 94
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 192

state 95

    (50) additive_expression -> multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (49) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LT_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GT_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 50 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 195
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 193


state 96

    (72) logical_or_expression -> logical_and_expression .
    (71) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 72 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 196


state 97

    (56) relational_expression -> shift_expression .
    (54) shift_expression -> shift_expression . LEFT_OP additive_expression
    (55) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    GT_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 56 (relational_expression -> shift_expression .)
    XOR             reduce using rule 56 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 56 (relational_expression -> shift_expression .)
    LAND            reduce using rule 56 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 56 (relational_expression -> shift_expression .)
    LOR             reduce using rule 56 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 56 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 56 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 56 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 56 (relational_expression -> shift_expression .)
    COLON           reduce using rule 56 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 197
    RIGHT_OP        shift and go to state 198


state 98

    (142) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (143) specifier_qualifier_list -> type_qualifier .
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    TIMES           reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    SEMI            reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 143 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 94
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 199

state 99

    (8) constant -> I_CONSTANT .

    LBRACKET        reduce using rule 8 (constant -> I_CONSTANT .)
    LPAREN          reduce using rule 8 (constant -> I_CONSTANT .)
    PERIOD          reduce using rule 8 (constant -> I_CONSTANT .)
    PTR_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    INC_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    DEC_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    EQUALS          reduce using rule 8 (constant -> I_CONSTANT .)
    MUL_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    DIV_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    MOD_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    ADD_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    SUB_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 8 (constant -> I_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 8 (constant -> I_CONSTANT .)
    AND_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    XOR_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    OR_ASSIGN       reduce using rule 8 (constant -> I_CONSTANT .)
    TIMES           reduce using rule 8 (constant -> I_CONSTANT .)
    DIVIDE          reduce using rule 8 (constant -> I_CONSTANT .)
    MOD             reduce using rule 8 (constant -> I_CONSTANT .)
    PLUS            reduce using rule 8 (constant -> I_CONSTANT .)
    MINUS           reduce using rule 8 (constant -> I_CONSTANT .)
    LEFT_OP         reduce using rule 8 (constant -> I_CONSTANT .)
    RIGHT_OP        reduce using rule 8 (constant -> I_CONSTANT .)
    LT_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    GT_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    LE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    GE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    EQ_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    NE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    AND_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    XOR             reduce using rule 8 (constant -> I_CONSTANT .)
    OR_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    LAND            reduce using rule 8 (constant -> I_CONSTANT .)
    CONDOP          reduce using rule 8 (constant -> I_CONSTANT .)
    LOR             reduce using rule 8 (constant -> I_CONSTANT .)
    RBRACKET        reduce using rule 8 (constant -> I_CONSTANT .)
    SEMI            reduce using rule 8 (constant -> I_CONSTANT .)
    COMMA           reduce using rule 8 (constant -> I_CONSTANT .)
    RPAREN          reduce using rule 8 (constant -> I_CONSTANT .)
    RBRACE          reduce using rule 8 (constant -> I_CONSTANT .)
    COLON           reduce using rule 8 (constant -> I_CONSTANT .)


state 100

    (68) inclusive_or_expression -> exclusive_or_expression .
    (67) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_OP           reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 68 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 200


state 101

    (3) primary_expression -> constant .

    LBRACKET        reduce using rule 3 (primary_expression -> constant .)
    LPAREN          reduce using rule 3 (primary_expression -> constant .)
    PERIOD          reduce using rule 3 (primary_expression -> constant .)
    PTR_OP          reduce using rule 3 (primary_expression -> constant .)
    INC_OP          reduce using rule 3 (primary_expression -> constant .)
    DEC_OP          reduce using rule 3 (primary_expression -> constant .)
    EQUALS          reduce using rule 3 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> constant .)
    TIMES           reduce using rule 3 (primary_expression -> constant .)
    DIVIDE          reduce using rule 3 (primary_expression -> constant .)
    MOD             reduce using rule 3 (primary_expression -> constant .)
    PLUS            reduce using rule 3 (primary_expression -> constant .)
    MINUS           reduce using rule 3 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 3 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> constant .)
    LT_OP           reduce using rule 3 (primary_expression -> constant .)
    GT_OP           reduce using rule 3 (primary_expression -> constant .)
    LE_OP           reduce using rule 3 (primary_expression -> constant .)
    GE_OP           reduce using rule 3 (primary_expression -> constant .)
    EQ_OP           reduce using rule 3 (primary_expression -> constant .)
    NE_OP           reduce using rule 3 (primary_expression -> constant .)
    AND_OP          reduce using rule 3 (primary_expression -> constant .)
    XOR             reduce using rule 3 (primary_expression -> constant .)
    OR_OP           reduce using rule 3 (primary_expression -> constant .)
    LAND            reduce using rule 3 (primary_expression -> constant .)
    CONDOP          reduce using rule 3 (primary_expression -> constant .)
    LOR             reduce using rule 3 (primary_expression -> constant .)
    RBRACE          reduce using rule 3 (primary_expression -> constant .)
    COMMA           reduce using rule 3 (primary_expression -> constant .)
    RPAREN          reduce using rule 3 (primary_expression -> constant .)
    RBRACKET        reduce using rule 3 (primary_expression -> constant .)
    SEMI            reduce using rule 3 (primary_expression -> constant .)
    COLON           reduce using rule 3 (primary_expression -> constant .)


state 102

    (53) shift_expression -> additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 53 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 53 (shift_expression -> additive_expression .)
    LT_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    GT_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 53 (shift_expression -> additive_expression .)
    XOR             reduce using rule 53 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 53 (shift_expression -> additive_expression .)
    LAND            reduce using rule 53 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 53 (shift_expression -> additive_expression .)
    LOR             reduce using rule 53 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 53 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 53 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 53 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 53 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 53 (shift_expression -> additive_expression .)
    COLON           reduce using rule 53 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 201
    MINUS           shift and go to state 202


state 103

    (163) alignment_specifier -> ALIGNAS LPAREN type_name . RPAREN

    RPAREN          shift and go to state 203


state 104

    (61) equality_expression -> relational_expression .
    (57) relational_expression -> relational_expression . LT_OP shift_expression
    (58) relational_expression -> relational_expression . GT_OP shift_expression
    (59) relational_expression -> relational_expression . LE_OP shift_expression
    (60) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 61 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 61 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 61 (equality_expression -> relational_expression .)
    XOR             reduce using rule 61 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 61 (equality_expression -> relational_expression .)
    LAND            reduce using rule 61 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 61 (equality_expression -> relational_expression .)
    LOR             reduce using rule 61 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 61 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 61 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 61 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 61 (equality_expression -> relational_expression .)
    COLON           reduce using rule 61 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 61 (equality_expression -> relational_expression .)
    LT_OP           shift and go to state 205
    GT_OP           shift and go to state 207
    LE_OP           shift and go to state 204
    GE_OP           shift and go to state 206


state 105

    (46) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 46 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 46 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 46 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 46 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 46 (multiplicative_expression -> cast_expression .)
    LT_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    GT_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 46 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 46 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 46 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 46 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 46 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 46 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 46 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 46 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 46 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 46 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 46 (multiplicative_expression -> cast_expression .)


state 106

    (7) primary_expression -> IDENTIFIER .

    LBRACKET        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    CONDOP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 7 (primary_expression -> IDENTIFIER .)


state 107

    (164) alignment_specifier -> ALIGNAS LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 208


state 108

    (19) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 19 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 19 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 19 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 19 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 19 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 19 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 19 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 19 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 19 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 19 (postfix_expression -> primary_expression .)
    LT_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    GT_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 19 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 19 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 19 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 19 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 19 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 19 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 19 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 19 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 19 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 19 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 19 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 19 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 19 (postfix_expression -> primary_expression .)


state 109

    (64) and_expression -> equality_expression .
    (62) equality_expression -> equality_expression . EQ_OP relational_expression
    (63) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 64 (and_expression -> equality_expression .)
    XOR             reduce using rule 64 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 64 (and_expression -> equality_expression .)
    LAND            reduce using rule 64 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 64 (and_expression -> equality_expression .)
    LOR             reduce using rule 64 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 64 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 64 (and_expression -> equality_expression .)
    COMMA           reduce using rule 64 (and_expression -> equality_expression .)
    SEMI            reduce using rule 64 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 64 (and_expression -> equality_expression .)
    COLON           reduce using rule 64 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 209


state 110

    (43) unary_operator -> LNOT .

    LPAREN          reduce using rule 43 (unary_operator -> LNOT .)
    INC_OP          reduce using rule 43 (unary_operator -> LNOT .)
    DEC_OP          reduce using rule 43 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 43 (unary_operator -> LNOT .)
    ALIGNOF         reduce using rule 43 (unary_operator -> LNOT .)
    AND_OP          reduce using rule 43 (unary_operator -> LNOT .)
    TIMES           reduce using rule 43 (unary_operator -> LNOT .)
    PLUS            reduce using rule 43 (unary_operator -> LNOT .)
    MINUS           reduce using rule 43 (unary_operator -> LNOT .)
    NOT_OP          reduce using rule 43 (unary_operator -> LNOT .)
    LNOT            reduce using rule 43 (unary_operator -> LNOT .)
    IDENTIFIER      reduce using rule 43 (unary_operator -> LNOT .)
    I_CONSTANT      reduce using rule 43 (unary_operator -> LNOT .)
    F_CONSTANT      reduce using rule 43 (unary_operator -> LNOT .)
    CCONST          reduce using rule 43 (unary_operator -> LNOT .)
    STRINGLITERAL   reduce using rule 43 (unary_operator -> LNOT .)
    FUNC_NAME       reduce using rule 43 (unary_operator -> LNOT .)
    GENERIC         reduce using rule 43 (unary_operator -> LNOT .)


state 111

    (66) exclusive_or_expression -> and_expression .
    (65) and_expression -> and_expression . AND_OP equality_expression

    XOR             reduce using rule 66 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 66 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 66 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 66 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 66 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 66 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 66 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 66 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 66 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 66 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 66 (exclusive_or_expression -> and_expression .)
    AND_OP          shift and go to state 211


state 112

    (4) primary_expression -> string .

    LBRACKET        reduce using rule 4 (primary_expression -> string .)
    LPAREN          reduce using rule 4 (primary_expression -> string .)
    PERIOD          reduce using rule 4 (primary_expression -> string .)
    PTR_OP          reduce using rule 4 (primary_expression -> string .)
    INC_OP          reduce using rule 4 (primary_expression -> string .)
    DEC_OP          reduce using rule 4 (primary_expression -> string .)
    EQUALS          reduce using rule 4 (primary_expression -> string .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> string .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> string .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> string .)
    TIMES           reduce using rule 4 (primary_expression -> string .)
    DIVIDE          reduce using rule 4 (primary_expression -> string .)
    MOD             reduce using rule 4 (primary_expression -> string .)
    PLUS            reduce using rule 4 (primary_expression -> string .)
    MINUS           reduce using rule 4 (primary_expression -> string .)
    LEFT_OP         reduce using rule 4 (primary_expression -> string .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> string .)
    LT_OP           reduce using rule 4 (primary_expression -> string .)
    GT_OP           reduce using rule 4 (primary_expression -> string .)
    LE_OP           reduce using rule 4 (primary_expression -> string .)
    GE_OP           reduce using rule 4 (primary_expression -> string .)
    EQ_OP           reduce using rule 4 (primary_expression -> string .)
    NE_OP           reduce using rule 4 (primary_expression -> string .)
    AND_OP          reduce using rule 4 (primary_expression -> string .)
    XOR             reduce using rule 4 (primary_expression -> string .)
    OR_OP           reduce using rule 4 (primary_expression -> string .)
    LAND            reduce using rule 4 (primary_expression -> string .)
    CONDOP          reduce using rule 4 (primary_expression -> string .)
    LOR             reduce using rule 4 (primary_expression -> string .)
    RBRACE          reduce using rule 4 (primary_expression -> string .)
    COMMA           reduce using rule 4 (primary_expression -> string .)
    RPAREN          reduce using rule 4 (primary_expression -> string .)
    RBRACKET        reduce using rule 4 (primary_expression -> string .)
    SEMI            reduce using rule 4 (primary_expression -> string .)
    COLON           reduce using rule 4 (primary_expression -> string .)


state 113

    (31) unary_expression -> postfix_expression .
    (20) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (21) postfix_expression -> postfix_expression . LPAREN RPAREN
    (22) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> postfix_expression . PERIOD IDENTIFIER
    (24) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (27) postfix_expression -> postfix_expression . INC_OP
    (28) postfix_expression -> postfix_expression . DEC_OP

    TIMES           reduce using rule 31 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 31 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 31 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 31 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 31 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 31 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 31 (unary_expression -> postfix_expression .)
    LT_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    GT_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 31 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 31 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 31 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 31 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 31 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 31 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 31 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 31 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 31 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 31 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 31 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 31 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 31 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 31 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 31 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 31 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 31 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 216
    LPAREN          shift and go to state 217
    PERIOD          shift and go to state 215
    PTR_OP          shift and go to state 212
    INC_OP          shift and go to state 214
    DEC_OP          shift and go to state 213


state 114

    (74) conditional_expression -> logical_or_expression .
    (75) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    RPAREN          reduce using rule 74 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 74 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 74 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 74 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 74 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 74 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 218
    LOR             shift and go to state 219


state 115

    (34) unary_expression -> unary_operator . cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 220
    unary_operator                 shift and go to state 115

state 116

    (39) unary_operator -> TIMES .

    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 39 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 39 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 39 (unary_operator -> TIMES .)
    TIMES           reduce using rule 39 (unary_operator -> TIMES .)
    PLUS            reduce using rule 39 (unary_operator -> TIMES .)
    MINUS           reduce using rule 39 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 39 (unary_operator -> TIMES .)
    LNOT            reduce using rule 39 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    CCONST          reduce using rule 39 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 39 (unary_operator -> TIMES .)


state 117

    (38) unary_operator -> AND_OP .

    LPAREN          reduce using rule 38 (unary_operator -> AND_OP .)
    INC_OP          reduce using rule 38 (unary_operator -> AND_OP .)
    DEC_OP          reduce using rule 38 (unary_operator -> AND_OP .)
    SIZEOF          reduce using rule 38 (unary_operator -> AND_OP .)
    ALIGNOF         reduce using rule 38 (unary_operator -> AND_OP .)
    AND_OP          reduce using rule 38 (unary_operator -> AND_OP .)
    TIMES           reduce using rule 38 (unary_operator -> AND_OP .)
    PLUS            reduce using rule 38 (unary_operator -> AND_OP .)
    MINUS           reduce using rule 38 (unary_operator -> AND_OP .)
    NOT_OP          reduce using rule 38 (unary_operator -> AND_OP .)
    LNOT            reduce using rule 38 (unary_operator -> AND_OP .)
    IDENTIFIER      reduce using rule 38 (unary_operator -> AND_OP .)
    I_CONSTANT      reduce using rule 38 (unary_operator -> AND_OP .)
    F_CONSTANT      reduce using rule 38 (unary_operator -> AND_OP .)
    CCONST          reduce using rule 38 (unary_operator -> AND_OP .)
    STRINGLITERAL   reduce using rule 38 (unary_operator -> AND_OP .)
    FUNC_NAME       reduce using rule 38 (unary_operator -> AND_OP .)
    GENERIC         reduce using rule 38 (unary_operator -> AND_OP .)


state 118

    (45) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (5) primary_expression -> LPAREN . expression RPAREN
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 94
    inclusive_or_expression        shift and go to state 83
    type_name                      shift and go to state 222
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 221

state 119

    (9) constant -> F_CONSTANT .

    LBRACKET        reduce using rule 9 (constant -> F_CONSTANT .)
    LPAREN          reduce using rule 9 (constant -> F_CONSTANT .)
    PERIOD          reduce using rule 9 (constant -> F_CONSTANT .)
    PTR_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    INC_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    DEC_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    EQUALS          reduce using rule 9 (constant -> F_CONSTANT .)
    MUL_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    DIV_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    MOD_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    ADD_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    SUB_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 9 (constant -> F_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 9 (constant -> F_CONSTANT .)
    AND_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    XOR_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    OR_ASSIGN       reduce using rule 9 (constant -> F_CONSTANT .)
    TIMES           reduce using rule 9 (constant -> F_CONSTANT .)
    DIVIDE          reduce using rule 9 (constant -> F_CONSTANT .)
    MOD             reduce using rule 9 (constant -> F_CONSTANT .)
    PLUS            reduce using rule 9 (constant -> F_CONSTANT .)
    MINUS           reduce using rule 9 (constant -> F_CONSTANT .)
    LEFT_OP         reduce using rule 9 (constant -> F_CONSTANT .)
    RIGHT_OP        reduce using rule 9 (constant -> F_CONSTANT .)
    LT_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    GT_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    LE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    GE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    EQ_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    NE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    AND_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    XOR             reduce using rule 9 (constant -> F_CONSTANT .)
    OR_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    LAND            reduce using rule 9 (constant -> F_CONSTANT .)
    CONDOP          reduce using rule 9 (constant -> F_CONSTANT .)
    LOR             reduce using rule 9 (constant -> F_CONSTANT .)
    RBRACKET        reduce using rule 9 (constant -> F_CONSTANT .)
    SEMI            reduce using rule 9 (constant -> F_CONSTANT .)
    COMMA           reduce using rule 9 (constant -> F_CONSTANT .)
    RPAREN          reduce using rule 9 (constant -> F_CONSTANT .)
    RBRACE          reduce using rule 9 (constant -> F_CONSTANT .)
    COLON           reduce using rule 9 (constant -> F_CONSTANT .)


state 120

    (196) type_name -> specifier_qualifier_list . abstract_declarator
    (197) type_name -> specifier_qualifier_list .
    (198) abstract_declarator -> . pointer direct_abstract_declarator
    (199) abstract_declarator -> . pointer
    (200) abstract_declarator -> . direct_abstract_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COLON           reduce using rule 197 (type_name -> specifier_qualifier_list .)
    RPAREN          reduce using rule 197 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 50
    LPAREN          shift and go to state 224
    LBRACKET        shift and go to state 223

    abstract_declarator            shift and go to state 226
    direct_abstract_declarator     shift and go to state 225
    pointer                        shift and go to state 227

state 121

    (91) constant_expression -> conditional_expression .

    RPAREN          reduce using rule 91 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 91 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 91 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 91 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 91 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 91 (constant_expression -> conditional_expression .)


state 122

    (154) enumerator_list -> enumerator .

    RBRACE          reduce using rule 154 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 154 (enumerator_list -> enumerator .)


state 123

    (156) enumerator -> enumeration_constant . EQUALS constant_expression
    (157) enumerator -> enumeration_constant .

    EQUALS          shift and go to state 228
    RBRACE          reduce using rule 157 (enumerator -> enumeration_constant .)
    COMMA           reduce using rule 157 (enumerator -> enumeration_constant .)


state 124

    (149) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (150) enum_specifier -> ENUM LBRACE enumerator_list . COMMA RBRACE
    (155) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 229
    COMMA           shift and go to state 230


state 125

    (11) enumeration_constant -> IDENTIFIER .

    EQUALS          reduce using rule 11 (enumeration_constant -> IDENTIFIER .)
    RBRACE          reduce using rule 11 (enumeration_constant -> IDENTIFIER .)
    COMMA           reduce using rule 11 (enumeration_constant -> IDENTIFIER .)


state 126

    (151) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list RBRACE
    (152) enum_specifier -> ENUM IDENTIFIER LBRACE . enumerator_list COMMA RBRACE
    (154) enumerator_list -> . enumerator
    (155) enumerator_list -> . enumerator_list COMMA enumerator
    (156) enumerator -> . enumeration_constant EQUALS constant_expression
    (157) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 125

    enumeration_constant           shift and go to state 123
    enumerator_list                shift and go to state 231
    enumerator                     shift and go to state 122

state 127

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression . COMMA STRINGLITERAL RPAREN SEMI

    COMMA           shift and go to state 232


state 128

    (131) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE . struct_declaration_list RBRACE
    (135) struct_declaration_list -> . struct_declaration
    (136) struct_declaration_list -> . struct_declaration_list struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list SEMI
    (138) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (139) struct_declaration -> . static_assert_declaration
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 131
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 132
    struct_declaration_list        shift and go to state 233
    type_specifier                 shift and go to state 94

state 129

    (130) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (136) struct_declaration_list -> struct_declaration_list . struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list SEMI
    (138) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (139) struct_declaration -> . static_assert_declaration
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RBRACE          shift and go to state 235
    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 234
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 132
    type_specifier                 shift and go to state 94

state 130

    (139) struct_declaration -> static_assert_declaration .

    RBRACE          reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    VOID            reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    CHAR            reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    SHORT           reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    INT             reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    LONG            reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    BOOL            reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    TYPEID          reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    CONST           reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    ENUM            reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 139 (struct_declaration -> static_assert_declaration .)
    UNION           reduce using rule 139 (struct_declaration -> static_assert_declaration .)


state 131

    (135) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    STATIC_ASSERT   reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    COMPLEX         reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    IMAGINARY       reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 135 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 135 (struct_declaration_list -> struct_declaration .)


state 132

    (137) struct_declaration -> specifier_qualifier_list . SEMI
    (138) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (144) struct_declarator_list -> . struct_declarator
    (145) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (146) struct_declarator -> . COLON constant_expression
    (147) struct_declarator -> . declarator COLON constant_expression
    (148) struct_declarator -> . declarator
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    SEMI            shift and go to state 237
    COLON           shift and go to state 239
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    struct_declarator              shift and go to state 236
    struct_declarator_list         shift and go to state 240
    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 238
    pointer                        shift and go to state 46

state 133

    (106) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 106 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 106 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 134

    (107) init_declarator -> declarator . EQUALS initializer
    (108) init_declarator -> declarator .

    EQUALS          shift and go to state 76
    SEMI            reduce using rule 108 (init_declarator -> declarator .)
    COMMA           reduce using rule 108 (init_declarator -> declarator .)


state 135

    (77) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (44) cast_expression -> unary_expression .
    (78) assignment_operator -> . EQUALS
    (79) assignment_operator -> . MUL_ASSIGN
    (80) assignment_operator -> . DIV_ASSIGN
    (81) assignment_operator -> . MOD_ASSIGN
    (82) assignment_operator -> . ADD_ASSIGN
    (83) assignment_operator -> . SUB_ASSIGN
    (84) assignment_operator -> . LEFT_ASSIGN
    (85) assignment_operator -> . RIGHT_ASSIGN
    (86) assignment_operator -> . AND_ASSIGN
    (87) assignment_operator -> . XOR_ASSIGN
    (88) assignment_operator -> . OR_ASSIGN

    TIMES           reduce using rule 44 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 44 (cast_expression -> unary_expression .)
    MOD             reduce using rule 44 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 44 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 44 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 44 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 44 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 44 (cast_expression -> unary_expression .)
    XOR             reduce using rule 44 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 44 (cast_expression -> unary_expression .)
    LAND            reduce using rule 44 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 44 (cast_expression -> unary_expression .)
    LOR             reduce using rule 44 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 44 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 44 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 44 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 44 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 44 (cast_expression -> unary_expression .)
    COLON           reduce using rule 44 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 245
    MUL_ASSIGN      shift and go to state 247
    DIV_ASSIGN      shift and go to state 248
    MOD_ASSIGN      shift and go to state 242
    ADD_ASSIGN      shift and go to state 250
    SUB_ASSIGN      shift and go to state 241
    LEFT_ASSIGN     shift and go to state 249
    RIGHT_ASSIGN    shift and go to state 251
    AND_ASSIGN      shift and go to state 246
    XOR_ASSIGN      shift and go to state 243
    OR_ASSIGN       shift and go to state 244

    assignment_operator            shift and go to state 252

state 136

    (171) direct_declarator -> direct_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> direct_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 253
    type_qualifier_list            shift and go to state 254
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 95
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 137

    (177) direct_declarator -> direct_declarator LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 255


state 138

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . TIMES RBRACKET
    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (175) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (176) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 258
    STATIC          shift and go to state 256
    RBRACKET        shift and go to state 259
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 257
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 95
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 139

    (170) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET
    (39) unary_operator -> TIMES .

    RBRACKET        shift and go to state 260
    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 39 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 39 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 39 (unary_operator -> TIMES .)
    TIMES           reduce using rule 39 (unary_operator -> TIMES .)
    PLUS            reduce using rule 39 (unary_operator -> TIMES .)
    MINUS           reduce using rule 39 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 39 (unary_operator -> TIMES .)
    LNOT            reduce using rule 39 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    CCONST          reduce using rule 39 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 39 (unary_operator -> TIMES .)


state 140

    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (5) primary_expression -> LPAREN . expression RPAREN
    (45) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 94
    inclusive_or_expression        shift and go to state 83
    type_name                      shift and go to state 261
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 221

state 141

    (76) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 76 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 76 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 76 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 76 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 76 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 76 (assignment_expression -> conditional_expression .)


state 142

    (169) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMI            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EQUALS          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STATIC_ASSERT   reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    TYPEDEF         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    EXTERN          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STATIC          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    THREAD_LOCAL    reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    AUTO            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    REGISTER        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOID            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CHAR            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SHORT           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INT             reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LONG            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    FLOAT           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    DOUBLE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SIGNED          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNSIGNED        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    BOOL            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMPLEX         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    IMAGINARY       reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    TYPEID          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    CONST           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RESTRICT        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    VOLATILE        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    INLINE          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    NORETURN        reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ALIGNAS         reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ENUM            reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    STRUCT          reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    UNION           reduce using rule 169 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)


state 143

    (179) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC_ASSERT   reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    THREAD_LOCAL    reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    BOOL            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMPLEX         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    IMAGINARY       reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RESTRICT        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INLINE          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    NORETURN        reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ALIGNAS         reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 179 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 144

    (194) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 194 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 194 (identifier_list -> IDENTIFIER .)


state 145

    (178) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 262


state 146

    (189) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 189 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 189 (parameter_list -> parameter_declaration .)


state 147

    (191) parameter_declaration -> declaration_specifiers . declarator
    (192) parameter_declaration -> declaration_specifiers . abstract_declarator
    (193) parameter_declaration -> declaration_specifiers .
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (198) abstract_declarator -> . pointer direct_abstract_declarator
    (199) abstract_declarator -> . pointer
    (200) abstract_declarator -> . direct_abstract_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 193 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 193 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 263
    LBRACKET        shift and go to state 223

    direct_declarator              shift and go to state 49
    abstract_declarator            shift and go to state 264
    declarator                     shift and go to state 265
    direct_abstract_declarator     shift and go to state 225
    pointer                        shift and go to state 266

state 148

    (180) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (195) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 267
    COMMA           shift and go to state 268


state 149

    (187) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (188) parameter_type_list -> parameter_list .
    (190) parameter_list -> parameter_list . COMMA parameter_declaration

    COMMA           shift and go to state 269
    RPAREN          reduce using rule 188 (parameter_type_list -> parameter_list .)


state 150

    (186) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COLON           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ALIGNOF         reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND_OP          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT_OP          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    I_CONSTANT      reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    F_CONSTANT      reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CCONST          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRINGLITERAL   reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FUNC_NAME       reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    GENERIC         reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 186 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 151

    (181) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)
    LPAREN          reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)
    COLON           reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 181 (pointer -> TIMES type_qualifier_list pointer .)


state 152

    (168) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC_ASSERT   reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    THREAD_LOCAL    reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    BOOL            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    COMPLEX         reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    IMAGINARY       reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    NORETURN        reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    ALIGNAS         reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 168 (direct_declarator -> LPAREN declarator RPAREN .)


state 153

    (107) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 107 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 107 (init_declarator -> declarator EQUALS initializer .)


state 154

    (224) initializer -> assignment_expression .

    RBRACE          reduce using rule 224 (initializer -> assignment_expression .)
    COMMA           reduce using rule 224 (initializer -> assignment_expression .)
    SEMI            reduce using rule 224 (initializer -> assignment_expression .)


state 155

    (222) initializer -> LBRACE . initializer_list RBRACE
    (223) initializer -> LBRACE . initializer_list COMMA RBRACE
    (225) initializer_list -> . designation initializer
    (226) initializer_list -> . initializer
    (227) initializer_list -> . initializer_list COMMA designation initializer
    (228) initializer_list -> . initializer_list COMMA initializer
    (229) designation -> . designator_list EQUALS
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (230) designator_list -> . designator
    (231) designator_list -> . designator_list designator
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (232) designator -> . LBRACKET constant_expression RBRACKET
    (233) designator -> . PERIOD IDENTIFIER
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 155
    LBRACKET        shift and go to state 271
    PERIOD          shift and go to state 274
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 270
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    initializer_list               shift and go to state 272
    designator                     shift and go to state 273
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    designation                    shift and go to state 275
    conditional_expression         shift and go to state 141
    designator_list                shift and go to state 276

state 156

    (237) statement -> expression_statement .

    RBRACE          reduce using rule 237 (statement -> expression_statement .)
    STATIC_ASSERT   reduce using rule 237 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 237 (statement -> expression_statement .)
    CASE            reduce using rule 237 (statement -> expression_statement .)
    DEFAULT         reduce using rule 237 (statement -> expression_statement .)
    LBRACE          reduce using rule 237 (statement -> expression_statement .)
    SEMI            reduce using rule 237 (statement -> expression_statement .)
    IF              reduce using rule 237 (statement -> expression_statement .)
    SWITCH          reduce using rule 237 (statement -> expression_statement .)
    WHILE           reduce using rule 237 (statement -> expression_statement .)
    DO              reduce using rule 237 (statement -> expression_statement .)
    FOR             reduce using rule 237 (statement -> expression_statement .)
    GOTO            reduce using rule 237 (statement -> expression_statement .)
    CONTINUE        reduce using rule 237 (statement -> expression_statement .)
    BREAK           reduce using rule 237 (statement -> expression_statement .)
    RETURN          reduce using rule 237 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 237 (statement -> expression_statement .)
    EXTERN          reduce using rule 237 (statement -> expression_statement .)
    STATIC          reduce using rule 237 (statement -> expression_statement .)
    THREAD_LOCAL    reduce using rule 237 (statement -> expression_statement .)
    AUTO            reduce using rule 237 (statement -> expression_statement .)
    REGISTER        reduce using rule 237 (statement -> expression_statement .)
    VOID            reduce using rule 237 (statement -> expression_statement .)
    CHAR            reduce using rule 237 (statement -> expression_statement .)
    SHORT           reduce using rule 237 (statement -> expression_statement .)
    INT             reduce using rule 237 (statement -> expression_statement .)
    LONG            reduce using rule 237 (statement -> expression_statement .)
    FLOAT           reduce using rule 237 (statement -> expression_statement .)
    DOUBLE          reduce using rule 237 (statement -> expression_statement .)
    SIGNED          reduce using rule 237 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 237 (statement -> expression_statement .)
    BOOL            reduce using rule 237 (statement -> expression_statement .)
    COMPLEX         reduce using rule 237 (statement -> expression_statement .)
    IMAGINARY       reduce using rule 237 (statement -> expression_statement .)
    TYPEID          reduce using rule 237 (statement -> expression_statement .)
    CONST           reduce using rule 237 (statement -> expression_statement .)
    RESTRICT        reduce using rule 237 (statement -> expression_statement .)
    VOLATILE        reduce using rule 237 (statement -> expression_statement .)
    INLINE          reduce using rule 237 (statement -> expression_statement .)
    NORETURN        reduce using rule 237 (statement -> expression_statement .)
    ALIGNAS         reduce using rule 237 (statement -> expression_statement .)
    ENUM            reduce using rule 237 (statement -> expression_statement .)
    STRUCT          reduce using rule 237 (statement -> expression_statement .)
    UNION           reduce using rule 237 (statement -> expression_statement .)
    INC_OP          reduce using rule 237 (statement -> expression_statement .)
    DEC_OP          reduce using rule 237 (statement -> expression_statement .)
    SIZEOF          reduce using rule 237 (statement -> expression_statement .)
    ALIGNOF         reduce using rule 237 (statement -> expression_statement .)
    LPAREN          reduce using rule 237 (statement -> expression_statement .)
    AND_OP          reduce using rule 237 (statement -> expression_statement .)
    TIMES           reduce using rule 237 (statement -> expression_statement .)
    PLUS            reduce using rule 237 (statement -> expression_statement .)
    MINUS           reduce using rule 237 (statement -> expression_statement .)
    NOT_OP          reduce using rule 237 (statement -> expression_statement .)
    LNOT            reduce using rule 237 (statement -> expression_statement .)
    I_CONSTANT      reduce using rule 237 (statement -> expression_statement .)
    F_CONSTANT      reduce using rule 237 (statement -> expression_statement .)
    CCONST          reduce using rule 237 (statement -> expression_statement .)
    STRINGLITERAL   reduce using rule 237 (statement -> expression_statement .)
    FUNC_NAME       reduce using rule 237 (statement -> expression_statement .)
    GENERIC         reduce using rule 237 (statement -> expression_statement .)
    ELSE            reduce using rule 237 (statement -> expression_statement .)


state 157

    (239) statement -> iteration_statement .

    RBRACE          reduce using rule 239 (statement -> iteration_statement .)
    STATIC_ASSERT   reduce using rule 239 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 239 (statement -> iteration_statement .)
    CASE            reduce using rule 239 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 239 (statement -> iteration_statement .)
    LBRACE          reduce using rule 239 (statement -> iteration_statement .)
    SEMI            reduce using rule 239 (statement -> iteration_statement .)
    IF              reduce using rule 239 (statement -> iteration_statement .)
    SWITCH          reduce using rule 239 (statement -> iteration_statement .)
    WHILE           reduce using rule 239 (statement -> iteration_statement .)
    DO              reduce using rule 239 (statement -> iteration_statement .)
    FOR             reduce using rule 239 (statement -> iteration_statement .)
    GOTO            reduce using rule 239 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 239 (statement -> iteration_statement .)
    BREAK           reduce using rule 239 (statement -> iteration_statement .)
    RETURN          reduce using rule 239 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 239 (statement -> iteration_statement .)
    EXTERN          reduce using rule 239 (statement -> iteration_statement .)
    STATIC          reduce using rule 239 (statement -> iteration_statement .)
    THREAD_LOCAL    reduce using rule 239 (statement -> iteration_statement .)
    AUTO            reduce using rule 239 (statement -> iteration_statement .)
    REGISTER        reduce using rule 239 (statement -> iteration_statement .)
    VOID            reduce using rule 239 (statement -> iteration_statement .)
    CHAR            reduce using rule 239 (statement -> iteration_statement .)
    SHORT           reduce using rule 239 (statement -> iteration_statement .)
    INT             reduce using rule 239 (statement -> iteration_statement .)
    LONG            reduce using rule 239 (statement -> iteration_statement .)
    FLOAT           reduce using rule 239 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 239 (statement -> iteration_statement .)
    SIGNED          reduce using rule 239 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 239 (statement -> iteration_statement .)
    BOOL            reduce using rule 239 (statement -> iteration_statement .)
    COMPLEX         reduce using rule 239 (statement -> iteration_statement .)
    IMAGINARY       reduce using rule 239 (statement -> iteration_statement .)
    TYPEID          reduce using rule 239 (statement -> iteration_statement .)
    CONST           reduce using rule 239 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 239 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 239 (statement -> iteration_statement .)
    INLINE          reduce using rule 239 (statement -> iteration_statement .)
    NORETURN        reduce using rule 239 (statement -> iteration_statement .)
    ALIGNAS         reduce using rule 239 (statement -> iteration_statement .)
    ENUM            reduce using rule 239 (statement -> iteration_statement .)
    STRUCT          reduce using rule 239 (statement -> iteration_statement .)
    UNION           reduce using rule 239 (statement -> iteration_statement .)
    INC_OP          reduce using rule 239 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 239 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 239 (statement -> iteration_statement .)
    ALIGNOF         reduce using rule 239 (statement -> iteration_statement .)
    LPAREN          reduce using rule 239 (statement -> iteration_statement .)
    AND_OP          reduce using rule 239 (statement -> iteration_statement .)
    TIMES           reduce using rule 239 (statement -> iteration_statement .)
    PLUS            reduce using rule 239 (statement -> iteration_statement .)
    MINUS           reduce using rule 239 (statement -> iteration_statement .)
    NOT_OP          reduce using rule 239 (statement -> iteration_statement .)
    LNOT            reduce using rule 239 (statement -> iteration_statement .)
    I_CONSTANT      reduce using rule 239 (statement -> iteration_statement .)
    F_CONSTANT      reduce using rule 239 (statement -> iteration_statement .)
    CCONST          reduce using rule 239 (statement -> iteration_statement .)
    STRINGLITERAL   reduce using rule 239 (statement -> iteration_statement .)
    FUNC_NAME       reduce using rule 239 (statement -> iteration_statement .)
    GENERIC         reduce using rule 239 (statement -> iteration_statement .)
    ELSE            reduce using rule 239 (statement -> iteration_statement .)


state 158

    (261) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 277


state 159

    (235) statement -> labeled_statement .

    RBRACE          reduce using rule 235 (statement -> labeled_statement .)
    STATIC_ASSERT   reduce using rule 235 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 235 (statement -> labeled_statement .)
    CASE            reduce using rule 235 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 235 (statement -> labeled_statement .)
    LBRACE          reduce using rule 235 (statement -> labeled_statement .)
    SEMI            reduce using rule 235 (statement -> labeled_statement .)
    IF              reduce using rule 235 (statement -> labeled_statement .)
    SWITCH          reduce using rule 235 (statement -> labeled_statement .)
    WHILE           reduce using rule 235 (statement -> labeled_statement .)
    DO              reduce using rule 235 (statement -> labeled_statement .)
    FOR             reduce using rule 235 (statement -> labeled_statement .)
    GOTO            reduce using rule 235 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 235 (statement -> labeled_statement .)
    BREAK           reduce using rule 235 (statement -> labeled_statement .)
    RETURN          reduce using rule 235 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 235 (statement -> labeled_statement .)
    EXTERN          reduce using rule 235 (statement -> labeled_statement .)
    STATIC          reduce using rule 235 (statement -> labeled_statement .)
    THREAD_LOCAL    reduce using rule 235 (statement -> labeled_statement .)
    AUTO            reduce using rule 235 (statement -> labeled_statement .)
    REGISTER        reduce using rule 235 (statement -> labeled_statement .)
    VOID            reduce using rule 235 (statement -> labeled_statement .)
    CHAR            reduce using rule 235 (statement -> labeled_statement .)
    SHORT           reduce using rule 235 (statement -> labeled_statement .)
    INT             reduce using rule 235 (statement -> labeled_statement .)
    LONG            reduce using rule 235 (statement -> labeled_statement .)
    FLOAT           reduce using rule 235 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 235 (statement -> labeled_statement .)
    SIGNED          reduce using rule 235 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 235 (statement -> labeled_statement .)
    BOOL            reduce using rule 235 (statement -> labeled_statement .)
    COMPLEX         reduce using rule 235 (statement -> labeled_statement .)
    IMAGINARY       reduce using rule 235 (statement -> labeled_statement .)
    TYPEID          reduce using rule 235 (statement -> labeled_statement .)
    CONST           reduce using rule 235 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 235 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 235 (statement -> labeled_statement .)
    INLINE          reduce using rule 235 (statement -> labeled_statement .)
    NORETURN        reduce using rule 235 (statement -> labeled_statement .)
    ALIGNAS         reduce using rule 235 (statement -> labeled_statement .)
    ENUM            reduce using rule 235 (statement -> labeled_statement .)
    STRUCT          reduce using rule 235 (statement -> labeled_statement .)
    UNION           reduce using rule 235 (statement -> labeled_statement .)
    INC_OP          reduce using rule 235 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 235 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 235 (statement -> labeled_statement .)
    ALIGNOF         reduce using rule 235 (statement -> labeled_statement .)
    LPAREN          reduce using rule 235 (statement -> labeled_statement .)
    AND_OP          reduce using rule 235 (statement -> labeled_statement .)
    TIMES           reduce using rule 235 (statement -> labeled_statement .)
    PLUS            reduce using rule 235 (statement -> labeled_statement .)
    MINUS           reduce using rule 235 (statement -> labeled_statement .)
    NOT_OP          reduce using rule 235 (statement -> labeled_statement .)
    LNOT            reduce using rule 235 (statement -> labeled_statement .)
    I_CONSTANT      reduce using rule 235 (statement -> labeled_statement .)
    F_CONSTANT      reduce using rule 235 (statement -> labeled_statement .)
    CCONST          reduce using rule 235 (statement -> labeled_statement .)
    STRINGLITERAL   reduce using rule 235 (statement -> labeled_statement .)
    FUNC_NAME       reduce using rule 235 (statement -> labeled_statement .)
    GENERIC         reduce using rule 235 (statement -> labeled_statement .)
    ELSE            reduce using rule 235 (statement -> labeled_statement .)


state 160

    (264) jump_statement -> RETURN . SEMI
    (265) jump_statement -> RETURN . expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 278
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 279

state 161

    (236) statement -> compound_statement .

    RBRACE          reduce using rule 236 (statement -> compound_statement .)
    STATIC_ASSERT   reduce using rule 236 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 236 (statement -> compound_statement .)
    CASE            reduce using rule 236 (statement -> compound_statement .)
    DEFAULT         reduce using rule 236 (statement -> compound_statement .)
    LBRACE          reduce using rule 236 (statement -> compound_statement .)
    SEMI            reduce using rule 236 (statement -> compound_statement .)
    IF              reduce using rule 236 (statement -> compound_statement .)
    SWITCH          reduce using rule 236 (statement -> compound_statement .)
    WHILE           reduce using rule 236 (statement -> compound_statement .)
    DO              reduce using rule 236 (statement -> compound_statement .)
    FOR             reduce using rule 236 (statement -> compound_statement .)
    GOTO            reduce using rule 236 (statement -> compound_statement .)
    CONTINUE        reduce using rule 236 (statement -> compound_statement .)
    BREAK           reduce using rule 236 (statement -> compound_statement .)
    RETURN          reduce using rule 236 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 236 (statement -> compound_statement .)
    EXTERN          reduce using rule 236 (statement -> compound_statement .)
    STATIC          reduce using rule 236 (statement -> compound_statement .)
    THREAD_LOCAL    reduce using rule 236 (statement -> compound_statement .)
    AUTO            reduce using rule 236 (statement -> compound_statement .)
    REGISTER        reduce using rule 236 (statement -> compound_statement .)
    VOID            reduce using rule 236 (statement -> compound_statement .)
    CHAR            reduce using rule 236 (statement -> compound_statement .)
    SHORT           reduce using rule 236 (statement -> compound_statement .)
    INT             reduce using rule 236 (statement -> compound_statement .)
    LONG            reduce using rule 236 (statement -> compound_statement .)
    FLOAT           reduce using rule 236 (statement -> compound_statement .)
    DOUBLE          reduce using rule 236 (statement -> compound_statement .)
    SIGNED          reduce using rule 236 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 236 (statement -> compound_statement .)
    BOOL            reduce using rule 236 (statement -> compound_statement .)
    COMPLEX         reduce using rule 236 (statement -> compound_statement .)
    IMAGINARY       reduce using rule 236 (statement -> compound_statement .)
    TYPEID          reduce using rule 236 (statement -> compound_statement .)
    CONST           reduce using rule 236 (statement -> compound_statement .)
    RESTRICT        reduce using rule 236 (statement -> compound_statement .)
    VOLATILE        reduce using rule 236 (statement -> compound_statement .)
    INLINE          reduce using rule 236 (statement -> compound_statement .)
    NORETURN        reduce using rule 236 (statement -> compound_statement .)
    ALIGNAS         reduce using rule 236 (statement -> compound_statement .)
    ENUM            reduce using rule 236 (statement -> compound_statement .)
    STRUCT          reduce using rule 236 (statement -> compound_statement .)
    UNION           reduce using rule 236 (statement -> compound_statement .)
    INC_OP          reduce using rule 236 (statement -> compound_statement .)
    DEC_OP          reduce using rule 236 (statement -> compound_statement .)
    SIZEOF          reduce using rule 236 (statement -> compound_statement .)
    ALIGNOF         reduce using rule 236 (statement -> compound_statement .)
    LPAREN          reduce using rule 236 (statement -> compound_statement .)
    AND_OP          reduce using rule 236 (statement -> compound_statement .)
    TIMES           reduce using rule 236 (statement -> compound_statement .)
    PLUS            reduce using rule 236 (statement -> compound_statement .)
    MINUS           reduce using rule 236 (statement -> compound_statement .)
    NOT_OP          reduce using rule 236 (statement -> compound_statement .)
    LNOT            reduce using rule 236 (statement -> compound_statement .)
    I_CONSTANT      reduce using rule 236 (statement -> compound_statement .)
    F_CONSTANT      reduce using rule 236 (statement -> compound_statement .)
    CCONST          reduce using rule 236 (statement -> compound_statement .)
    STRINGLITERAL   reduce using rule 236 (statement -> compound_statement .)
    FUNC_NAME       reduce using rule 236 (statement -> compound_statement .)
    GENERIC         reduce using rule 236 (statement -> compound_statement .)
    ELSE            reduce using rule 236 (statement -> compound_statement .)


state 162

    (257) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> FOR . LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> FOR . LPAREN declaration expression_statement expression RPAREN statement

    LPAREN          shift and go to state 280


state 163

    (245) compound_statement -> LBRACE block_item_list . RBRACE
    (247) block_item_list -> block_item_list . block_item
    (248) block_item -> . declaration
    (249) block_item -> . statement
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 282
    STATIC_ASSERT   shift and go to state 29
    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 101
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 13
    unary_expression               shift and go to state 135
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    selection_statement            shift and go to state 179
    cast_expression                shift and go to state 105
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 170
    unary_operator                 shift and go to state 115
    logical_or_expression          shift and go to state 114
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    declaration_specifiers         shift and go to state 74
    declaration                    shift and go to state 172
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    labeled_statement              shift and go to state 159
    function_specifier             shift and go to state 11
    block_item                     shift and go to state 281
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 164

    (262) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 283


state 165

    (251) expression_statement -> expression . SEMI
    (90) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 285
    COMMA           shift and go to state 284


state 166

    (243) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 286


state 167

    (255) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 287


state 168

    (242) labeled_statement -> CASE . constant_expression COLON statement
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 121
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 288

state 169

    (254) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 289


state 170

    (249) block_item -> statement .

    RBRACE          reduce using rule 249 (block_item -> statement .)
    STATIC_ASSERT   reduce using rule 249 (block_item -> statement .)
    IDENTIFIER      reduce using rule 249 (block_item -> statement .)
    CASE            reduce using rule 249 (block_item -> statement .)
    DEFAULT         reduce using rule 249 (block_item -> statement .)
    LBRACE          reduce using rule 249 (block_item -> statement .)
    SEMI            reduce using rule 249 (block_item -> statement .)
    IF              reduce using rule 249 (block_item -> statement .)
    SWITCH          reduce using rule 249 (block_item -> statement .)
    WHILE           reduce using rule 249 (block_item -> statement .)
    DO              reduce using rule 249 (block_item -> statement .)
    FOR             reduce using rule 249 (block_item -> statement .)
    GOTO            reduce using rule 249 (block_item -> statement .)
    CONTINUE        reduce using rule 249 (block_item -> statement .)
    BREAK           reduce using rule 249 (block_item -> statement .)
    RETURN          reduce using rule 249 (block_item -> statement .)
    TYPEDEF         reduce using rule 249 (block_item -> statement .)
    EXTERN          reduce using rule 249 (block_item -> statement .)
    STATIC          reduce using rule 249 (block_item -> statement .)
    THREAD_LOCAL    reduce using rule 249 (block_item -> statement .)
    AUTO            reduce using rule 249 (block_item -> statement .)
    REGISTER        reduce using rule 249 (block_item -> statement .)
    VOID            reduce using rule 249 (block_item -> statement .)
    CHAR            reduce using rule 249 (block_item -> statement .)
    SHORT           reduce using rule 249 (block_item -> statement .)
    INT             reduce using rule 249 (block_item -> statement .)
    LONG            reduce using rule 249 (block_item -> statement .)
    FLOAT           reduce using rule 249 (block_item -> statement .)
    DOUBLE          reduce using rule 249 (block_item -> statement .)
    SIGNED          reduce using rule 249 (block_item -> statement .)
    UNSIGNED        reduce using rule 249 (block_item -> statement .)
    BOOL            reduce using rule 249 (block_item -> statement .)
    COMPLEX         reduce using rule 249 (block_item -> statement .)
    IMAGINARY       reduce using rule 249 (block_item -> statement .)
    TYPEID          reduce using rule 249 (block_item -> statement .)
    CONST           reduce using rule 249 (block_item -> statement .)
    RESTRICT        reduce using rule 249 (block_item -> statement .)
    VOLATILE        reduce using rule 249 (block_item -> statement .)
    INLINE          reduce using rule 249 (block_item -> statement .)
    NORETURN        reduce using rule 249 (block_item -> statement .)
    ALIGNAS         reduce using rule 249 (block_item -> statement .)
    ENUM            reduce using rule 249 (block_item -> statement .)
    STRUCT          reduce using rule 249 (block_item -> statement .)
    UNION           reduce using rule 249 (block_item -> statement .)
    INC_OP          reduce using rule 249 (block_item -> statement .)
    DEC_OP          reduce using rule 249 (block_item -> statement .)
    SIZEOF          reduce using rule 249 (block_item -> statement .)
    ALIGNOF         reduce using rule 249 (block_item -> statement .)
    LPAREN          reduce using rule 249 (block_item -> statement .)
    AND_OP          reduce using rule 249 (block_item -> statement .)
    TIMES           reduce using rule 249 (block_item -> statement .)
    PLUS            reduce using rule 249 (block_item -> statement .)
    MINUS           reduce using rule 249 (block_item -> statement .)
    NOT_OP          reduce using rule 249 (block_item -> statement .)
    LNOT            reduce using rule 249 (block_item -> statement .)
    I_CONSTANT      reduce using rule 249 (block_item -> statement .)
    F_CONSTANT      reduce using rule 249 (block_item -> statement .)
    CCONST          reduce using rule 249 (block_item -> statement .)
    STRINGLITERAL   reduce using rule 249 (block_item -> statement .)
    FUNC_NAME       reduce using rule 249 (block_item -> statement .)
    GENERIC         reduce using rule 249 (block_item -> statement .)


state 171

    (241) labeled_statement -> IDENTIFIER . COLON statement
    (7) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 290
    LBRACKET        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    CONDOP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 7 (primary_expression -> IDENTIFIER .)


state 172

    (248) block_item -> declaration .

    RBRACE          reduce using rule 248 (block_item -> declaration .)
    STATIC_ASSERT   reduce using rule 248 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 248 (block_item -> declaration .)
    CASE            reduce using rule 248 (block_item -> declaration .)
    DEFAULT         reduce using rule 248 (block_item -> declaration .)
    LBRACE          reduce using rule 248 (block_item -> declaration .)
    SEMI            reduce using rule 248 (block_item -> declaration .)
    IF              reduce using rule 248 (block_item -> declaration .)
    SWITCH          reduce using rule 248 (block_item -> declaration .)
    WHILE           reduce using rule 248 (block_item -> declaration .)
    DO              reduce using rule 248 (block_item -> declaration .)
    FOR             reduce using rule 248 (block_item -> declaration .)
    GOTO            reduce using rule 248 (block_item -> declaration .)
    CONTINUE        reduce using rule 248 (block_item -> declaration .)
    BREAK           reduce using rule 248 (block_item -> declaration .)
    RETURN          reduce using rule 248 (block_item -> declaration .)
    TYPEDEF         reduce using rule 248 (block_item -> declaration .)
    EXTERN          reduce using rule 248 (block_item -> declaration .)
    STATIC          reduce using rule 248 (block_item -> declaration .)
    THREAD_LOCAL    reduce using rule 248 (block_item -> declaration .)
    AUTO            reduce using rule 248 (block_item -> declaration .)
    REGISTER        reduce using rule 248 (block_item -> declaration .)
    VOID            reduce using rule 248 (block_item -> declaration .)
    CHAR            reduce using rule 248 (block_item -> declaration .)
    SHORT           reduce using rule 248 (block_item -> declaration .)
    INT             reduce using rule 248 (block_item -> declaration .)
    LONG            reduce using rule 248 (block_item -> declaration .)
    FLOAT           reduce using rule 248 (block_item -> declaration .)
    DOUBLE          reduce using rule 248 (block_item -> declaration .)
    SIGNED          reduce using rule 248 (block_item -> declaration .)
    UNSIGNED        reduce using rule 248 (block_item -> declaration .)
    BOOL            reduce using rule 248 (block_item -> declaration .)
    COMPLEX         reduce using rule 248 (block_item -> declaration .)
    IMAGINARY       reduce using rule 248 (block_item -> declaration .)
    TYPEID          reduce using rule 248 (block_item -> declaration .)
    CONST           reduce using rule 248 (block_item -> declaration .)
    RESTRICT        reduce using rule 248 (block_item -> declaration .)
    VOLATILE        reduce using rule 248 (block_item -> declaration .)
    INLINE          reduce using rule 248 (block_item -> declaration .)
    NORETURN        reduce using rule 248 (block_item -> declaration .)
    ALIGNAS         reduce using rule 248 (block_item -> declaration .)
    ENUM            reduce using rule 248 (block_item -> declaration .)
    STRUCT          reduce using rule 248 (block_item -> declaration .)
    UNION           reduce using rule 248 (block_item -> declaration .)
    INC_OP          reduce using rule 248 (block_item -> declaration .)
    DEC_OP          reduce using rule 248 (block_item -> declaration .)
    SIZEOF          reduce using rule 248 (block_item -> declaration .)
    ALIGNOF         reduce using rule 248 (block_item -> declaration .)
    LPAREN          reduce using rule 248 (block_item -> declaration .)
    AND_OP          reduce using rule 248 (block_item -> declaration .)
    TIMES           reduce using rule 248 (block_item -> declaration .)
    PLUS            reduce using rule 248 (block_item -> declaration .)
    MINUS           reduce using rule 248 (block_item -> declaration .)
    NOT_OP          reduce using rule 248 (block_item -> declaration .)
    LNOT            reduce using rule 248 (block_item -> declaration .)
    I_CONSTANT      reduce using rule 248 (block_item -> declaration .)
    F_CONSTANT      reduce using rule 248 (block_item -> declaration .)
    CCONST          reduce using rule 248 (block_item -> declaration .)
    STRINGLITERAL   reduce using rule 248 (block_item -> declaration .)
    FUNC_NAME       reduce using rule 248 (block_item -> declaration .)
    GENERIC         reduce using rule 248 (block_item -> declaration .)


state 173

    (240) statement -> jump_statement .

    RBRACE          reduce using rule 240 (statement -> jump_statement .)
    STATIC_ASSERT   reduce using rule 240 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 240 (statement -> jump_statement .)
    CASE            reduce using rule 240 (statement -> jump_statement .)
    DEFAULT         reduce using rule 240 (statement -> jump_statement .)
    LBRACE          reduce using rule 240 (statement -> jump_statement .)
    SEMI            reduce using rule 240 (statement -> jump_statement .)
    IF              reduce using rule 240 (statement -> jump_statement .)
    SWITCH          reduce using rule 240 (statement -> jump_statement .)
    WHILE           reduce using rule 240 (statement -> jump_statement .)
    DO              reduce using rule 240 (statement -> jump_statement .)
    FOR             reduce using rule 240 (statement -> jump_statement .)
    GOTO            reduce using rule 240 (statement -> jump_statement .)
    CONTINUE        reduce using rule 240 (statement -> jump_statement .)
    BREAK           reduce using rule 240 (statement -> jump_statement .)
    RETURN          reduce using rule 240 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 240 (statement -> jump_statement .)
    EXTERN          reduce using rule 240 (statement -> jump_statement .)
    STATIC          reduce using rule 240 (statement -> jump_statement .)
    THREAD_LOCAL    reduce using rule 240 (statement -> jump_statement .)
    AUTO            reduce using rule 240 (statement -> jump_statement .)
    REGISTER        reduce using rule 240 (statement -> jump_statement .)
    VOID            reduce using rule 240 (statement -> jump_statement .)
    CHAR            reduce using rule 240 (statement -> jump_statement .)
    SHORT           reduce using rule 240 (statement -> jump_statement .)
    INT             reduce using rule 240 (statement -> jump_statement .)
    LONG            reduce using rule 240 (statement -> jump_statement .)
    FLOAT           reduce using rule 240 (statement -> jump_statement .)
    DOUBLE          reduce using rule 240 (statement -> jump_statement .)
    SIGNED          reduce using rule 240 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 240 (statement -> jump_statement .)
    BOOL            reduce using rule 240 (statement -> jump_statement .)
    COMPLEX         reduce using rule 240 (statement -> jump_statement .)
    IMAGINARY       reduce using rule 240 (statement -> jump_statement .)
    TYPEID          reduce using rule 240 (statement -> jump_statement .)
    CONST           reduce using rule 240 (statement -> jump_statement .)
    RESTRICT        reduce using rule 240 (statement -> jump_statement .)
    VOLATILE        reduce using rule 240 (statement -> jump_statement .)
    INLINE          reduce using rule 240 (statement -> jump_statement .)
    NORETURN        reduce using rule 240 (statement -> jump_statement .)
    ALIGNAS         reduce using rule 240 (statement -> jump_statement .)
    ENUM            reduce using rule 240 (statement -> jump_statement .)
    STRUCT          reduce using rule 240 (statement -> jump_statement .)
    UNION           reduce using rule 240 (statement -> jump_statement .)
    INC_OP          reduce using rule 240 (statement -> jump_statement .)
    DEC_OP          reduce using rule 240 (statement -> jump_statement .)
    SIZEOF          reduce using rule 240 (statement -> jump_statement .)
    ALIGNOF         reduce using rule 240 (statement -> jump_statement .)
    LPAREN          reduce using rule 240 (statement -> jump_statement .)
    AND_OP          reduce using rule 240 (statement -> jump_statement .)
    TIMES           reduce using rule 240 (statement -> jump_statement .)
    PLUS            reduce using rule 240 (statement -> jump_statement .)
    MINUS           reduce using rule 240 (statement -> jump_statement .)
    NOT_OP          reduce using rule 240 (statement -> jump_statement .)
    LNOT            reduce using rule 240 (statement -> jump_statement .)
    I_CONSTANT      reduce using rule 240 (statement -> jump_statement .)
    F_CONSTANT      reduce using rule 240 (statement -> jump_statement .)
    CCONST          reduce using rule 240 (statement -> jump_statement .)
    STRINGLITERAL   reduce using rule 240 (statement -> jump_statement .)
    FUNC_NAME       reduce using rule 240 (statement -> jump_statement .)
    GENERIC         reduce using rule 240 (statement -> jump_statement .)
    ELSE            reduce using rule 240 (statement -> jump_statement .)


state 174

    (263) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 291


state 175

    (246) block_item_list -> block_item .

    RBRACE          reduce using rule 246 (block_item_list -> block_item .)
    STATIC_ASSERT   reduce using rule 246 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 246 (block_item_list -> block_item .)
    CASE            reduce using rule 246 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 246 (block_item_list -> block_item .)
    LBRACE          reduce using rule 246 (block_item_list -> block_item .)
    SEMI            reduce using rule 246 (block_item_list -> block_item .)
    IF              reduce using rule 246 (block_item_list -> block_item .)
    SWITCH          reduce using rule 246 (block_item_list -> block_item .)
    WHILE           reduce using rule 246 (block_item_list -> block_item .)
    DO              reduce using rule 246 (block_item_list -> block_item .)
    FOR             reduce using rule 246 (block_item_list -> block_item .)
    GOTO            reduce using rule 246 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 246 (block_item_list -> block_item .)
    BREAK           reduce using rule 246 (block_item_list -> block_item .)
    RETURN          reduce using rule 246 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 246 (block_item_list -> block_item .)
    EXTERN          reduce using rule 246 (block_item_list -> block_item .)
    STATIC          reduce using rule 246 (block_item_list -> block_item .)
    THREAD_LOCAL    reduce using rule 246 (block_item_list -> block_item .)
    AUTO            reduce using rule 246 (block_item_list -> block_item .)
    REGISTER        reduce using rule 246 (block_item_list -> block_item .)
    VOID            reduce using rule 246 (block_item_list -> block_item .)
    CHAR            reduce using rule 246 (block_item_list -> block_item .)
    SHORT           reduce using rule 246 (block_item_list -> block_item .)
    INT             reduce using rule 246 (block_item_list -> block_item .)
    LONG            reduce using rule 246 (block_item_list -> block_item .)
    FLOAT           reduce using rule 246 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 246 (block_item_list -> block_item .)
    SIGNED          reduce using rule 246 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 246 (block_item_list -> block_item .)
    BOOL            reduce using rule 246 (block_item_list -> block_item .)
    COMPLEX         reduce using rule 246 (block_item_list -> block_item .)
    IMAGINARY       reduce using rule 246 (block_item_list -> block_item .)
    TYPEID          reduce using rule 246 (block_item_list -> block_item .)
    CONST           reduce using rule 246 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 246 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 246 (block_item_list -> block_item .)
    INLINE          reduce using rule 246 (block_item_list -> block_item .)
    NORETURN        reduce using rule 246 (block_item_list -> block_item .)
    ALIGNAS         reduce using rule 246 (block_item_list -> block_item .)
    ENUM            reduce using rule 246 (block_item_list -> block_item .)
    STRUCT          reduce using rule 246 (block_item_list -> block_item .)
    UNION           reduce using rule 246 (block_item_list -> block_item .)
    INC_OP          reduce using rule 246 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 246 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 246 (block_item_list -> block_item .)
    ALIGNOF         reduce using rule 246 (block_item_list -> block_item .)
    LPAREN          reduce using rule 246 (block_item_list -> block_item .)
    AND_OP          reduce using rule 246 (block_item_list -> block_item .)
    TIMES           reduce using rule 246 (block_item_list -> block_item .)
    PLUS            reduce using rule 246 (block_item_list -> block_item .)
    MINUS           reduce using rule 246 (block_item_list -> block_item .)
    NOT_OP          reduce using rule 246 (block_item_list -> block_item .)
    LNOT            reduce using rule 246 (block_item_list -> block_item .)
    I_CONSTANT      reduce using rule 246 (block_item_list -> block_item .)
    F_CONSTANT      reduce using rule 246 (block_item_list -> block_item .)
    CCONST          reduce using rule 246 (block_item_list -> block_item .)
    STRINGLITERAL   reduce using rule 246 (block_item_list -> block_item .)
    FUNC_NAME       reduce using rule 246 (block_item_list -> block_item .)
    GENERIC         reduce using rule 246 (block_item_list -> block_item .)


state 176

    (256) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 292
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 177

    (244) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    STATIC_ASSERT   reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    THREAD_LOCAL    reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    BOOL            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    COMPLEX         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    IMAGINARY       reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    RESTRICT        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    INLINE          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    NORETURN        reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    ALIGNAS         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    INC_OP          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    DEC_OP          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    ALIGNOF         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    AND_OP          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    NOT_OP          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    I_CONSTANT      reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    F_CONSTANT      reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    STRINGLITERAL   reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    FUNC_NAME       reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    GENERIC         reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 244 (compound_statement -> LBRACE RBRACE .)


state 178

    (250) expression_statement -> SEMI .

    RBRACE          reduce using rule 250 (expression_statement -> SEMI .)
    STATIC_ASSERT   reduce using rule 250 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 250 (expression_statement -> SEMI .)
    CASE            reduce using rule 250 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 250 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 250 (expression_statement -> SEMI .)
    SEMI            reduce using rule 250 (expression_statement -> SEMI .)
    IF              reduce using rule 250 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 250 (expression_statement -> SEMI .)
    WHILE           reduce using rule 250 (expression_statement -> SEMI .)
    DO              reduce using rule 250 (expression_statement -> SEMI .)
    FOR             reduce using rule 250 (expression_statement -> SEMI .)
    GOTO            reduce using rule 250 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 250 (expression_statement -> SEMI .)
    BREAK           reduce using rule 250 (expression_statement -> SEMI .)
    RETURN          reduce using rule 250 (expression_statement -> SEMI .)
    TYPEDEF         reduce using rule 250 (expression_statement -> SEMI .)
    EXTERN          reduce using rule 250 (expression_statement -> SEMI .)
    STATIC          reduce using rule 250 (expression_statement -> SEMI .)
    THREAD_LOCAL    reduce using rule 250 (expression_statement -> SEMI .)
    AUTO            reduce using rule 250 (expression_statement -> SEMI .)
    REGISTER        reduce using rule 250 (expression_statement -> SEMI .)
    VOID            reduce using rule 250 (expression_statement -> SEMI .)
    CHAR            reduce using rule 250 (expression_statement -> SEMI .)
    SHORT           reduce using rule 250 (expression_statement -> SEMI .)
    INT             reduce using rule 250 (expression_statement -> SEMI .)
    LONG            reduce using rule 250 (expression_statement -> SEMI .)
    FLOAT           reduce using rule 250 (expression_statement -> SEMI .)
    DOUBLE          reduce using rule 250 (expression_statement -> SEMI .)
    SIGNED          reduce using rule 250 (expression_statement -> SEMI .)
    UNSIGNED        reduce using rule 250 (expression_statement -> SEMI .)
    BOOL            reduce using rule 250 (expression_statement -> SEMI .)
    COMPLEX         reduce using rule 250 (expression_statement -> SEMI .)
    IMAGINARY       reduce using rule 250 (expression_statement -> SEMI .)
    TYPEID          reduce using rule 250 (expression_statement -> SEMI .)
    CONST           reduce using rule 250 (expression_statement -> SEMI .)
    RESTRICT        reduce using rule 250 (expression_statement -> SEMI .)
    VOLATILE        reduce using rule 250 (expression_statement -> SEMI .)
    INLINE          reduce using rule 250 (expression_statement -> SEMI .)
    NORETURN        reduce using rule 250 (expression_statement -> SEMI .)
    ALIGNAS         reduce using rule 250 (expression_statement -> SEMI .)
    ENUM            reduce using rule 250 (expression_statement -> SEMI .)
    STRUCT          reduce using rule 250 (expression_statement -> SEMI .)
    UNION           reduce using rule 250 (expression_statement -> SEMI .)
    INC_OP          reduce using rule 250 (expression_statement -> SEMI .)
    DEC_OP          reduce using rule 250 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 250 (expression_statement -> SEMI .)
    ALIGNOF         reduce using rule 250 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 250 (expression_statement -> SEMI .)
    AND_OP          reduce using rule 250 (expression_statement -> SEMI .)
    TIMES           reduce using rule 250 (expression_statement -> SEMI .)
    PLUS            reduce using rule 250 (expression_statement -> SEMI .)
    MINUS           reduce using rule 250 (expression_statement -> SEMI .)
    NOT_OP          reduce using rule 250 (expression_statement -> SEMI .)
    LNOT            reduce using rule 250 (expression_statement -> SEMI .)
    I_CONSTANT      reduce using rule 250 (expression_statement -> SEMI .)
    F_CONSTANT      reduce using rule 250 (expression_statement -> SEMI .)
    CCONST          reduce using rule 250 (expression_statement -> SEMI .)
    STRINGLITERAL   reduce using rule 250 (expression_statement -> SEMI .)
    FUNC_NAME       reduce using rule 250 (expression_statement -> SEMI .)
    GENERIC         reduce using rule 250 (expression_statement -> SEMI .)
    ELSE            reduce using rule 250 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 250 (expression_statement -> SEMI .)


state 179

    (238) statement -> selection_statement .

    RBRACE          reduce using rule 238 (statement -> selection_statement .)
    STATIC_ASSERT   reduce using rule 238 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 238 (statement -> selection_statement .)
    CASE            reduce using rule 238 (statement -> selection_statement .)
    DEFAULT         reduce using rule 238 (statement -> selection_statement .)
    LBRACE          reduce using rule 238 (statement -> selection_statement .)
    SEMI            reduce using rule 238 (statement -> selection_statement .)
    IF              reduce using rule 238 (statement -> selection_statement .)
    SWITCH          reduce using rule 238 (statement -> selection_statement .)
    WHILE           reduce using rule 238 (statement -> selection_statement .)
    DO              reduce using rule 238 (statement -> selection_statement .)
    FOR             reduce using rule 238 (statement -> selection_statement .)
    GOTO            reduce using rule 238 (statement -> selection_statement .)
    CONTINUE        reduce using rule 238 (statement -> selection_statement .)
    BREAK           reduce using rule 238 (statement -> selection_statement .)
    RETURN          reduce using rule 238 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 238 (statement -> selection_statement .)
    EXTERN          reduce using rule 238 (statement -> selection_statement .)
    STATIC          reduce using rule 238 (statement -> selection_statement .)
    THREAD_LOCAL    reduce using rule 238 (statement -> selection_statement .)
    AUTO            reduce using rule 238 (statement -> selection_statement .)
    REGISTER        reduce using rule 238 (statement -> selection_statement .)
    VOID            reduce using rule 238 (statement -> selection_statement .)
    CHAR            reduce using rule 238 (statement -> selection_statement .)
    SHORT           reduce using rule 238 (statement -> selection_statement .)
    INT             reduce using rule 238 (statement -> selection_statement .)
    LONG            reduce using rule 238 (statement -> selection_statement .)
    FLOAT           reduce using rule 238 (statement -> selection_statement .)
    DOUBLE          reduce using rule 238 (statement -> selection_statement .)
    SIGNED          reduce using rule 238 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 238 (statement -> selection_statement .)
    BOOL            reduce using rule 238 (statement -> selection_statement .)
    COMPLEX         reduce using rule 238 (statement -> selection_statement .)
    IMAGINARY       reduce using rule 238 (statement -> selection_statement .)
    TYPEID          reduce using rule 238 (statement -> selection_statement .)
    CONST           reduce using rule 238 (statement -> selection_statement .)
    RESTRICT        reduce using rule 238 (statement -> selection_statement .)
    VOLATILE        reduce using rule 238 (statement -> selection_statement .)
    INLINE          reduce using rule 238 (statement -> selection_statement .)
    NORETURN        reduce using rule 238 (statement -> selection_statement .)
    ALIGNAS         reduce using rule 238 (statement -> selection_statement .)
    ENUM            reduce using rule 238 (statement -> selection_statement .)
    STRUCT          reduce using rule 238 (statement -> selection_statement .)
    UNION           reduce using rule 238 (statement -> selection_statement .)
    INC_OP          reduce using rule 238 (statement -> selection_statement .)
    DEC_OP          reduce using rule 238 (statement -> selection_statement .)
    SIZEOF          reduce using rule 238 (statement -> selection_statement .)
    ALIGNOF         reduce using rule 238 (statement -> selection_statement .)
    LPAREN          reduce using rule 238 (statement -> selection_statement .)
    AND_OP          reduce using rule 238 (statement -> selection_statement .)
    TIMES           reduce using rule 238 (statement -> selection_statement .)
    PLUS            reduce using rule 238 (statement -> selection_statement .)
    MINUS           reduce using rule 238 (statement -> selection_statement .)
    NOT_OP          reduce using rule 238 (statement -> selection_statement .)
    LNOT            reduce using rule 238 (statement -> selection_statement .)
    I_CONSTANT      reduce using rule 238 (statement -> selection_statement .)
    F_CONSTANT      reduce using rule 238 (statement -> selection_statement .)
    CCONST          reduce using rule 238 (statement -> selection_statement .)
    STRINGLITERAL   reduce using rule 238 (statement -> selection_statement .)
    FUNC_NAME       reduce using rule 238 (statement -> selection_statement .)
    GENERIC         reduce using rule 238 (statement -> selection_statement .)
    ELSE            reduce using rule 238 (statement -> selection_statement .)


state 180

    (89) expression -> assignment_expression .

    RPAREN          reduce using rule 89 (expression -> assignment_expression .)
    COMMA           reduce using rule 89 (expression -> assignment_expression .)
    SEMI            reduce using rule 89 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 89 (expression -> assignment_expression .)
    COLON           reduce using rule 89 (expression -> assignment_expression .)


state 181

    (252) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 293


state 182

    (268) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    STATIC_ASSERT   reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    THREAD_LOCAL    reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    COMPLEX         reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IMAGINARY       reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    NORETURN        reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ALIGNAS         reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 268 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 183

    (271) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    STATIC_ASSERT   reduce using rule 271 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 271 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    THREAD_LOCAL    reduce using rule 271 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 271 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 271 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 271 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 271 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 271 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    COMPLEX         reduce using rule 271 (declaration_list -> declaration_list declaration .)
    IMAGINARY       reduce using rule 271 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 271 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 271 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 271 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    NORETURN        reduce using rule 271 (declaration_list -> declaration_list declaration .)
    ALIGNAS         reduce using rule 271 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 271 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 271 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 271 (declaration_list -> declaration_list declaration .)


state 184

    (14) generic_selection -> GENERIC LPAREN . assignment_expression COMMA generic_assoc_list RPAREN
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 294
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 185

    (69) inclusive_or_expression -> inclusive_or_expression OR_OP . exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 295
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    primary_expression             shift and go to state 108
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 186

    (37) unary_expression -> ALIGNOF LPAREN . type_name RPAREN
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_name                      shift and go to state 296
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    type_specifier                 shift and go to state 94

state 187

    (32) unary_expression -> INC_OP unary_expression .

    TIMES           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    MOD             reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LT_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    GT_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    XOR             reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LAND            reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    CONDOP          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LOR             reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    RPAREN          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    RBRACKET        reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    SEMI            reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    RBRACE          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    EQUALS          reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 32 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 32 (unary_expression -> INC_OP unary_expression .)


state 188

    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (5) primary_expression -> LPAREN . expression RPAREN
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 94
    inclusive_or_expression        shift and go to state 83
    type_name                      shift and go to state 297
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 221

state 189

    (33) unary_expression -> DEC_OP unary_expression .

    TIMES           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    MOD             reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LT_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    GT_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    XOR             reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LAND            reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    CONDOP          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LOR             reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    RPAREN          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    RBRACKET        reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    SEMI            reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    RBRACE          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    EQUALS          reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 33 (unary_expression -> DEC_OP unary_expression .)


state 190

    (35) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LT_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    GT_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 35 (unary_expression -> SIZEOF unary_expression .)


state 191

    (36) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (25) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (5) primary_expression -> LPAREN . expression RPAREN
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 94
    inclusive_or_expression        shift and go to state 83
    type_name                      shift and go to state 298
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 120
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 221

state 192

    (140) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    TIMES           reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SEMI            reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 140 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 193

    (49) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 299
    unary_operator                 shift and go to state 115

state 194

    (48) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 300
    unary_operator                 shift and go to state 115

state 195

    (47) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 301
    unary_operator                 shift and go to state 115

state 196

    (71) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 302
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    primary_expression             shift and go to state 108
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 197

    (54) shift_expression -> shift_expression LEFT_OP . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    additive_expression            shift and go to state 303
    primary_expression             shift and go to state 108

state 198

    (55) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    additive_expression            shift and go to state 304
    primary_expression             shift and go to state 108

state 199

    (142) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    TIMES           reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SEMI            reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 142 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 200

    (67) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    and_expression                 shift and go to state 305
    multiplicative_expression      shift and go to state 95
    string                         shift and go to state 112
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    equality_expression            shift and go to state 109
    primary_expression             shift and go to state 108
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 102
    relational_expression          shift and go to state 104

state 201

    (51) additive_expression -> additive_expression PLUS . multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 306
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    primary_expression             shift and go to state 108

state 202

    (52) additive_expression -> additive_expression MINUS . multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 307
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    primary_expression             shift and go to state 108

state 203

    (163) alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STATIC          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    AUTO            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOID            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CHAR            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SHORT           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INT             reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LONG            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    BOOL            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CONST           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INLINE          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ENUM            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNION           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SEMI            reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TIMES           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMMA           reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 163 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)


state 204

    (59) relational_expression -> relational_expression LE_OP . shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 308
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 205

    (57) relational_expression -> relational_expression LT_OP . shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 309
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 206

    (60) relational_expression -> relational_expression GE_OP . shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 310
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 207

    (58) relational_expression -> relational_expression GT_OP . shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 311
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 208

    (164) alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .

    TYPEDEF         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    THREAD_LOCAL    reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INT             reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    BOOL            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMPLEX         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IMAGINARY       reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TYPEID          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    NORETURN        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ALIGNAS         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SEMI            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IDENTIFIER      reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LBRACKET        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)


state 209

    (63) equality_expression -> equality_expression NE_OP . relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    relational_expression          shift and go to state 312
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 210

    (62) equality_expression -> equality_expression EQ_OP . relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    relational_expression          shift and go to state 313
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108

state 211

    (65) and_expression -> and_expression AND_OP . equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    equality_expression            shift and go to state 314
    primary_expression             shift and go to state 108
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 102
    relational_expression          shift and go to state 104

state 212

    (24) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 315


state 213

    (28) postfix_expression -> postfix_expression DEC_OP .

    LBRACKET        reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LPAREN          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    PERIOD          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    TIMES           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    MOD             reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LT_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    GT_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    XOR             reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LAND            reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    CONDOP          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LOR             reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    RPAREN          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACKET        reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    SEMI            reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACE          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    EQUALS          reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 28 (postfix_expression -> postfix_expression DEC_OP .)


state 214

    (27) postfix_expression -> postfix_expression INC_OP .

    LBRACKET        reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LPAREN          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    PERIOD          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    TIMES           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    MOD             reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LT_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    GT_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    XOR             reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LAND            reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    CONDOP          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LOR             reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    RPAREN          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    RBRACKET        reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    SEMI            reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    RBRACE          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    EQUALS          reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 27 (postfix_expression -> postfix_expression INC_OP .)


state 215

    (23) postfix_expression -> postfix_expression PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 316


state 216

    (20) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 317

state 217

    (21) postfix_expression -> postfix_expression LPAREN . RPAREN
    (22) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (29) argument_expression_list -> . assignment_expression
    (30) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 318
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 319
    multiplicative_expression      shift and go to state 95
    argument_expression_list       shift and go to state 320
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 218

    (75) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 321

state 219

    (73) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 322
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 220

    (34) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LT_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    GT_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 34 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 34 (unary_expression -> unary_operator cast_expression .)


state 221

    (5) primary_expression -> LPAREN expression . RPAREN
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 323
    COMMA           shift and go to state 284


state 222

    (45) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 324


state 223

    (202) direct_abstract_declarator -> LBRACKET . RBRACKET
    (203) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (204) direct_abstract_declarator -> LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> LBRACKET . STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> LBRACKET . type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> LBRACKET . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 329
    TIMES           shift and go to state 328
    STATIC          shift and go to state 325
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 326
    multiplicative_expression      shift and go to state 95
    type_qualifier_list            shift and go to state 327
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 224

    (201) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (218) direct_abstract_declarator -> LPAREN . RPAREN
    (219) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (198) abstract_declarator -> . pointer direct_abstract_declarator
    (199) abstract_declarator -> . pointer
    (200) abstract_declarator -> . direct_abstract_declarator
    (187) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (188) parameter_type_list -> . parameter_list
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers declarator
    (192) parameter_declaration -> . declaration_specifiers abstract_declarator
    (193) parameter_declaration -> . declaration_specifiers
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RPAREN          shift and go to state 330
    TIMES           shift and go to state 50
    LPAREN          shift and go to state 224
    LBRACKET        shift and go to state 223
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    pointer                        shift and go to state 227
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    parameter_type_list            shift and go to state 331
    parameter_declaration          shift and go to state 146
    declaration_specifiers         shift and go to state 147
    parameter_list                 shift and go to state 149
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    abstract_declarator            shift and go to state 332
    direct_abstract_declarator     shift and go to state 225

state 225

    (200) abstract_declarator -> direct_abstract_declarator .
    (210) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (220) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (221) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 200 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 200 (abstract_declarator -> direct_abstract_declarator .)
    COLON           reduce using rule 200 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 333
    LPAREN          shift and go to state 334


state 226

    (196) type_name -> specifier_qualifier_list abstract_declarator .

    COLON           reduce using rule 196 (type_name -> specifier_qualifier_list abstract_declarator .)
    RPAREN          reduce using rule 196 (type_name -> specifier_qualifier_list abstract_declarator .)


state 227

    (198) abstract_declarator -> pointer . direct_abstract_declarator
    (199) abstract_declarator -> pointer .
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 199 (abstract_declarator -> pointer .)
    COLON           reduce using rule 199 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 224
    LBRACKET        shift and go to state 223

    direct_abstract_declarator     shift and go to state 335

state 228

    (156) enumerator -> enumeration_constant EQUALS . constant_expression
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 121
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 336

state 229

    (149) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    VOID            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    BOOL            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMPLEX         reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IMAGINARY       reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    THREAD_LOCAL    reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    NORETURN        reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ALIGNAS         reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 149 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 230

    (150) enum_specifier -> ENUM LBRACE enumerator_list COMMA . RBRACE
    (155) enumerator_list -> enumerator_list COMMA . enumerator
    (156) enumerator -> . enumeration_constant EQUALS constant_expression
    (157) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 338
    IDENTIFIER      shift and go to state 125

    enumeration_constant           shift and go to state 123
    enumerator                     shift and go to state 337

state 231

    (151) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . RBRACE
    (152) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list . COMMA RBRACE
    (155) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 339
    COMMA           shift and go to state 340


state 232

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA . STRINGLITERAL RPAREN SEMI

    STRINGLITERAL   shift and go to state 341


state 233

    (131) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list . RBRACE
    (136) struct_declaration_list -> struct_declaration_list . struct_declaration
    (137) struct_declaration -> . specifier_qualifier_list SEMI
    (138) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (139) struct_declaration -> . static_assert_declaration
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RBRACE          shift and go to state 342
    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 234
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 98
    specifier_qualifier_list       shift and go to state 132
    type_specifier                 shift and go to state 94

state 234

    (136) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STATIC_ASSERT   reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    COMPLEX         reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    IMAGINARY       reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 136 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 235

    (130) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    BOOL            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMPLEX         reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IMAGINARY       reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    THREAD_LOCAL    reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    NORETURN        reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ALIGNAS         reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 130 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 236

    (144) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 144 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 144 (struct_declarator_list -> struct_declarator .)


state 237

    (137) struct_declaration -> specifier_qualifier_list SEMI .

    RBRACE          reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    STATIC_ASSERT   reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    VOID            reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    CHAR            reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    SHORT           reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    INT             reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    LONG            reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    FLOAT           reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    DOUBLE          reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    SIGNED          reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    UNSIGNED        reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    BOOL            reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    COMPLEX         reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    IMAGINARY       reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    TYPEID          reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    CONST           reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    RESTRICT        reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    VOLATILE        reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    ENUM            reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    STRUCT          reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)
    UNION           reduce using rule 137 (struct_declaration -> specifier_qualifier_list SEMI .)


state 238

    (147) struct_declarator -> declarator . COLON constant_expression
    (148) struct_declarator -> declarator .

    COLON           shift and go to state 343
    SEMI            reduce using rule 148 (struct_declarator -> declarator .)
    COMMA           reduce using rule 148 (struct_declarator -> declarator .)


state 239

    (146) struct_declarator -> COLON . constant_expression
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 121
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 344

state 240

    (138) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (145) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 346
    COMMA           shift and go to state 345


state 241

    (83) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    ALIGNOF         reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    AND_OP          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    TIMES           reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    NOT_OP          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    LNOT            reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    I_CONSTANT      reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    F_CONSTANT      reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    CCONST          reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    STRINGLITERAL   reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    FUNC_NAME       reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)
    GENERIC         reduce using rule 83 (assignment_operator -> SUB_ASSIGN .)


state 242

    (81) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    ALIGNOF         reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    AND_OP          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    TIMES           reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    NOT_OP          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    LNOT            reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    I_CONSTANT      reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    F_CONSTANT      reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    CCONST          reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    STRINGLITERAL   reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    FUNC_NAME       reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)
    GENERIC         reduce using rule 81 (assignment_operator -> MOD_ASSIGN .)


state 243

    (87) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    ALIGNOF         reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    AND_OP          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    TIMES           reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    NOT_OP          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    LNOT            reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    I_CONSTANT      reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    F_CONSTANT      reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    CCONST          reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    STRINGLITERAL   reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    FUNC_NAME       reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)
    GENERIC         reduce using rule 87 (assignment_operator -> XOR_ASSIGN .)


state 244

    (88) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    ALIGNOF         reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    AND_OP          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    TIMES           reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    NOT_OP          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    LNOT            reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    I_CONSTANT      reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    F_CONSTANT      reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    CCONST          reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    STRINGLITERAL   reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    FUNC_NAME       reduce using rule 88 (assignment_operator -> OR_ASSIGN .)
    GENERIC         reduce using rule 88 (assignment_operator -> OR_ASSIGN .)


state 245

    (78) assignment_operator -> EQUALS .

    INC_OP          reduce using rule 78 (assignment_operator -> EQUALS .)
    DEC_OP          reduce using rule 78 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 78 (assignment_operator -> EQUALS .)
    ALIGNOF         reduce using rule 78 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 78 (assignment_operator -> EQUALS .)
    AND_OP          reduce using rule 78 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 78 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 78 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 78 (assignment_operator -> EQUALS .)
    NOT_OP          reduce using rule 78 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 78 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 78 (assignment_operator -> EQUALS .)
    I_CONSTANT      reduce using rule 78 (assignment_operator -> EQUALS .)
    F_CONSTANT      reduce using rule 78 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 78 (assignment_operator -> EQUALS .)
    STRINGLITERAL   reduce using rule 78 (assignment_operator -> EQUALS .)
    FUNC_NAME       reduce using rule 78 (assignment_operator -> EQUALS .)
    GENERIC         reduce using rule 78 (assignment_operator -> EQUALS .)


state 246

    (86) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    ALIGNOF         reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    AND_OP          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    TIMES           reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    NOT_OP          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    LNOT            reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    I_CONSTANT      reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    F_CONSTANT      reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    CCONST          reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    STRINGLITERAL   reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    FUNC_NAME       reduce using rule 86 (assignment_operator -> AND_ASSIGN .)
    GENERIC         reduce using rule 86 (assignment_operator -> AND_ASSIGN .)


state 247

    (79) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    ALIGNOF         reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    AND_OP          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    TIMES           reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    NOT_OP          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    LNOT            reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    I_CONSTANT      reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    F_CONSTANT      reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    CCONST          reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    STRINGLITERAL   reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    FUNC_NAME       reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)
    GENERIC         reduce using rule 79 (assignment_operator -> MUL_ASSIGN .)


state 248

    (80) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    ALIGNOF         reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    AND_OP          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    TIMES           reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    NOT_OP          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    LNOT            reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    I_CONSTANT      reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    F_CONSTANT      reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    CCONST          reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    STRINGLITERAL   reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    FUNC_NAME       reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)
    GENERIC         reduce using rule 80 (assignment_operator -> DIV_ASSIGN .)


state 249

    (84) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    ALIGNOF         reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    AND_OP          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    TIMES           reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    NOT_OP          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    LNOT            reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    I_CONSTANT      reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    F_CONSTANT      reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    CCONST          reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    STRINGLITERAL   reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    FUNC_NAME       reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)
    GENERIC         reduce using rule 84 (assignment_operator -> LEFT_ASSIGN .)


state 250

    (82) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    ALIGNOF         reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    AND_OP          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    TIMES           reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    NOT_OP          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    LNOT            reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    I_CONSTANT      reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    F_CONSTANT      reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    CCONST          reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    STRINGLITERAL   reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    FUNC_NAME       reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)
    GENERIC         reduce using rule 82 (assignment_operator -> ADD_ASSIGN .)


state 251

    (85) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    ALIGNOF         reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    AND_OP          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    TIMES           reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    NOT_OP          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    LNOT            reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    I_CONSTANT      reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    F_CONSTANT      reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    CCONST          reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    STRINGLITERAL   reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    FUNC_NAME       reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)
    GENERIC         reduce using rule 85 (assignment_operator -> RIGHT_ASSIGN .)


state 252

    (77) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 347
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 253

    (172) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 348


state 254

    (171) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 349
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 95
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 255

    (177) direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SEMI            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    EQUALS          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LBRACE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    EXTERN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STATIC          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    AUTO            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    REGISTER        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    VOID            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    CHAR            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SHORT           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    INT             reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    LONG            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    FLOAT           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    SIGNED          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    BOOL            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    TYPEID          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    CONST           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    INLINE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    NORETURN        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    ENUM            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    STRUCT          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)
    UNION           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET assignment_expression RBRACKET .)


state 256

    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 350
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 141

state 257

    (175) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 351


state 258

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES . RBRACKET
    (39) unary_operator -> TIMES .

    RBRACKET        shift and go to state 352
    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 39 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 39 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 39 (unary_operator -> TIMES .)
    TIMES           reduce using rule 39 (unary_operator -> TIMES .)
    PLUS            reduce using rule 39 (unary_operator -> TIMES .)
    MINUS           reduce using rule 39 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 39 (unary_operator -> TIMES .)
    LNOT            reduce using rule 39 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    CCONST          reduce using rule 39 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 39 (unary_operator -> TIMES .)


state 259

    (176) direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SEMI            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EQUALS          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LBRACE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC_ASSERT   reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    TYPEDEF         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EXTERN          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    THREAD_LOCAL    reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    AUTO            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    REGISTER        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOID            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CHAR            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SHORT           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INT             reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LONG            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    FLOAT           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    DOUBLE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SIGNED          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNSIGNED        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    BOOL            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMPLEX         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    IMAGINARY       reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    TYPEID          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CONST           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RESTRICT        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOLATILE        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INLINE          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    NORETURN        reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ALIGNAS         reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ENUM            reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STRUCT          reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNION           reduce using rule 176 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)


state 260

    (170) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEDEF         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    AUTO            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    REGISTER        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SHORT           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LONG            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    DOUBLE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SIGNED          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNSIGNED        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    BOOL            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMPLEX         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    IMAGINARY       reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEID          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CONST           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RESTRICT        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOLATILE        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INLINE          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    NORETURN        reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ALIGNAS         reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ENUM            reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STRUCT          reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNION           reduce using rule 170 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 261

    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE
    (45) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 353


state 262

    (178) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC_ASSERT   reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    THREAD_LOCAL    reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    BOOL            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMPLEX         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    IMAGINARY       reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    NORETURN        reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ALIGNAS         reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 178 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 263

    (168) direct_declarator -> LPAREN . declarator RPAREN
    (201) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (218) direct_abstract_declarator -> LPAREN . RPAREN
    (219) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (198) abstract_declarator -> . pointer direct_abstract_declarator
    (199) abstract_declarator -> . pointer
    (200) abstract_declarator -> . direct_abstract_declarator
    (187) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (188) parameter_type_list -> . parameter_list
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers declarator
    (192) parameter_declaration -> . declaration_specifiers abstract_declarator
    (193) parameter_declaration -> . declaration_specifiers
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RPAREN          shift and go to state 330
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 263
    LBRACKET        shift and go to state 223
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    pointer                        shift and go to state 266
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    parameter_type_list            shift and go to state 331
    parameter_declaration          shift and go to state 146
    direct_declarator              shift and go to state 49
    declaration_specifiers         shift and go to state 147
    parameter_list                 shift and go to state 149
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    abstract_declarator            shift and go to state 332
    declarator                     shift and go to state 73
    direct_abstract_declarator     shift and go to state 225

state 264

    (192) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 192 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 192 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 265

    (191) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 191 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 191 (parameter_declaration -> declaration_specifiers declarator .)


state 266

    (165) declarator -> pointer . direct_declarator
    (198) abstract_declarator -> pointer . direct_abstract_declarator
    (199) abstract_declarator -> pointer .
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (201) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (202) direct_abstract_declarator -> . LBRACKET RBRACKET
    (203) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (204) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (211) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . LPAREN RPAREN
    (219) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (220) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (221) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 199 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 199 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 263
    LBRACKET        shift and go to state 223

    direct_declarator              shift and go to state 67
    direct_abstract_declarator     shift and go to state 335

state 267

    (180) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC_ASSERT   reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    THREAD_LOCAL    reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    BOOL            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMPLEX         reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    IMAGINARY       reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RESTRICT        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INLINE          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    NORETURN        reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ALIGNAS         reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 180 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 268

    (195) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 354


state 269

    (187) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (190) parameter_list -> parameter_list COMMA . parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers declarator
    (192) parameter_declaration -> . declaration_specifiers abstract_declarator
    (193) parameter_declaration -> . declaration_specifiers
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 355
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    parameter_declaration          shift and go to state 356
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 147
    function_specifier             shift and go to state 11

state 270

    (226) initializer_list -> initializer .

    RBRACE          reduce using rule 226 (initializer_list -> initializer .)
    COMMA           reduce using rule 226 (initializer_list -> initializer .)


state 271

    (232) designator -> LBRACKET . constant_expression RBRACKET
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 121
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 357

state 272

    (222) initializer -> LBRACE initializer_list . RBRACE
    (223) initializer -> LBRACE initializer_list . COMMA RBRACE
    (227) initializer_list -> initializer_list . COMMA designation initializer
    (228) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 358
    COMMA           shift and go to state 359


state 273

    (230) designator_list -> designator .

    EQUALS          reduce using rule 230 (designator_list -> designator .)
    LBRACKET        reduce using rule 230 (designator_list -> designator .)
    PERIOD          reduce using rule 230 (designator_list -> designator .)


state 274

    (233) designator -> PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 360


state 275

    (225) initializer_list -> designation . initializer
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 155
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 361
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 276

    (229) designation -> designator_list . EQUALS
    (231) designator_list -> designator_list . designator
    (232) designator -> . LBRACKET constant_expression RBRACKET
    (233) designator -> . PERIOD IDENTIFIER

    EQUALS          shift and go to state 363
    LBRACKET        shift and go to state 271
    PERIOD          shift and go to state 274

    designator                     shift and go to state 362

state 277

    (261) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 364


state 278

    (264) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    STATIC_ASSERT   reduce using rule 264 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 264 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 264 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 264 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 264 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    THREAD_LOCAL    reduce using rule 264 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 264 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    BOOL            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    COMPLEX         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    IMAGINARY       reduce using rule 264 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    NORETURN        reduce using rule 264 (jump_statement -> RETURN SEMI .)
    ALIGNAS         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    INC_OP          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    DEC_OP          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    ALIGNOF         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    AND_OP          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 264 (jump_statement -> RETURN SEMI .)
    NOT_OP          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 264 (jump_statement -> RETURN SEMI .)
    I_CONSTANT      reduce using rule 264 (jump_statement -> RETURN SEMI .)
    F_CONSTANT      reduce using rule 264 (jump_statement -> RETURN SEMI .)
    CCONST          reduce using rule 264 (jump_statement -> RETURN SEMI .)
    STRINGLITERAL   reduce using rule 264 (jump_statement -> RETURN SEMI .)
    FUNC_NAME       reduce using rule 264 (jump_statement -> RETURN SEMI .)
    GENERIC         reduce using rule 264 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 264 (jump_statement -> RETURN SEMI .)


state 279

    (265) jump_statement -> RETURN expression . SEMI
    (90) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 365
    COMMA           shift and go to state 284


state 280

    (257) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> FOR LPAREN . declaration expression_statement RPAREN statement
    (260) iteration_statement -> FOR LPAREN . declaration expression_statement expression RPAREN statement
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (92) declaration -> . declaration_specifiers SEMI
    (93) declaration -> . declaration_specifiers init_declarator_list SEMI
    (94) declaration -> . static_assert_declaration
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (234) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 178
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 366
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    type_specifier                 shift and go to state 13
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    unary_operator                 shift and go to state 115
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    declaration_specifiers         shift and go to state 74
    declaration                    shift and go to state 367
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 281

    (247) block_item_list -> block_item_list block_item .

    RBRACE          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    STATIC_ASSERT   reduce using rule 247 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 247 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 247 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 247 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 247 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 247 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 247 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    THREAD_LOCAL    reduce using rule 247 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 247 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    COMPLEX         reduce using rule 247 (block_item_list -> block_item_list block_item .)
    IMAGINARY       reduce using rule 247 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    NORETURN        reduce using rule 247 (block_item_list -> block_item_list block_item .)
    ALIGNAS         reduce using rule 247 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    ALIGNOF         reduce using rule 247 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    AND_OP          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 247 (block_item_list -> block_item_list block_item .)
    NOT_OP          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 247 (block_item_list -> block_item_list block_item .)
    I_CONSTANT      reduce using rule 247 (block_item_list -> block_item_list block_item .)
    F_CONSTANT      reduce using rule 247 (block_item_list -> block_item_list block_item .)
    CCONST          reduce using rule 247 (block_item_list -> block_item_list block_item .)
    STRINGLITERAL   reduce using rule 247 (block_item_list -> block_item_list block_item .)
    FUNC_NAME       reduce using rule 247 (block_item_list -> block_item_list block_item .)
    GENERIC         reduce using rule 247 (block_item_list -> block_item_list block_item .)


state 282

    (245) compound_statement -> LBRACE block_item_list RBRACE .

    RBRACE          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    STATIC_ASSERT   reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    IDENTIFIER      reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    CASE            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    DEFAULT         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    LBRACE          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    SEMI            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    IF              reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    SWITCH          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    WHILE           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    DO              reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    FOR             reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    GOTO            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    CONTINUE        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    BREAK           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    RETURN          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    TYPEDEF         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    EXTERN          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    STATIC          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    THREAD_LOCAL    reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    AUTO            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    REGISTER        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    VOID            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    SHORT           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT             reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    LONG            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    DOUBLE          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    SIGNED          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    UNSIGNED        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    BOOL            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    COMPLEX         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    IMAGINARY       reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    TYPEID          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    CONST           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    RESTRICT        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    VOLATILE        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    INLINE          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    NORETURN        reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    ALIGNAS         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    ENUM            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRUCT          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    UNION           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    INC_OP          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    DEC_OP          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    SIZEOF          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    ALIGNOF         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    LPAREN          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    AND_OP          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    TIMES           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUS            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUS           reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    NOT_OP          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    LNOT            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    I_CONSTANT      reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    F_CONSTANT      reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    CCONST          reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRINGLITERAL   reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    FUNC_NAME       reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    GENERIC         reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    ELSE            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)
    $end            reduce using rule 245 (compound_statement -> LBRACE block_item_list RBRACE .)


state 283

    (262) jump_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    STATIC_ASSERT   reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    THREAD_LOCAL    reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    BOOL            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    COMPLEX         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    IMAGINARY       reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    NORETURN        reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    ALIGNAS         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    INC_OP          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    DEC_OP          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    ALIGNOF         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    AND_OP          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    NOT_OP          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    I_CONSTANT      reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    F_CONSTANT      reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    CCONST          reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    STRINGLITERAL   reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    FUNC_NAME       reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    GENERIC         reduce using rule 262 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 262 (jump_statement -> CONTINUE SEMI .)


state 284

    (90) expression -> expression COMMA . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 368
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 285

    (251) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 251 (expression_statement -> expression SEMI .)
    STATIC_ASSERT   reduce using rule 251 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 251 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 251 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 251 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 251 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 251 (expression_statement -> expression SEMI .)
    IF              reduce using rule 251 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 251 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 251 (expression_statement -> expression SEMI .)
    DO              reduce using rule 251 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 251 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 251 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 251 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 251 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 251 (expression_statement -> expression SEMI .)
    TYPEDEF         reduce using rule 251 (expression_statement -> expression SEMI .)
    EXTERN          reduce using rule 251 (expression_statement -> expression SEMI .)
    STATIC          reduce using rule 251 (expression_statement -> expression SEMI .)
    THREAD_LOCAL    reduce using rule 251 (expression_statement -> expression SEMI .)
    AUTO            reduce using rule 251 (expression_statement -> expression SEMI .)
    REGISTER        reduce using rule 251 (expression_statement -> expression SEMI .)
    VOID            reduce using rule 251 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 251 (expression_statement -> expression SEMI .)
    SHORT           reduce using rule 251 (expression_statement -> expression SEMI .)
    INT             reduce using rule 251 (expression_statement -> expression SEMI .)
    LONG            reduce using rule 251 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 251 (expression_statement -> expression SEMI .)
    DOUBLE          reduce using rule 251 (expression_statement -> expression SEMI .)
    SIGNED          reduce using rule 251 (expression_statement -> expression SEMI .)
    UNSIGNED        reduce using rule 251 (expression_statement -> expression SEMI .)
    BOOL            reduce using rule 251 (expression_statement -> expression SEMI .)
    COMPLEX         reduce using rule 251 (expression_statement -> expression SEMI .)
    IMAGINARY       reduce using rule 251 (expression_statement -> expression SEMI .)
    TYPEID          reduce using rule 251 (expression_statement -> expression SEMI .)
    CONST           reduce using rule 251 (expression_statement -> expression SEMI .)
    RESTRICT        reduce using rule 251 (expression_statement -> expression SEMI .)
    VOLATILE        reduce using rule 251 (expression_statement -> expression SEMI .)
    INLINE          reduce using rule 251 (expression_statement -> expression SEMI .)
    NORETURN        reduce using rule 251 (expression_statement -> expression SEMI .)
    ALIGNAS         reduce using rule 251 (expression_statement -> expression SEMI .)
    ENUM            reduce using rule 251 (expression_statement -> expression SEMI .)
    STRUCT          reduce using rule 251 (expression_statement -> expression SEMI .)
    UNION           reduce using rule 251 (expression_statement -> expression SEMI .)
    INC_OP          reduce using rule 251 (expression_statement -> expression SEMI .)
    DEC_OP          reduce using rule 251 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 251 (expression_statement -> expression SEMI .)
    ALIGNOF         reduce using rule 251 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 251 (expression_statement -> expression SEMI .)
    AND_OP          reduce using rule 251 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 251 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 251 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 251 (expression_statement -> expression SEMI .)
    NOT_OP          reduce using rule 251 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 251 (expression_statement -> expression SEMI .)
    I_CONSTANT      reduce using rule 251 (expression_statement -> expression SEMI .)
    F_CONSTANT      reduce using rule 251 (expression_statement -> expression SEMI .)
    CCONST          reduce using rule 251 (expression_statement -> expression SEMI .)
    STRINGLITERAL   reduce using rule 251 (expression_statement -> expression SEMI .)
    FUNC_NAME       reduce using rule 251 (expression_statement -> expression SEMI .)
    GENERIC         reduce using rule 251 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 251 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 251 (expression_statement -> expression SEMI .)


state 286

    (243) labeled_statement -> DEFAULT COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 369
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 287

    (255) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 370

state 288

    (242) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 371


state 289

    (254) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 372

state 290

    (241) labeled_statement -> IDENTIFIER COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 373
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 291

    (263) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    STATIC_ASSERT   reduce using rule 263 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 263 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 263 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 263 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 263 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    THREAD_LOCAL    reduce using rule 263 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 263 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    BOOL            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    COMPLEX         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    IMAGINARY       reduce using rule 263 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    NORETURN        reduce using rule 263 (jump_statement -> BREAK SEMI .)
    ALIGNAS         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    INC_OP          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    DEC_OP          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    ALIGNOF         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    AND_OP          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 263 (jump_statement -> BREAK SEMI .)
    NOT_OP          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 263 (jump_statement -> BREAK SEMI .)
    I_CONSTANT      reduce using rule 263 (jump_statement -> BREAK SEMI .)
    F_CONSTANT      reduce using rule 263 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 263 (jump_statement -> BREAK SEMI .)
    STRINGLITERAL   reduce using rule 263 (jump_statement -> BREAK SEMI .)
    FUNC_NAME       reduce using rule 263 (jump_statement -> BREAK SEMI .)
    GENERIC         reduce using rule 263 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 263 (jump_statement -> BREAK SEMI .)


state 292

    (256) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 374


state 293

    (252) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (253) selection_statement -> IF LPAREN . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 375

state 294

    (14) generic_selection -> GENERIC LPAREN assignment_expression . COMMA generic_assoc_list RPAREN

    COMMA           shift and go to state 376


state 295

    (69) inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .
    (67) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_OP           reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    LAND            reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    CONDOP          reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    LOR             reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    SEMI            reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    COMMA           reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RBRACKET        reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    COLON           reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RBRACE          reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RPAREN          reduce using rule 69 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    XOR             shift and go to state 200


state 296

    (37) unary_expression -> ALIGNOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 377


state 297

    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 378


state 298

    (36) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (25) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list COMMA RBRACE

    RPAREN          shift and go to state 379


state 299

    (49) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND_OP          reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 49 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 300

    (48) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_OP          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 48 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 301

    (47) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEFT_OP         reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RIGHT_OP        reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND_OP          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR_OP           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 47 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 302

    (71) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (69) inclusive_or_expression -> inclusive_or_expression . OR_OP exclusive_or_expression

    LAND            reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 71 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR_OP           shift and go to state 185


state 303

    (54) shift_expression -> shift_expression LEFT_OP additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LT_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GT_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    XOR             reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LAND            reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CONDOP          reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LOR             reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACKET        reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMI            reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RPAREN          reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACE          reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 54 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 201
    MINUS           shift and go to state 202


state 304

    (55) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (51) additive_expression -> additive_expression . PLUS multiplicative_expression
    (52) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LT_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GT_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    XOR             reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LAND            reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CONDOP          reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LOR             reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACKET        reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMI            reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RPAREN          reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACE          reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 55 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 201
    MINUS           shift and go to state 202


state 305

    (67) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (65) and_expression -> and_expression . AND_OP equality_expression

    XOR             reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_OP           reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 67 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_OP          shift and go to state 211


state 306

    (51) additive_expression -> additive_expression PLUS multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (49) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 51 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 195
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 193


state 307

    (52) additive_expression -> additive_expression MINUS multiplicative_expression .
    (47) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (48) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (49) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 52 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 195
    DIVIDE          shift and go to state 194
    MOD             shift and go to state 193


state 308

    (59) relational_expression -> relational_expression LE_OP shift_expression .
    (54) shift_expression -> shift_expression . LEFT_OP additive_expression
    (55) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    GT_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    XOR             reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    LAND            reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    CONDOP          reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    LOR             reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACE          reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACKET        reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    RPAREN          reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMI            reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 59 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 197
    RIGHT_OP        shift and go to state 198


state 309

    (57) relational_expression -> relational_expression LT_OP shift_expression .
    (54) shift_expression -> shift_expression . LEFT_OP additive_expression
    (55) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    GT_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    LE_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    GE_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    EQ_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    NE_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    AND_OP          reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    XOR             reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    OR_OP           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    LAND            reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    CONDOP          reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    LOR             reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    RBRACE          reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    RBRACKET        reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    SEMI            reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    COLON           reduce using rule 57 (relational_expression -> relational_expression LT_OP shift_expression .)
    LEFT_OP         shift and go to state 197
    RIGHT_OP        shift and go to state 198


state 310

    (60) relational_expression -> relational_expression GE_OP shift_expression .
    (54) shift_expression -> shift_expression . LEFT_OP additive_expression
    (55) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    GT_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    XOR             reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    LAND            reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    CONDOP          reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    LOR             reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACE          reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACKET        reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    RPAREN          reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMI            reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 60 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 197
    RIGHT_OP        shift and go to state 198


state 311

    (58) relational_expression -> relational_expression GT_OP shift_expression .
    (54) shift_expression -> shift_expression . LEFT_OP additive_expression
    (55) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    GT_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    LE_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    GE_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    EQ_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    NE_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    AND_OP          reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    XOR             reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    OR_OP           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    LAND            reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    CONDOP          reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    LOR             reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    RBRACE          reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    RBRACKET        reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    RPAREN          reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    SEMI            reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    COLON           reduce using rule 58 (relational_expression -> relational_expression GT_OP shift_expression .)
    LEFT_OP         shift and go to state 197
    RIGHT_OP        shift and go to state 198


state 312

    (63) equality_expression -> equality_expression NE_OP relational_expression .
    (57) relational_expression -> relational_expression . LT_OP shift_expression
    (58) relational_expression -> relational_expression . GT_OP shift_expression
    (59) relational_expression -> relational_expression . LE_OP shift_expression
    (60) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    XOR             reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    LAND            reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    CONDOP          reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    LOR             reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMI            reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    RPAREN          reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACKET        reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACE          reduce using rule 63 (equality_expression -> equality_expression NE_OP relational_expression .)
    LT_OP           shift and go to state 205
    GT_OP           shift and go to state 207
    LE_OP           shift and go to state 204
    GE_OP           shift and go to state 206


state 313

    (62) equality_expression -> equality_expression EQ_OP relational_expression .
    (57) relational_expression -> relational_expression . LT_OP shift_expression
    (58) relational_expression -> relational_expression . GT_OP shift_expression
    (59) relational_expression -> relational_expression . LE_OP shift_expression
    (60) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    XOR             reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LAND            reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    CONDOP          reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LOR             reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMI            reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RPAREN          reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACKET        reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACE          reduce using rule 62 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LT_OP           shift and go to state 205
    GT_OP           shift and go to state 207
    LE_OP           shift and go to state 204
    GE_OP           shift and go to state 206


state 314

    (65) and_expression -> and_expression AND_OP equality_expression .
    (62) equality_expression -> equality_expression . EQ_OP relational_expression
    (63) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    XOR             reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    OR_OP           reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    LAND            reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    CONDOP          reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    LOR             reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    RBRACKET        reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    RPAREN          reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    COMMA           reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    SEMI            reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    RBRACE          reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    COLON           reduce using rule 65 (and_expression -> and_expression AND_OP equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 209


state 315

    (24) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    LBRACKET        reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LPAREN          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PERIOD          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TIMES           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD             reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LT_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GT_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR             reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LAND            reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CONDOP          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LOR             reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RPAREN          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACKET        reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMI            reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACE          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUALS          reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 24 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 316

    (23) postfix_expression -> postfix_expression PERIOD IDENTIFIER .

    LBRACKET        reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LPAREN          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PERIOD          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PTR_OP          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    INC_OP          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DEC_OP          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    TIMES           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIVIDE          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MOD             reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PLUS            reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MINUS           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LEFT_OP         reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RIGHT_OP        reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LT_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GT_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQ_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    NE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    AND_OP          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOR             reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OR_OP           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LAND            reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    CONDOP          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LOR             reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RPAREN          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COMMA           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACKET        reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    SEMI            reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACE          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COLON           reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQUALS          reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    AND_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OR_ASSIGN       reduce using rule 23 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)


state 317

    (20) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (90) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 380
    COMMA           shift and go to state 284


state 318

    (21) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PTR_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_OP         reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_OP        reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 21 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 319

    (29) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 29 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 29 (argument_expression_list -> assignment_expression .)


state 320

    (22) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (30) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 381
    COMMA           shift and go to state 382


state 321

    (75) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (90) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 383
    COMMA           shift and go to state 284


state 322

    (73) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (71) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 73 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 196


state 323

    (5) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PTR_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    INC_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DEC_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_OP         reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LT_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    GT_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    NE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)


state 324

    (45) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LBRACE          shift and go to state 385
    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 384
    unary_operator                 shift and go to state 115

state 325

    (204) direct_abstract_declarator -> LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (205) direct_abstract_declarator -> LBRACKET STATIC . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 386
    multiplicative_expression      shift and go to state 95
    type_qualifier_list            shift and go to state 387
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 326

    (209) direct_abstract_declarator -> LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 388


state 327

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (207) direct_abstract_declarator -> LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (208) direct_abstract_declarator -> LBRACKET type_qualifier_list . RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 389
    RBRACKET        shift and go to state 391
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 390
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 328

    (203) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (39) unary_operator -> TIMES .

    RBRACKET        shift and go to state 392
    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 39 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 39 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 39 (unary_operator -> TIMES .)
    TIMES           reduce using rule 39 (unary_operator -> TIMES .)
    PLUS            reduce using rule 39 (unary_operator -> TIMES .)
    MINUS           reduce using rule 39 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 39 (unary_operator -> TIMES .)
    LNOT            reduce using rule 39 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    CCONST          reduce using rule 39 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 39 (unary_operator -> TIMES .)


state 329

    (202) direct_abstract_declarator -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 202 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 202 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 202 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 202 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COLON           reduce using rule 202 (direct_abstract_declarator -> LBRACKET RBRACKET .)


state 330

    (218) direct_abstract_declarator -> LPAREN RPAREN .

    LBRACKET        reduce using rule 218 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 218 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 218 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 218 (direct_abstract_declarator -> LPAREN RPAREN .)
    COLON           reduce using rule 218 (direct_abstract_declarator -> LPAREN RPAREN .)


state 331

    (219) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 393


state 332

    (201) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 394


state 333

    (210) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 399
    TIMES           shift and go to state 398
    STATIC          shift and go to state 395
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 396
    multiplicative_expression      shift and go to state 95
    type_qualifier_list            shift and go to state 397
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 334

    (220) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (221) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (187) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (188) parameter_type_list -> . parameter_list
    (189) parameter_list -> . parameter_declaration
    (190) parameter_list -> . parameter_list COMMA parameter_declaration
    (191) parameter_declaration -> . declaration_specifiers declarator
    (192) parameter_declaration -> . declaration_specifiers abstract_declarator
    (193) parameter_declaration -> . declaration_specifiers
    (95) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier
    (97) declaration_specifiers -> . type_specifier declaration_specifiers
    (98) declaration_specifiers -> . type_specifier
    (99) declaration_specifiers -> . type_qualifier declaration_specifiers
    (100) declaration_specifiers -> . type_qualifier
    (101) declaration_specifiers -> . function_specifier declaration_specifiers
    (102) declaration_specifiers -> . function_specifier
    (103) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (104) declaration_specifiers -> . alignment_specifier
    (109) storage_class_specifier -> . TYPEDEF
    (110) storage_class_specifier -> . EXTERN
    (111) storage_class_specifier -> . STATIC
    (112) storage_class_specifier -> . THREAD_LOCAL
    (113) storage_class_specifier -> . AUTO
    (114) storage_class_specifier -> . REGISTER
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (161) function_specifier -> . INLINE
    (162) function_specifier -> . NORETURN
    (163) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (164) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    RPAREN          shift and go to state 400
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 149
    parameter_type_list            shift and go to state 401
    parameter_declaration          shift and go to state 146
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 147
    function_specifier             shift and go to state 11

state 335

    (198) abstract_declarator -> pointer direct_abstract_declarator .
    (210) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (211) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (212) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (220) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (221) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 198 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 198 (abstract_declarator -> pointer direct_abstract_declarator .)
    COLON           reduce using rule 198 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 333
    LPAREN          shift and go to state 334


state 336

    (156) enumerator -> enumeration_constant EQUALS constant_expression .

    RBRACE          reduce using rule 156 (enumerator -> enumeration_constant EQUALS constant_expression .)
    COMMA           reduce using rule 156 (enumerator -> enumeration_constant EQUALS constant_expression .)


state 337

    (155) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 155 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 155 (enumerator_list -> enumerator_list COMMA enumerator .)


state 338

    (150) enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .

    VOID            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    CHAR            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SHORT           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    INT             reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LONG            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    FLOAT           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    DOUBLE          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SIGNED          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    UNSIGNED        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    BOOL            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COMPLEX         reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    IMAGINARY       reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    TYPEID          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    CONST           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    RESTRICT        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    VOLATILE        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    ENUM            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    STRUCT          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    UNION           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    TIMES           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LPAREN          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    LBRACKET        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    RPAREN          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    SEMI            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COLON           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    IDENTIFIER      reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    TYPEDEF         reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    EXTERN          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    STATIC          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    THREAD_LOCAL    reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    AUTO            reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    REGISTER        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    INLINE          reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    NORETURN        reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    ALIGNAS         reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)
    COMMA           reduce using rule 150 (enum_specifier -> ENUM LBRACE enumerator_list COMMA RBRACE .)


state 339

    (151) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .

    VOID            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    BOOL            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMPLEX         reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IMAGINARY       reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RESTRICT        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    IDENTIFIER      reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    THREAD_LOCAL    reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    INLINE          reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    NORETURN        reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    ALIGNAS         reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 151 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list RBRACE .)


state 340

    (152) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA . RBRACE
    (155) enumerator_list -> enumerator_list COMMA . enumerator
    (156) enumerator -> . enumeration_constant EQUALS constant_expression
    (157) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 402
    IDENTIFIER      shift and go to state 125

    enumeration_constant           shift and go to state 123
    enumerator                     shift and go to state 337

state 341

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL . RPAREN SEMI

    RPAREN          shift and go to state 403


state 342

    (131) struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .

    VOID            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    BOOL            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMPLEX         reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IMAGINARY       reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RESTRICT        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    THREAD_LOCAL    reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    INLINE          reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    NORETURN        reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    ALIGNAS         reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    IDENTIFIER      reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 131 (struct_or_union_specifier -> struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE .)


state 343

    (147) struct_declarator -> declarator COLON . constant_expression
    (91) constant_expression -> . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    conditional_expression         shift and go to state 121
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    constant_expression            shift and go to state 404

state 344

    (146) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 146 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 146 (struct_declarator -> COLON constant_expression .)


state 345

    (145) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (146) struct_declarator -> . COLON constant_expression
    (147) struct_declarator -> . declarator COLON constant_expression
    (148) struct_declarator -> . declarator
    (165) declarator -> . pointer direct_declarator
    (166) declarator -> . direct_declarator
    (181) pointer -> . TIMES type_qualifier_list pointer
    (182) pointer -> . TIMES type_qualifier_list
    (183) pointer -> . TIMES pointer
    (184) pointer -> . TIMES
    (167) direct_declarator -> . IDENTIFIER
    (168) direct_declarator -> . LPAREN declarator RPAREN
    (169) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (170) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (171) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (172) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (173) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (174) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (175) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (176) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (177) direct_declarator -> . direct_declarator LBRACKET assignment_expression RBRACKET
    (178) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (179) direct_declarator -> . direct_declarator LPAREN RPAREN
    (180) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    COLON           shift and go to state 239
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    struct_declarator              shift and go to state 405
    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 238
    pointer                        shift and go to state 46

state 346

    (138) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STATIC_ASSERT   reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    BOOL            reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    COMPLEX         reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    IMAGINARY       reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPEID          reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    RESTRICT        reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 138 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 347

    (77) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 77 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 348

    (172) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 172 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 349

    (171) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 406


state 350

    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 407


state 351

    (175) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SEMI            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    TYPEID          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 175 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 352

    (173) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .

    LBRACKET        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RPAREN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMMA           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COLON           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SEMI            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EQUALS          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LBRACE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    TYPEDEF         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EXTERN          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    AUTO            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    REGISTER        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOID            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CHAR            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SHORT           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INT             reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LONG            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    FLOAT           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    DOUBLE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SIGNED          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNSIGNED        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    BOOL            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMPLEX         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    IMAGINARY       reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    TYPEID          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CONST           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RESTRICT        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOLATILE        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INLINE          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    NORETURN        reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ALIGNAS         reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ENUM            reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STRUCT          reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNION           reduce using rule 173 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)


state 353

    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE
    (45) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LBRACE          shift and go to state 385
    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    string                         shift and go to state 112
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 113
    generic_selection              shift and go to state 92
    primary_expression             shift and go to state 108
    cast_expression                shift and go to state 384
    unary_operator                 shift and go to state 115

state 354

    (195) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 195 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 195 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 355

    (187) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 187 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 356

    (190) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 190 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 190 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 357

    (232) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 408


state 358

    (222) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 222 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 222 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 222 (initializer -> LBRACE initializer_list RBRACE .)


state 359

    (223) initializer -> LBRACE initializer_list COMMA . RBRACE
    (227) initializer_list -> initializer_list COMMA . designation initializer
    (228) initializer_list -> initializer_list COMMA . initializer
    (229) designation -> . designator_list EQUALS
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (230) designator_list -> . designator
    (231) designator_list -> . designator_list designator
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (232) designator -> . LBRACKET constant_expression RBRACKET
    (233) designator -> . PERIOD IDENTIFIER
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 410
    LBRACE          shift and go to state 155
    LBRACKET        shift and go to state 271
    PERIOD          shift and go to state 274
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 409
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    designator                     shift and go to state 273
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    designation                    shift and go to state 411
    conditional_expression         shift and go to state 141
    designator_list                shift and go to state 276

state 360

    (233) designator -> PERIOD IDENTIFIER .

    EQUALS          reduce using rule 233 (designator -> PERIOD IDENTIFIER .)
    LBRACKET        reduce using rule 233 (designator -> PERIOD IDENTIFIER .)
    PERIOD          reduce using rule 233 (designator -> PERIOD IDENTIFIER .)


state 361

    (225) initializer_list -> designation initializer .

    RBRACE          reduce using rule 225 (initializer_list -> designation initializer .)
    COMMA           reduce using rule 225 (initializer_list -> designation initializer .)


state 362

    (231) designator_list -> designator_list designator .

    EQUALS          reduce using rule 231 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 231 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 231 (designator_list -> designator_list designator .)


state 363

    (229) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 229 (designation -> designator_list EQUALS .)
    INC_OP          reduce using rule 229 (designation -> designator_list EQUALS .)
    DEC_OP          reduce using rule 229 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 229 (designation -> designator_list EQUALS .)
    ALIGNOF         reduce using rule 229 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 229 (designation -> designator_list EQUALS .)
    AND_OP          reduce using rule 229 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 229 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 229 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 229 (designation -> designator_list EQUALS .)
    NOT_OP          reduce using rule 229 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 229 (designation -> designator_list EQUALS .)
    IDENTIFIER      reduce using rule 229 (designation -> designator_list EQUALS .)
    I_CONSTANT      reduce using rule 229 (designation -> designator_list EQUALS .)
    F_CONSTANT      reduce using rule 229 (designation -> designator_list EQUALS .)
    CCONST          reduce using rule 229 (designation -> designator_list EQUALS .)
    STRINGLITERAL   reduce using rule 229 (designation -> designator_list EQUALS .)
    FUNC_NAME       reduce using rule 229 (designation -> designator_list EQUALS .)
    GENERIC         reduce using rule 229 (designation -> designator_list EQUALS .)


state 364

    (261) jump_statement -> GOTO IDENTIFIER SEMI .

    RBRACE          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STATIC_ASSERT   reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LBRACE          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    WHILE           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DO              reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TYPEDEF         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    EXTERN          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STATIC          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    THREAD_LOCAL    reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AUTO            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    REGISTER        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    VOID            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CHAR            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SHORT           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INT             reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LONG            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FLOAT           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIGNED          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    UNSIGNED        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BOOL            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    COMPLEX         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IMAGINARY       reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TYPEID          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONST           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RESTRICT        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    VOLATILE        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INLINE          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    NORETURN        reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ALIGNAS         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ENUM            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRUCT          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    UNION           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INC_OP          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEC_OP          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ALIGNOF         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LPAREN          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AND_OP          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TIMES           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    PLUS            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MINUS           reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    NOT_OP          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LNOT            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    I_CONSTANT      reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    F_CONSTANT      reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CCONST          reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRINGLITERAL   reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FUNC_NAME       reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GENERIC         reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 261 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 365

    (265) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    STATIC_ASSERT   reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    THREAD_LOCAL    reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    BOOL            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    COMPLEX         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    IMAGINARY       reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    NORETURN        reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    ALIGNAS         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    INC_OP          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    DEC_OP          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    ALIGNOF         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    AND_OP          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    NOT_OP          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    I_CONSTANT      reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    F_CONSTANT      reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    CCONST          reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    STRINGLITERAL   reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    FUNC_NAME       reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    GENERIC         reduce using rule 265 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 265 (jump_statement -> RETURN expression SEMI .)


state 366

    (257) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (258) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 178
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 412
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 367

    (259) iteration_statement -> FOR LPAREN declaration . expression_statement RPAREN statement
    (260) iteration_statement -> FOR LPAREN declaration . expression_statement expression RPAREN statement
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 178
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 413
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 368

    (90) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 90 (expression -> expression COMMA assignment_expression .)


state 369

    (243) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    STATIC_ASSERT   reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    THREAD_LOCAL    reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    COMPLEX         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    IMAGINARY       reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    TYPEID          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    NORETURN        reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNAS         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNOF         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    AND_OP          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    NOT_OP          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    I_CONSTANT      reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    F_CONSTANT      reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    CCONST          reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    STRINGLITERAL   reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    FUNC_NAME       reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    GENERIC         reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 243 (labeled_statement -> DEFAULT COLON statement .)


state 370

    (255) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 414
    COMMA           shift and go to state 284


state 371

    (242) labeled_statement -> CASE constant_expression COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 415
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 372

    (254) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 416
    COMMA           shift and go to state 284


state 373

    (241) labeled_statement -> IDENTIFIER COLON statement .

    RBRACE          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC_ASSERT   reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    THREAD_LOCAL    reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    REGISTER        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    COMPLEX         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    IMAGINARY       reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEID          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    RESTRICT        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    NORETURN        reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNAS         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNOF         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    AND_OP          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT_OP          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    LNOT            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    I_CONSTANT      reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    F_CONSTANT      reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    CCONST          reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    STRINGLITERAL   reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    FUNC_NAME       reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    GENERIC         reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 241 (labeled_statement -> IDENTIFIER COLON statement .)


state 374

    (256) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 417


state 375

    (252) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (253) selection_statement -> IF LPAREN expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 418
    COMMA           shift and go to state 284


state 376

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA . generic_assoc_list RPAREN
    (15) generic_assoc_list -> . generic_association
    (16) generic_assoc_list -> . generic_assoc_list COMMA generic_association
    (17) generic_association -> . type_name COLON assignment_expression
    (18) generic_association -> . DEFAULT COLON assignment_expression
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    DEFAULT         shift and go to state 421
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 94
    type_qualifier                 shift and go to state 98
    generic_association            shift and go to state 422
    struct_or_union_specifier      shift and go to state 5
    type_name                      shift and go to state 420
    specifier_qualifier_list       shift and go to state 120
    enum_specifier                 shift and go to state 37
    generic_assoc_list             shift and go to state 419

state 377

    (37) unary_expression -> ALIGNOF LPAREN type_name RPAREN .

    TIMES           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 37 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)


state 378

    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    LBRACE          shift and go to state 385


state 379

    (36) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (25) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list COMMA RBRACE

    TIMES           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 36 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 385


state 380

    (20) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PTR_OP          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DEC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEFT_OP         reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RIGHT_OP        reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND_OP          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR_OP           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SUB_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEFT_ASSIGN     reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RIGHT_ASSIGN    reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR_ASSIGN       reduce using rule 20 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 381

    (22) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PTR_OP          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC_OP          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC_OP          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_OP         reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_OP        reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_OP          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_OP           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 22 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 382

    (30) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 423
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 383

    (75) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 118
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 88
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    additive_expression            shift and go to state 102
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    and_expression                 shift and go to state 111
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    relational_expression          shift and go to state 104
    string                         shift and go to state 112
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 424
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 384

    (45) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_OP         reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_OP        reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_OP          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_OP           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 45 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 385

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list COMMA RBRACE
    (225) initializer_list -> . designation initializer
    (226) initializer_list -> . initializer
    (227) initializer_list -> . initializer_list COMMA designation initializer
    (228) initializer_list -> . initializer_list COMMA initializer
    (229) designation -> . designator_list EQUALS
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (230) designator_list -> . designator
    (231) designator_list -> . designator_list designator
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (232) designator -> . LBRACKET constant_expression RBRACKET
    (233) designator -> . PERIOD IDENTIFIER
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 155
    LBRACKET        shift and go to state 271
    PERIOD          shift and go to state 274
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 270
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    initializer_list               shift and go to state 425
    designator                     shift and go to state 273
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    designation                    shift and go to state 275
    conditional_expression         shift and go to state 141
    designator_list                shift and go to state 276

state 386

    (205) direct_abstract_declarator -> LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 426


state 387

    (204) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 427
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 388

    (209) direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 209 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 209 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 209 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 209 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 209 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)


state 389

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 428
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 390

    (207) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 429


state 391

    (208) direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 208 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 208 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 208 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)


state 392

    (203) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 203 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 203 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 203 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 203 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 203 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 393

    (219) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 219 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 219 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 219 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 219 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 219 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 394

    (201) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 201 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 201 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 201 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 201 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COLON           reduce using rule 201 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 395

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (185) type_qualifier_list -> . type_qualifier
    (186) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 430
    multiplicative_expression      shift and go to state 95
    type_qualifier_list            shift and go to state 431
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 71
    conditional_expression         shift and go to state 141

state 396

    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 432


state 397

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 433
    RBRACKET        shift and go to state 435
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 434
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 398

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (39) unary_operator -> TIMES .

    RBRACKET        shift and go to state 436
    LPAREN          reduce using rule 39 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 39 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 39 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 39 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 39 (unary_operator -> TIMES .)
    TIMES           reduce using rule 39 (unary_operator -> TIMES .)
    PLUS            reduce using rule 39 (unary_operator -> TIMES .)
    MINUS           reduce using rule 39 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 39 (unary_operator -> TIMES .)
    LNOT            reduce using rule 39 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> TIMES .)
    CCONST          reduce using rule 39 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 39 (unary_operator -> TIMES .)


state 399

    (210) direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 210 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)


state 400

    (220) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COLON           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 401

    (221) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 437


state 402

    (152) enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .

    VOID            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    CHAR            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SHORT           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    INT             reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LONG            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    FLOAT           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    DOUBLE          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SIGNED          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    UNSIGNED        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    BOOL            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COMPLEX         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    IMAGINARY       reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    TYPEID          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    CONST           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    RESTRICT        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    VOLATILE        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    ENUM            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    STRUCT          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    UNION           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    TIMES           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LPAREN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    LBRACKET        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    RPAREN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    SEMI            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COLON           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    IDENTIFIER      reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    TYPEDEF         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    EXTERN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    STATIC          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    THREAD_LOCAL    reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    AUTO            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    REGISTER        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    INLINE          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    NORETURN        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    ALIGNAS         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)
    COMMA           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE .)


state 403

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN . SEMI

    SEMI            shift and go to state 438


state 404

    (147) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 147 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 147 (struct_declarator -> declarator COLON constant_expression .)


state 405

    (145) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 145 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 145 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 406

    (171) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SEMI            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEID          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 171 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 407

    (174) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 174 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 408

    (232) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 232 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 232 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 232 (designator -> LBRACKET constant_expression RBRACKET .)


state 409

    (228) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 228 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 228 (initializer_list -> initializer_list COMMA initializer .)


state 410

    (223) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 223 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 223 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 223 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 411

    (227) initializer_list -> initializer_list COMMA designation . initializer
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 155
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 439
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    conditional_expression         shift and go to state 141
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109

state 412

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (258) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 440
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 441

state 413

    (259) iteration_statement -> FOR LPAREN declaration expression_statement . RPAREN statement
    (260) iteration_statement -> FOR LPAREN declaration expression_statement . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 442
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 443

state 414

    (255) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 444
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 415

    (242) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC_ASSERT   reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    THREAD_LOCAL    reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    COMPLEX         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    IMAGINARY       reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEID          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    NORETURN        reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNAS         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNOF         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    AND_OP          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT_OP          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    I_CONSTANT      reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    F_CONSTANT      reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    CCONST          reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    STRINGLITERAL   reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    FUNC_NAME       reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    GENERIC         reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 242 (labeled_statement -> CASE constant_expression COLON statement .)


state 416

    (254) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 445
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 417

    (256) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 446

state 418

    (252) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (253) selection_statement -> IF LPAREN expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 447
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 419

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list . RPAREN
    (16) generic_assoc_list -> generic_assoc_list . COMMA generic_association

    RPAREN          shift and go to state 448
    COMMA           shift and go to state 449


state 420

    (17) generic_association -> type_name . COLON assignment_expression

    COLON           shift and go to state 450


state 421

    (18) generic_association -> DEFAULT . COLON assignment_expression

    COLON           shift and go to state 451


state 422

    (15) generic_assoc_list -> generic_association .

    RPAREN          reduce using rule 15 (generic_assoc_list -> generic_association .)
    COMMA           reduce using rule 15 (generic_assoc_list -> generic_association .)


state 423

    (30) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 30 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 30 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 424

    (75) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    RPAREN          reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 75 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 425

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . RBRACE
    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . COMMA RBRACE
    (227) initializer_list -> initializer_list . COMMA designation initializer
    (228) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 452
    COMMA           shift and go to state 453


state 426

    (205) direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 205 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 205 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 205 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)


state 427

    (204) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 454


state 428

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 455


state 429

    (207) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 207 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 430

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 456


state 431

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (186) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 457
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 141

state 432

    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)


state 433

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 458
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 434

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 459


state 435

    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)


state 436

    (211) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 211 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 437

    (221) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 438

    (234) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .

    STATIC_ASSERT   reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TYPEDEF         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    EXTERN          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STATIC          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    THREAD_LOCAL    reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    AUTO            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    REGISTER        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    VOID            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CHAR            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SHORT           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INT             reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LONG            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FLOAT           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DOUBLE          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SIGNED          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    UNSIGNED        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    BOOL            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    COMPLEX         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IMAGINARY       reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TYPEID          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CONST           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RESTRICT        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    VOLATILE        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INLINE          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    NORETURN        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ALIGNAS         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ENUM            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STRUCT          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    UNION           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    $end            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LBRACE          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RBRACE          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IDENTIFIER      reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CASE            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DEFAULT         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SEMI            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IF              reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SWITCH          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    WHILE           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DO              reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FOR             reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    GOTO            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CONTINUE        reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    BREAK           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RETURN          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INC_OP          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DEC_OP          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SIZEOF          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ALIGNOF         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LPAREN          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    AND_OP          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TIMES           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    PLUS            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    MINUS           reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    NOT_OP          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LNOT            reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    I_CONSTANT      reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    F_CONSTANT      reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CCONST          reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STRINGLITERAL   reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FUNC_NAME       reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    GENERIC         reduce using rule 234 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)


state 439

    (227) initializer_list -> initializer_list COMMA designation initializer .

    RBRACE          reduce using rule 227 (initializer_list -> initializer_list COMMA designation initializer .)
    COMMA           reduce using rule 227 (initializer_list -> initializer_list COMMA designation initializer .)


state 440

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 460
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 441

    (258) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 461
    COMMA           shift and go to state 284


state 442

    (259) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 462
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 443

    (260) iteration_statement -> FOR LPAREN declaration expression_statement expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 463
    COMMA           shift and go to state 284


state 444

    (255) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 445

    (254) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 254 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 446

    (256) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 464
    COMMA           shift and go to state 284


state 447

    (252) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (253) selection_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 465
    RBRACE          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 253 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 448

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .

    LBRACKET        reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LPAREN          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PERIOD          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PTR_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    INC_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DEC_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQUALS          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MUL_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIV_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    ADD_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SUB_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_ASSIGN       reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    TIMES           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIVIDE          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PLUS            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MINUS           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_OP         reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_OP        reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LT_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GT_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQ_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    NE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LAND            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    CONDOP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LOR             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACE          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COMMA           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACKET        reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RPAREN          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SEMI            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COLON           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)


state 449

    (16) generic_assoc_list -> generic_assoc_list COMMA . generic_association
    (17) generic_association -> . type_name COLON assignment_expression
    (18) generic_association -> . DEFAULT COLON assignment_expression
    (196) type_name -> . specifier_qualifier_list abstract_declarator
    (197) type_name -> . specifier_qualifier_list
    (140) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier
    (142) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (143) specifier_qualifier_list -> . type_qualifier
    (115) type_specifier -> . VOID
    (116) type_specifier -> . CHAR
    (117) type_specifier -> . SHORT
    (118) type_specifier -> . INT
    (119) type_specifier -> . LONG
    (120) type_specifier -> . FLOAT
    (121) type_specifier -> . DOUBLE
    (122) type_specifier -> . SIGNED
    (123) type_specifier -> . UNSIGNED
    (124) type_specifier -> . BOOL
    (125) type_specifier -> . COMPLEX
    (126) type_specifier -> . IMAGINARY
    (127) type_specifier -> . struct_or_union_specifier
    (128) type_specifier -> . enum_specifier
    (129) type_specifier -> . TYPEID
    (158) type_qualifier -> . CONST
    (159) type_qualifier -> . RESTRICT
    (160) type_qualifier -> . VOLATILE
    (130) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (131) struct_or_union_specifier -> . struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (149) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (150) enum_specifier -> . ENUM LBRACE enumerator_list COMMA RBRACE
    (151) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list RBRACE
    (152) enum_specifier -> . ENUM IDENTIFIER LBRACE enumerator_list COMMA RBRACE
    (153) enum_specifier -> . ENUM IDENTIFIER
    (133) struct_or_union -> . STRUCT
    (134) struct_or_union -> . UNION

    DEFAULT         shift and go to state 421
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 94
    type_qualifier                 shift and go to state 98
    generic_association            shift and go to state 466
    struct_or_union_specifier      shift and go to state 5
    type_name                      shift and go to state 420
    specifier_qualifier_list       shift and go to state 120
    enum_specifier                 shift and go to state 37

state 450

    (17) generic_association -> type_name COLON . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 467
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 451

    (18) generic_association -> DEFAULT COLON . assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 468
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    conditional_expression         shift and go to state 141

state 452

    (25) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .

    LBRACKET        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PERIOD          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PTR_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    INC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DEC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    TIMES           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIVIDE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MOD             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    PLUS            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MINUS           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LEFT_OP         reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RIGHT_OP        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LT_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GT_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    GE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQ_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    NE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOR             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LAND            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    CONDOP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LOR             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACKET        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    COLON           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    EQUALS          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MUL_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    DIV_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    MOD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    ADD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    SUB_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    LEFT_ASSIGN     reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    RIGHT_ASSIGN    reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    AND_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    XOR_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)
    OR_ASSIGN       reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list RBRACE .)


state 453

    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA . RBRACE
    (227) initializer_list -> initializer_list COMMA . designation initializer
    (228) initializer_list -> initializer_list COMMA . initializer
    (229) designation -> . designator_list EQUALS
    (222) initializer -> . LBRACE initializer_list RBRACE
    (223) initializer -> . LBRACE initializer_list COMMA RBRACE
    (224) initializer -> . assignment_expression
    (230) designator_list -> . designator
    (231) designator_list -> . designator_list designator
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (232) designator -> . LBRACKET constant_expression RBRACKET
    (233) designator -> . PERIOD IDENTIFIER
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 469
    LBRACE          shift and go to state 155
    LBRACKET        shift and go to state 271
    PERIOD          shift and go to state 274
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    IDENTIFIER      shift and go to state 106
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    initializer                    shift and go to state 409
    generic_selection              shift and go to state 92
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    relational_expression          shift and go to state 104
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 154
    multiplicative_expression      shift and go to state 95
    designator                     shift and go to state 273
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 109
    designation                    shift and go to state 411
    conditional_expression         shift and go to state 141
    designator_list                shift and go to state 276

state 454

    (204) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 204 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 455

    (206) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 206 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 456

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 457

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 470


state 458

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 471


state 459

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 460

    (257) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    EXTERN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AUTO            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    REGISTER        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOID            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SHORT           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT             reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LONG            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIGNED          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BOOL            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEID          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONST           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INLINE          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NORETURN        reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ENUM            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRUCT          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNION           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INC_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AND_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT_OP          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CCONST          reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRINGLITERAL   reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GENERIC         reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 257 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 461

    (258) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 472
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 462

    (259) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .

    RBRACE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CASE            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LBRACE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SEMI            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IF              reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SWITCH          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    WHILE           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DO              reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FOR             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GOTO            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BREAK           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RETURN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    EXTERN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AUTO            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    REGISTER        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOID            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CHAR            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SHORT           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INT             reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LONG            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FLOAT           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIGNED          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BOOL            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEID          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONST           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INLINE          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NORETURN        reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ENUM            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRUCT          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNION           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INC_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LPAREN          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AND_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TIMES           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    PLUS            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    MINUS           reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NOT_OP          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LNOT            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CCONST          reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRINGLITERAL   reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GENERIC         reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ELSE            reduce using rule 259 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)


state 463

    (260) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 473
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 464

    (256) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 474


state 465

    (252) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (235) statement -> . labeled_statement
    (236) statement -> . compound_statement
    (237) statement -> . expression_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) labeled_statement -> . IDENTIFIER COLON statement
    (242) labeled_statement -> . CASE constant_expression COLON statement
    (243) labeled_statement -> . DEFAULT COLON statement
    (244) compound_statement -> . LBRACE RBRACE
    (245) compound_statement -> . LBRACE block_item_list RBRACE
    (250) expression_statement -> . SEMI
    (251) expression_statement -> . expression SEMI
    (252) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (253) selection_statement -> . IF LPAREN expression RPAREN statement
    (254) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (257) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (258) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (259) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (260) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (261) jump_statement -> . GOTO IDENTIFIER SEMI
    (262) jump_statement -> . CONTINUE SEMI
    (263) jump_statement -> . BREAK SEMI
    (264) jump_statement -> . RETURN SEMI
    (265) jump_statement -> . RETURN expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (76) assignment_expression -> . conditional_expression
    (77) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (74) conditional_expression -> . logical_or_expression
    (75) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (31) unary_expression -> . postfix_expression
    (32) unary_expression -> . INC_OP unary_expression
    (33) unary_expression -> . DEC_OP unary_expression
    (34) unary_expression -> . unary_operator cast_expression
    (35) unary_expression -> . SIZEOF unary_expression
    (36) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (37) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (72) logical_or_expression -> . logical_and_expression
    (73) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (21) postfix_expression -> . postfix_expression LPAREN RPAREN
    (22) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (23) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (24) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (25) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list RBRACE
    (26) postfix_expression -> . LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE
    (27) postfix_expression -> . postfix_expression INC_OP
    (28) postfix_expression -> . postfix_expression DEC_OP
    (38) unary_operator -> . AND_OP
    (39) unary_operator -> . TIMES
    (40) unary_operator -> . PLUS
    (41) unary_operator -> . MINUS
    (42) unary_operator -> . NOT_OP
    (43) unary_operator -> . LNOT
    (70) logical_and_expression -> . inclusive_or_expression
    (71) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (68) inclusive_or_expression -> . exclusive_or_expression
    (69) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (66) exclusive_or_expression -> . and_expression
    (67) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (64) and_expression -> . equality_expression
    (65) and_expression -> . and_expression AND_OP equality_expression
    (61) equality_expression -> . relational_expression
    (62) equality_expression -> . equality_expression EQ_OP relational_expression
    (63) equality_expression -> . equality_expression NE_OP relational_expression
    (56) relational_expression -> . shift_expression
    (57) relational_expression -> . relational_expression LT_OP shift_expression
    (58) relational_expression -> . relational_expression GT_OP shift_expression
    (59) relational_expression -> . relational_expression LE_OP shift_expression
    (60) relational_expression -> . relational_expression GE_OP shift_expression
    (53) shift_expression -> . additive_expression
    (54) shift_expression -> . shift_expression LEFT_OP additive_expression
    (55) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUS multiplicative_expression
    (52) additive_expression -> . additive_expression MINUS multiplicative_expression
    (46) multiplicative_expression -> . cast_expression
    (47) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (48) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (49) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (44) cast_expression -> . unary_expression
    (45) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 171
    CASE            shift and go to state 168
    DEFAULT         shift and go to state 166
    LBRACE          shift and go to state 78
    SEMI            shift and go to state 178
    IF              shift and go to state 181
    SWITCH          shift and go to state 169
    WHILE           shift and go to state 167
    DO              shift and go to state 176
    FOR             shift and go to state 162
    GOTO            shift and go to state 158
    CONTINUE        shift and go to state 164
    BREAK           shift and go to state 174
    RETURN          shift and go to state 160
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 93
    ALIGNOF         shift and go to state 85
    LPAREN          shift and go to state 140
    AND_OP          shift and go to state 117
    TIMES           shift and go to state 116
    PLUS            shift and go to state 84
    MINUS           shift and go to state 82
    NOT_OP          shift and go to state 81
    LNOT            shift and go to state 110
    I_CONSTANT      shift and go to state 99
    F_CONSTANT      shift and go to state 119
    CCONST          shift and go to state 86
    STRINGLITERAL   shift and go to state 91
    FUNC_NAME       shift and go to state 90
    GENERIC         shift and go to state 80

    expression_statement           shift and go to state 156
    selection_statement            shift and go to state 179
    constant                       shift and go to state 101
    unary_expression               shift and go to state 135
    exclusive_or_expression        shift and go to state 100
    generic_selection              shift and go to state 92
    iteration_statement            shift and go to state 157
    and_expression                 shift and go to state 111
    string                         shift and go to state 112
    compound_statement             shift and go to state 161
    inclusive_or_expression        shift and go to state 83
    postfix_expression             shift and go to state 113
    shift_expression               shift and go to state 97
    relational_expression          shift and go to state 104
    statement                      shift and go to state 475
    cast_expression                shift and go to state 105
    logical_or_expression          shift and go to state 114
    unary_operator                 shift and go to state 115
    assignment_expression          shift and go to state 180
    multiplicative_expression      shift and go to state 95
    additive_expression            shift and go to state 102
    primary_expression             shift and go to state 108
    logical_and_expression         shift and go to state 96
    equality_expression            shift and go to state 109
    jump_statement                 shift and go to state 173
    labeled_statement              shift and go to state 159
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 165

state 466

    (16) generic_assoc_list -> generic_assoc_list COMMA generic_association .

    RPAREN          reduce using rule 16 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)
    COMMA           reduce using rule 16 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)


state 467

    (17) generic_association -> type_name COLON assignment_expression .

    RPAREN          reduce using rule 17 (generic_association -> type_name COLON assignment_expression .)
    COMMA           reduce using rule 17 (generic_association -> type_name COLON assignment_expression .)


state 468

    (18) generic_association -> DEFAULT COLON assignment_expression .

    RPAREN          reduce using rule 18 (generic_association -> DEFAULT COLON assignment_expression .)
    COMMA           reduce using rule 18 (generic_association -> DEFAULT COLON assignment_expression .)


state 469

    (26) postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .

    LBRACKET        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LPAREN          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PERIOD          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PTR_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    INC_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DEC_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    TIMES           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIVIDE          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MOD             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    PLUS            reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MINUS           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LEFT_OP         reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RIGHT_OP        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LT_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GT_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    GE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQ_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    NE_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND_OP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOR             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR_OP           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LAND            reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    CONDOP          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LOR             reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RPAREN          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACKET        reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    COLON           reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    EQUALS          reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MUL_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    DIV_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    MOD_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    ADD_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    SUB_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    LEFT_ASSIGN     reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    RIGHT_ASSIGN    reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    AND_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    XOR_ASSIGN      reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)
    OR_ASSIGN       reduce using rule 26 (postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE .)


state 470

    (212) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 212 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 471

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 472

    (258) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOID            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LONG            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEID          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONST           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNION           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT_OP          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CCONST          reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 258 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 473

    (260) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CASE            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IF              reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DO              reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FOR             reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOID            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INT             reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LONG            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEID          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONST           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNION           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AND_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NOT_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CCONST          reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 260 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)


state 474

    (256) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC_ASSERT   reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    THREAD_LOCAL    reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BOOL            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    COMPLEX         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IMAGINARY       reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NORETURN        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ALIGNAS         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INC_OP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEC_OP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ALIGNOF         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND_OP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT_OP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    I_CONSTANT      reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    F_CONSTANT      reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CCONST          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRINGLITERAL   reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FUNC_NAME       reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GENERIC         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 475

    (252) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC_ASSERT   reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THREAD_LOCAL    reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    COMPLEX         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IMAGINARY       reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NORETURN        reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNAS         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNOF         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT_OP          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    I_CONSTANT      reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    F_CONSTANT      reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRINGLITERAL   reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNC_NAME       reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GENERIC         reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 252 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 447 resolved as shift
