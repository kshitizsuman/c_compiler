Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     primary_expression -> constant
Rule 4     primary_expression -> string
Rule 5     primary_expression -> LPAREN expression RPAREN
Rule 6     primary_expression -> generic_selection
Rule 7     primary_expression -> IDENTIFIER
Rule 8     constant -> I_CONSTANT
Rule 9     constant -> F_CONSTANT
Rule 10    constant -> CCONST
Rule 11    enumeration_constant -> IDENTIFIER
Rule 12    string -> STRINGLITERAL
Rule 13    string -> FUNC_NAME
Rule 14    generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
Rule 15    generic_assoc_list -> generic_association
Rule 16    generic_assoc_list -> generic_assoc_list COMMA generic_association
Rule 17    generic_association -> type_name COLON assignment_expression
Rule 18    generic_association -> DEFAULT COLON assignment_expression
Rule 19    postfix_expression -> primary_expression
Rule 20    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 21    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 22    postfix_expression -> postfix_expression PERIOD IDENTIFIER
Rule 23    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 24    postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace
Rule 25    postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
Rule 26    postfix_expression -> postfix_expression INC_OP
Rule 27    postfix_expression -> postfix_expression DEC_OP
Rule 28    postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET
Rule 29    postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
Rule 30    argument_expression_list -> assignment_expression
Rule 31    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 32    unary_expression -> postfix_expression
Rule 33    unary_expression -> INC_OP unary_expression
Rule 34    unary_expression -> DEC_OP unary_expression
Rule 35    unary_expression -> unary_operator cast_expression
Rule 36    unary_expression -> SIZEOF unary_expression
Rule 37    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 38    unary_expression -> ALIGNOF LPAREN type_name RPAREN
Rule 39    unary_operator -> AND_OP
Rule 40    unary_operator -> TIMES
Rule 41    unary_operator -> PLUS
Rule 42    unary_operator -> MINUS
Rule 43    unary_operator -> NOT_OP
Rule 44    unary_operator -> LNOT
Rule 45    cast_expression -> unary_expression
Rule 46    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 47    multiplicative_expression -> cast_expression
Rule 48    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 49    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 50    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 51    additive_expression -> multiplicative_expression
Rule 52    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 53    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 54    shift_expression -> additive_expression
Rule 55    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 56    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 57    relational_expression -> shift_expression
Rule 58    relational_expression -> relational_expression LT_OP shift_expression
Rule 59    relational_expression -> relational_expression GT_OP shift_expression
Rule 60    relational_expression -> relational_expression LE_OP shift_expression
Rule 61    relational_expression -> relational_expression GE_OP shift_expression
Rule 62    equality_expression -> relational_expression
Rule 63    equality_expression -> equality_expression EQ_OP relational_expression
Rule 64    equality_expression -> equality_expression NE_OP relational_expression
Rule 65    and_expression -> equality_expression
Rule 66    and_expression -> and_expression AND_OP equality_expression
Rule 67    exclusive_or_expression -> and_expression
Rule 68    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 69    inclusive_or_expression -> exclusive_or_expression
Rule 70    inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression
Rule 71    logical_and_expression -> inclusive_or_expression
Rule 72    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 73    logical_or_expression -> logical_and_expression
Rule 74    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 75    conditional_expression -> logical_or_expression
Rule 76    conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 77    assignment_expression -> conditional_expression
Rule 78    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 79    assignment_operator -> EQUALS
Rule 80    assignment_operator -> MUL_ASSIGN
Rule 81    assignment_operator -> DIV_ASSIGN
Rule 82    assignment_operator -> MOD_ASSIGN
Rule 83    assignment_operator -> ADD_ASSIGN
Rule 84    assignment_operator -> SUB_ASSIGN
Rule 85    assignment_operator -> LEFT_ASSIGN
Rule 86    assignment_operator -> RIGHT_ASSIGN
Rule 87    assignment_operator -> AND_ASSIGN
Rule 88    assignment_operator -> XOR_ASSIGN
Rule 89    assignment_operator -> OR_ASSIGN
Rule 90    expression -> assignment_expression
Rule 91    expression -> expression COMMA assignment_expression
Rule 92    constant_expression -> conditional_expression
Rule 93    declaration -> declaration_specifiers SEMI
Rule 94    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 95    declaration -> static_assert_declaration
Rule 96    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 97    declaration_specifiers -> storage_class_specifier
Rule 98    declaration_specifiers -> type_specifier declaration_specifiers
Rule 99    declaration_specifiers -> type_specifier
Rule 100   declaration_specifiers -> type_qualifier declaration_specifiers
Rule 101   declaration_specifiers -> type_qualifier
Rule 102   declaration_specifiers -> function_specifier declaration_specifiers
Rule 103   declaration_specifiers -> function_specifier
Rule 104   declaration_specifiers -> alignment_specifier declaration_specifiers
Rule 105   declaration_specifiers -> alignment_specifier
Rule 106   init_declarator_list -> init_declarator
Rule 107   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 108   init_declarator -> declarator EQUALS initializer
Rule 109   init_declarator -> declarator
Rule 110   storage_class_specifier -> TYPEDEF
Rule 111   storage_class_specifier -> EXTERN
Rule 112   storage_class_specifier -> STATIC
Rule 113   storage_class_specifier -> THREAD_LOCAL
Rule 114   storage_class_specifier -> AUTO
Rule 115   storage_class_specifier -> REGISTER
Rule 116   type_specifier -> VOID
Rule 117   type_specifier -> CHAR
Rule 118   type_specifier -> SHORT
Rule 119   type_specifier -> INT
Rule 120   type_specifier -> LONG
Rule 121   type_specifier -> FLOAT
Rule 122   type_specifier -> DOUBLE
Rule 123   type_specifier -> SIGNED
Rule 124   type_specifier -> UNSIGNED
Rule 125   type_specifier -> BOOL
Rule 126   type_specifier -> COMPLEX
Rule 127   type_specifier -> IMAGINARY
Rule 128   type_specifier -> struct_or_union_specifier
Rule 129   type_specifier -> enum_specifier
Rule 130   type_specifier -> TYPEID
Rule 131   struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace
Rule 132   struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
Rule 133   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 134   struct_or_union -> STRUCT
Rule 135   struct_or_union -> UNION
Rule 136   struct_declaration_list -> struct_declaration
Rule 137   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 138   struct_declaration -> specifier_qualifier_list SEMI
Rule 139   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 140   struct_declaration -> static_assert_declaration
Rule 141   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 142   specifier_qualifier_list -> type_specifier
Rule 143   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 144   specifier_qualifier_list -> type_qualifier
Rule 145   struct_declarator_list -> struct_declarator
Rule 146   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 147   struct_declarator -> COLON constant_expression
Rule 148   struct_declarator -> declarator COLON constant_expression
Rule 149   struct_declarator -> declarator
Rule 150   enum_specifier -> ENUM left_brace enumerator_list right_brace
Rule 151   enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace
Rule 152   enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace
Rule 153   enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
Rule 154   enum_specifier -> ENUM IDENTIFIER
Rule 155   enumerator_list -> enumerator
Rule 156   enumerator_list -> enumerator_list COMMA enumerator
Rule 157   enumerator -> enumeration_constant EQUALS constant_expression
Rule 158   enumerator -> enumeration_constant
Rule 159   type_qualifier -> CONST
Rule 160   type_qualifier -> RESTRICT
Rule 161   type_qualifier -> VOLATILE
Rule 162   function_specifier -> INLINE
Rule 163   function_specifier -> NORETURN
Rule 164   alignment_specifier -> ALIGNAS LPAREN type_name RPAREN
Rule 165   alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN
Rule 166   declarator -> pointer direct_declarator
Rule 167   declarator -> direct_declarator
Rule 168   direct_declarator -> IDENTIFIER
Rule 169   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 170   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 171   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 172   direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET
Rule 173   direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
Rule 174   arrayindex -> IDENTIFIER
Rule 175   arrayindex -> I_CONSTANT
Rule 176   direct_declarator -> LPAREN declarator RPAREN
Rule 177   direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET
Rule 178   direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 179   direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 180   direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
Rule 181   direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 182   direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 183   direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET
Rule 184   pointer -> TIMES type_qualifier_list pointer
Rule 185   pointer -> TIMES type_qualifier_list
Rule 186   pointer -> TIMES pointer
Rule 187   pointer -> TIMES
Rule 188   type_qualifier_list -> type_qualifier
Rule 189   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 190   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 191   parameter_type_list -> parameter_list
Rule 192   parameter_list -> parameter_declaration
Rule 193   parameter_list -> parameter_list COMMA parameter_declaration
Rule 194   parameter_declaration -> declaration_specifiers declarator
Rule 195   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 196   parameter_declaration -> declaration_specifiers
Rule 197   identifier_list -> IDENTIFIER
Rule 198   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 199   type_name -> specifier_qualifier_list abstract_declarator
Rule 200   type_name -> specifier_qualifier_list
Rule 201   abstract_declarator -> pointer direct_abstract_declarator
Rule 202   abstract_declarator -> pointer
Rule 203   abstract_declarator -> direct_abstract_declarator
Rule 204   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 205   direct_abstract_declarator -> LBRACKET RBRACKET
Rule 206   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 207   direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 208   direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET
Rule 209   direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 210   direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 211   direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET
Rule 212   direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET
Rule 213   direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET
Rule 214   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 215   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 216   direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
Rule 217   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
Rule 218   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 219   direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
Rule 220   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET
Rule 221   direct_abstract_declarator -> LPAREN RPAREN
Rule 222   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 223   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 224   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 225   initializer -> left_brace initializer_list right_brace
Rule 226   initializer -> left_brace initializer_list COMMA right_brace
Rule 227   initializer -> assignment_expression
Rule 228   initializer_list -> designation initializer
Rule 229   initializer_list -> initializer
Rule 230   initializer_list -> initializer_list COMMA designation initializer
Rule 231   initializer_list -> initializer_list COMMA initializer
Rule 232   designation -> designator_list EQUALS
Rule 233   designator_list -> designator
Rule 234   designator_list -> designator_list designator
Rule 235   designator -> LBRACKET constant_expression RBRACKET
Rule 236   designator -> PERIOD IDENTIFIER
Rule 237   static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
Rule 238   statement -> labeled_statement
Rule 239   statement -> compound_statement
Rule 240   statement -> expression_statement
Rule 241   statement -> selection_statement
Rule 242   statement -> iteration_statement
Rule 243   statement -> jump_statement
Rule 244   labeled_statement -> IDENTIFIER COLON statement
Rule 245   labeled_statement -> CASE constant_expression COLON statement
Rule 246   labeled_statement -> DEFAULT COLON statement
Rule 247   compound_statement -> left_brace right_brace
Rule 248   compound_statement -> left_brace block_item_list right_brace
Rule 249   block_item_list -> block_item
Rule 250   block_item_list -> block_item_list block_item
Rule 251   block_item -> declaration
Rule 252   block_item -> statement
Rule 253   expression_statement -> SEMI
Rule 254   expression_statement -> expression SEMI
Rule 255   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 256   selection_statement -> IF LPAREN expression RPAREN statement
Rule 257   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 258   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 259   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 260   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 261   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 262   iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement
Rule 263   iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement
Rule 264   jump_statement -> GOTO IDENTIFIER SEMI
Rule 265   jump_statement -> CONTINUE SEMI
Rule 266   jump_statement -> BREAK SEMI
Rule 267   jump_statement -> RETURN SEMI
Rule 268   jump_statement -> RETURN expression SEMI
Rule 269   external_declaration -> function_definition
Rule 270   external_declaration -> declaration
Rule 271   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 272   function_definition -> declaration_specifiers declarator compound_statement
Rule 273   declaration_list -> declaration
Rule 274   declaration_list -> declaration_list declaration
Rule 275   left_brace -> LBRACE
Rule 276   right_brace -> RBRACE

Terminals, with rules where they appear

ADD_ASSIGN           : 83
ALIGNAS              : 164 165
ALIGNOF              : 38
AND_ASSIGN           : 87
AND_OP               : 39 66
AUTO                 : 114
BOOL                 : 125
BREAK                : 266
CASE                 : 245
CCONST               : 10
CHAR                 : 117
COLON                : 17 18 76 147 148 244 245 246
COMMA                : 14 16 25 31 91 107 146 151 153 156 190 193 198 226 230 231 237
COMPLEX              : 126
CONDOP               : 76
CONST                : 159
CONTINUE             : 265
DEC_OP               : 27 34
DEFAULT              : 18 246
DIVIDE               : 49
DIV_ASSIGN           : 81
DO                   : 259
DOUBLE               : 122
ELLIPSIS             : 190
ELSE                 : 255
ENUM                 : 150 151 152 153 154
EQUALS               : 79 108 157 232
EQ_OP                : 63
EXTERN               : 111
FLOAT                : 121
FOR                  : 260 261 262 263
FUNC_NAME            : 13
F_CONSTANT           : 9
GENERIC              : 14
GE_OP                : 61
GOTO                 : 264
GT_OP                : 59
IDENTIFIER           : 7 11 22 23 28 29 132 133 152 153 154 168 172 173 174 197 198 236 244 264
IF                   : 255 256
IMAGINARY            : 127
INC_OP               : 26 33
INLINE               : 162
INT                  : 119
I_CONSTANT           : 8 175
LAND                 : 72
LBRACE               : 275
LBRACKET             : 28 29 29 172 173 173 177 178 179 180 181 182 183 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 235
LEFT_ASSIGN          : 85
LEFT_OP              : 55
LE_OP                : 60
LNOT                 : 44
LONG                 : 120
LOR                  : 74
LPAREN               : 5 14 20 21 24 25 37 38 46 164 165 169 170 171 176 204 221 222 223 224 237 255 256 257 258 259 260 261 262 263
LT_OP                : 58
MINUS                : 42 53
MOD                  : 50
MOD_ASSIGN           : 82
MUL_ASSIGN           : 80
NE_OP                : 64
NORETURN             : 163
NOT_OP               : 43
OR_ASSIGN            : 89
OR_OP                : 70
PERIOD               : 22 236
PLUS                 : 41 52
PTR_OP               : 23
RBRACE               : 276
RBRACKET             : 28 29 29 172 173 173 177 178 179 180 181 182 183 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 235
REGISTER             : 115
RESTRICT             : 160
RETURN               : 267 268
RIGHT_ASSIGN         : 86
RIGHT_OP             : 56
RPAREN               : 5 14 20 21 24 25 37 38 46 164 165 169 170 171 176 204 221 222 223 224 237 255 256 257 258 259 260 261 262 263
SEMI                 : 93 94 138 139 237 253 254 259 264 265 266 267 268
SHORT                : 118
SIGNED               : 123
SIZEOF               : 36 37
STATIC               : 112 178 179 181 207 208 209 215 216 218
STATIC_ASSERT        : 237
STRINGLITERAL        : 12 237
STRUCT               : 134
SUB_ASSIGN           : 84
SWITCH               : 257
THREAD_LOCAL         : 113
TIMES                : 40 48 177 180 184 185 186 187 206 214
TYPEDEF              : 110
TYPEID               : 130
UNION                : 135
UNSIGNED             : 124
VOID                 : 116
VOLATILE             : 161
WHILE                : 258 259
XOR                  : 68
XOR_ASSIGN           : 88
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 195 199 204
additive_expression  : 52 53 54 55 56
alignment_specifier  : 104 105
and_expression       : 66 67 68
argument_expression_list : 21 31
arrayindex           : 172 173 173
assignment_expression : 14 17 18 30 31 78 90 91 178 179 181 182 207 208 209 210 212 215 216 217 218 220 227
assignment_operator  : 78
block_item           : 249 250
block_item_list      : 248 250
cast_expression      : 35 46 47 48 49 50
compound_statement   : 239 271 272
conditional_expression : 76 77 92
constant             : 3
constant_expression  : 147 148 157 165 235 237 245
declaration          : 251 262 263 270 273 274
declaration_list     : 271 274
declaration_specifiers : 93 94 96 98 100 102 104 194 195 196 271 272
declarator           : 108 109 148 149 176 194 271 272
designation          : 228 230
designator           : 233 234
designator_list      : 232 234
direct_abstract_declarator : 201 203 213 214 215 216 217 218 219 220 223 224
direct_declarator    : 166 167 169 170 171 177 178 179 180 181 182 183
enum_specifier       : 129
enumeration_constant : 157 158
enumerator           : 155 156
enumerator_list      : 150 151 152 153 156
equality_expression  : 63 64 65 66
exclusive_or_expression : 68 69 70
expression           : 5 28 29 29 76 91 254 255 256 257 258 259 261 263 268
expression_statement : 240 260 260 261 261 262 263
external_declaration : 1 2
function_definition  : 269
function_specifier   : 102 103
generic_assoc_list   : 14 16
generic_association  : 15 16
generic_selection    : 6
identifier_list      : 171 198
inclusive_or_expression : 70 71 72
init_declarator      : 106 107
init_declarator_list : 94 107
initializer          : 108 228 229 230 231
initializer_list     : 24 25 225 226 230 231
iteration_statement  : 242
jump_statement       : 243
labeled_statement    : 238
left_brace           : 24 25 131 132 150 151 152 153 225 226 247 248
logical_and_expression : 72 73 74
logical_or_expression : 74 75 76
multiplicative_expression : 48 49 50 51 52 53
parameter_declaration : 192 193
parameter_list       : 190 191 193
parameter_type_list  : 169 222 224
pointer              : 166 184 186 201 202
postfix_expression   : 20 21 22 23 26 27 32
primary_expression   : 19
relational_expression : 58 59 60 61 62 63 64
right_brace          : 24 25 131 132 150 151 152 153 225 226 247 248
selection_statement  : 241
shift_expression     : 55 56 57 58 59 60 61
specifier_qualifier_list : 138 139 141 143 199 200
statement            : 244 245 246 252 255 255 256 257 258 259 260 261 262 263
static_assert_declaration : 95 140
storage_class_specifier : 96 97
string               : 4
struct_declaration   : 136 137
struct_declaration_list : 131 132 137
struct_declarator    : 145 146
struct_declarator_list : 139 146
struct_or_union      : 131 132 133
struct_or_union_specifier : 128
translation_unit     : 2 0
type_name            : 17 24 25 37 38 46 164
type_qualifier       : 100 101 143 144 188 189
type_qualifier_list  : 178 180 181 182 183 184 185 189 207 209 210 211 215 217 218 219
type_specifier       : 98 99 141 142
unary_expression     : 33 34 36 45 78
unary_operator       : 35

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (269) external_declaration -> . function_definition
    (270) external_declaration -> . declaration
    (271) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (272) function_definition -> . declaration_specifiers declarator compound_statement
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    external_declaration           shift and go to state 12
    type_specifier                 shift and go to state 13
    translation_unit               shift and go to state 40
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 4
    declaration                    shift and go to state 26
    function_definition            shift and go to state 30
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35

state 1

    (96) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (97) declaration_specifiers -> storage_class_specifier .
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    LBRACKET        reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 97 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 44

state 2

    (95) declaration -> static_assert_declaration .

    RBRACE          reduce using rule 95 (declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 95 (declaration -> static_assert_declaration .)
    IDENTIFIER      reduce using rule 95 (declaration -> static_assert_declaration .)
    CASE            reduce using rule 95 (declaration -> static_assert_declaration .)
    DEFAULT         reduce using rule 95 (declaration -> static_assert_declaration .)
    SEMI            reduce using rule 95 (declaration -> static_assert_declaration .)
    IF              reduce using rule 95 (declaration -> static_assert_declaration .)
    SWITCH          reduce using rule 95 (declaration -> static_assert_declaration .)
    WHILE           reduce using rule 95 (declaration -> static_assert_declaration .)
    DO              reduce using rule 95 (declaration -> static_assert_declaration .)
    FOR             reduce using rule 95 (declaration -> static_assert_declaration .)
    GOTO            reduce using rule 95 (declaration -> static_assert_declaration .)
    CONTINUE        reduce using rule 95 (declaration -> static_assert_declaration .)
    BREAK           reduce using rule 95 (declaration -> static_assert_declaration .)
    RETURN          reduce using rule 95 (declaration -> static_assert_declaration .)
    TYPEDEF         reduce using rule 95 (declaration -> static_assert_declaration .)
    EXTERN          reduce using rule 95 (declaration -> static_assert_declaration .)
    STATIC          reduce using rule 95 (declaration -> static_assert_declaration .)
    THREAD_LOCAL    reduce using rule 95 (declaration -> static_assert_declaration .)
    AUTO            reduce using rule 95 (declaration -> static_assert_declaration .)
    REGISTER        reduce using rule 95 (declaration -> static_assert_declaration .)
    VOID            reduce using rule 95 (declaration -> static_assert_declaration .)
    CHAR            reduce using rule 95 (declaration -> static_assert_declaration .)
    SHORT           reduce using rule 95 (declaration -> static_assert_declaration .)
    INT             reduce using rule 95 (declaration -> static_assert_declaration .)
    LONG            reduce using rule 95 (declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 95 (declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 95 (declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 95 (declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 95 (declaration -> static_assert_declaration .)
    BOOL            reduce using rule 95 (declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 95 (declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 95 (declaration -> static_assert_declaration .)
    TYPEID          reduce using rule 95 (declaration -> static_assert_declaration .)
    CONST           reduce using rule 95 (declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 95 (declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 95 (declaration -> static_assert_declaration .)
    INLINE          reduce using rule 95 (declaration -> static_assert_declaration .)
    NORETURN        reduce using rule 95 (declaration -> static_assert_declaration .)
    ALIGNAS         reduce using rule 95 (declaration -> static_assert_declaration .)
    LBRACE          reduce using rule 95 (declaration -> static_assert_declaration .)
    ENUM            reduce using rule 95 (declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 95 (declaration -> static_assert_declaration .)
    UNION           reduce using rule 95 (declaration -> static_assert_declaration .)
    INC_OP          reduce using rule 95 (declaration -> static_assert_declaration .)
    DEC_OP          reduce using rule 95 (declaration -> static_assert_declaration .)
    SIZEOF          reduce using rule 95 (declaration -> static_assert_declaration .)
    ALIGNOF         reduce using rule 95 (declaration -> static_assert_declaration .)
    LPAREN          reduce using rule 95 (declaration -> static_assert_declaration .)
    AND_OP          reduce using rule 95 (declaration -> static_assert_declaration .)
    TIMES           reduce using rule 95 (declaration -> static_assert_declaration .)
    PLUS            reduce using rule 95 (declaration -> static_assert_declaration .)
    MINUS           reduce using rule 95 (declaration -> static_assert_declaration .)
    NOT_OP          reduce using rule 95 (declaration -> static_assert_declaration .)
    LNOT            reduce using rule 95 (declaration -> static_assert_declaration .)
    I_CONSTANT      reduce using rule 95 (declaration -> static_assert_declaration .)
    F_CONSTANT      reduce using rule 95 (declaration -> static_assert_declaration .)
    CCONST          reduce using rule 95 (declaration -> static_assert_declaration .)
    STRINGLITERAL   reduce using rule 95 (declaration -> static_assert_declaration .)
    FUNC_NAME       reduce using rule 95 (declaration -> static_assert_declaration .)
    GENERIC         reduce using rule 95 (declaration -> static_assert_declaration .)
    $end            reduce using rule 95 (declaration -> static_assert_declaration .)


state 3

    (159) type_qualifier -> CONST .

    STATIC          reduce using rule 159 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 159 (type_qualifier -> CONST .)
    CONST           reduce using rule 159 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 159 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 159 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 159 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 159 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 159 (type_qualifier -> CONST .)
    ALIGNOF         reduce using rule 159 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 159 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 159 (type_qualifier -> CONST .)
    AND_OP          reduce using rule 159 (type_qualifier -> CONST .)
    TIMES           reduce using rule 159 (type_qualifier -> CONST .)
    PLUS            reduce using rule 159 (type_qualifier -> CONST .)
    MINUS           reduce using rule 159 (type_qualifier -> CONST .)
    NOT_OP          reduce using rule 159 (type_qualifier -> CONST .)
    LNOT            reduce using rule 159 (type_qualifier -> CONST .)
    I_CONSTANT      reduce using rule 159 (type_qualifier -> CONST .)
    F_CONSTANT      reduce using rule 159 (type_qualifier -> CONST .)
    CCONST          reduce using rule 159 (type_qualifier -> CONST .)
    STRINGLITERAL   reduce using rule 159 (type_qualifier -> CONST .)
    FUNC_NAME       reduce using rule 159 (type_qualifier -> CONST .)
    GENERIC         reduce using rule 159 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 159 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 159 (type_qualifier -> CONST .)
    THREAD_LOCAL    reduce using rule 159 (type_qualifier -> CONST .)
    AUTO            reduce using rule 159 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 159 (type_qualifier -> CONST .)
    VOID            reduce using rule 159 (type_qualifier -> CONST .)
    CHAR            reduce using rule 159 (type_qualifier -> CONST .)
    SHORT           reduce using rule 159 (type_qualifier -> CONST .)
    INT             reduce using rule 159 (type_qualifier -> CONST .)
    LONG            reduce using rule 159 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 159 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 159 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 159 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 159 (type_qualifier -> CONST .)
    BOOL            reduce using rule 159 (type_qualifier -> CONST .)
    COMPLEX         reduce using rule 159 (type_qualifier -> CONST .)
    IMAGINARY       reduce using rule 159 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 159 (type_qualifier -> CONST .)
    INLINE          reduce using rule 159 (type_qualifier -> CONST .)
    NORETURN        reduce using rule 159 (type_qualifier -> CONST .)
    ALIGNAS         reduce using rule 159 (type_qualifier -> CONST .)
    ENUM            reduce using rule 159 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 159 (type_qualifier -> CONST .)
    UNION           reduce using rule 159 (type_qualifier -> CONST .)
    SEMI            reduce using rule 159 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 159 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 159 (type_qualifier -> CONST .)
    COLON           reduce using rule 159 (type_qualifier -> CONST .)
    COMMA           reduce using rule 159 (type_qualifier -> CONST .)


state 4

    (271) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (272) function_definition -> declaration_specifiers . declarator compound_statement
    (93) declaration -> declaration_specifiers . SEMI
    (94) declaration -> declaration_specifiers . init_declarator_list SEMI
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (106) init_declarator_list -> . init_declarator
    (107) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (108) init_declarator -> . declarator EQUALS initializer
    (109) init_declarator -> . declarator

    SEMI            shift and go to state 47
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 53
    init_declarator_list           shift and go to state 45
    declarator                     shift and go to state 52
    pointer                        shift and go to state 46

state 5

    (128) type_specifier -> struct_or_union_specifier .

    VOID            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    COMPLEX         reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    IMAGINARY       reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    THREAD_LOCAL    reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    NORETURN        reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    ALIGNAS         reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 128 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 128 (type_specifier -> struct_or_union_specifier .)


state 6

    (116) type_specifier -> VOID .

    VOID            reduce using rule 116 (type_specifier -> VOID .)
    CHAR            reduce using rule 116 (type_specifier -> VOID .)
    SHORT           reduce using rule 116 (type_specifier -> VOID .)
    INT             reduce using rule 116 (type_specifier -> VOID .)
    LONG            reduce using rule 116 (type_specifier -> VOID .)
    FLOAT           reduce using rule 116 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 116 (type_specifier -> VOID .)
    SIGNED          reduce using rule 116 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 116 (type_specifier -> VOID .)
    BOOL            reduce using rule 116 (type_specifier -> VOID .)
    COMPLEX         reduce using rule 116 (type_specifier -> VOID .)
    IMAGINARY       reduce using rule 116 (type_specifier -> VOID .)
    TYPEID          reduce using rule 116 (type_specifier -> VOID .)
    CONST           reduce using rule 116 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 116 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 116 (type_specifier -> VOID .)
    ENUM            reduce using rule 116 (type_specifier -> VOID .)
    STRUCT          reduce using rule 116 (type_specifier -> VOID .)
    UNION           reduce using rule 116 (type_specifier -> VOID .)
    TIMES           reduce using rule 116 (type_specifier -> VOID .)
    LPAREN          reduce using rule 116 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 116 (type_specifier -> VOID .)
    RPAREN          reduce using rule 116 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 116 (type_specifier -> VOID .)
    EXTERN          reduce using rule 116 (type_specifier -> VOID .)
    STATIC          reduce using rule 116 (type_specifier -> VOID .)
    THREAD_LOCAL    reduce using rule 116 (type_specifier -> VOID .)
    AUTO            reduce using rule 116 (type_specifier -> VOID .)
    REGISTER        reduce using rule 116 (type_specifier -> VOID .)
    INLINE          reduce using rule 116 (type_specifier -> VOID .)
    NORETURN        reduce using rule 116 (type_specifier -> VOID .)
    ALIGNAS         reduce using rule 116 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 116 (type_specifier -> VOID .)
    COMMA           reduce using rule 116 (type_specifier -> VOID .)
    SEMI            reduce using rule 116 (type_specifier -> VOID .)
    COLON           reduce using rule 116 (type_specifier -> VOID .)


state 7

    (117) type_specifier -> CHAR .

    VOID            reduce using rule 117 (type_specifier -> CHAR .)
    CHAR            reduce using rule 117 (type_specifier -> CHAR .)
    SHORT           reduce using rule 117 (type_specifier -> CHAR .)
    INT             reduce using rule 117 (type_specifier -> CHAR .)
    LONG            reduce using rule 117 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 117 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 117 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 117 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 117 (type_specifier -> CHAR .)
    BOOL            reduce using rule 117 (type_specifier -> CHAR .)
    COMPLEX         reduce using rule 117 (type_specifier -> CHAR .)
    IMAGINARY       reduce using rule 117 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 117 (type_specifier -> CHAR .)
    CONST           reduce using rule 117 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 117 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 117 (type_specifier -> CHAR .)
    ENUM            reduce using rule 117 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 117 (type_specifier -> CHAR .)
    UNION           reduce using rule 117 (type_specifier -> CHAR .)
    TIMES           reduce using rule 117 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 117 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 117 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 117 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 117 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 117 (type_specifier -> CHAR .)
    STATIC          reduce using rule 117 (type_specifier -> CHAR .)
    THREAD_LOCAL    reduce using rule 117 (type_specifier -> CHAR .)
    AUTO            reduce using rule 117 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 117 (type_specifier -> CHAR .)
    INLINE          reduce using rule 117 (type_specifier -> CHAR .)
    NORETURN        reduce using rule 117 (type_specifier -> CHAR .)
    ALIGNAS         reduce using rule 117 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 117 (type_specifier -> CHAR .)
    COMMA           reduce using rule 117 (type_specifier -> CHAR .)
    SEMI            reduce using rule 117 (type_specifier -> CHAR .)
    COLON           reduce using rule 117 (type_specifier -> CHAR .)


state 8

    (118) type_specifier -> SHORT .

    VOID            reduce using rule 118 (type_specifier -> SHORT .)
    CHAR            reduce using rule 118 (type_specifier -> SHORT .)
    SHORT           reduce using rule 118 (type_specifier -> SHORT .)
    INT             reduce using rule 118 (type_specifier -> SHORT .)
    LONG            reduce using rule 118 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 118 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 118 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 118 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 118 (type_specifier -> SHORT .)
    BOOL            reduce using rule 118 (type_specifier -> SHORT .)
    COMPLEX         reduce using rule 118 (type_specifier -> SHORT .)
    IMAGINARY       reduce using rule 118 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 118 (type_specifier -> SHORT .)
    CONST           reduce using rule 118 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 118 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 118 (type_specifier -> SHORT .)
    ENUM            reduce using rule 118 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 118 (type_specifier -> SHORT .)
    UNION           reduce using rule 118 (type_specifier -> SHORT .)
    TIMES           reduce using rule 118 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 118 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 118 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 118 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 118 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 118 (type_specifier -> SHORT .)
    STATIC          reduce using rule 118 (type_specifier -> SHORT .)
    THREAD_LOCAL    reduce using rule 118 (type_specifier -> SHORT .)
    AUTO            reduce using rule 118 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 118 (type_specifier -> SHORT .)
    INLINE          reduce using rule 118 (type_specifier -> SHORT .)
    NORETURN        reduce using rule 118 (type_specifier -> SHORT .)
    ALIGNAS         reduce using rule 118 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 118 (type_specifier -> SHORT .)
    COMMA           reduce using rule 118 (type_specifier -> SHORT .)
    SEMI            reduce using rule 118 (type_specifier -> SHORT .)
    COLON           reduce using rule 118 (type_specifier -> SHORT .)


state 9

    (112) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 112 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 112 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 112 (storage_class_specifier -> STATIC .)
    THREAD_LOCAL    reduce using rule 112 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 112 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 112 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 112 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 112 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 112 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 112 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 112 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 112 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 112 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 112 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 112 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 112 (storage_class_specifier -> STATIC .)
    COMPLEX         reduce using rule 112 (storage_class_specifier -> STATIC .)
    IMAGINARY       reduce using rule 112 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 112 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 112 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 112 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 112 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 112 (storage_class_specifier -> STATIC .)
    NORETURN        reduce using rule 112 (storage_class_specifier -> STATIC .)
    ALIGNAS         reduce using rule 112 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 112 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 112 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 112 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 112 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 112 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 112 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 112 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 112 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 112 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 112 (storage_class_specifier -> STATIC .)


state 10

    (111) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 111 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    THREAD_LOCAL    reduce using rule 111 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 111 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    COMPLEX         reduce using rule 111 (storage_class_specifier -> EXTERN .)
    IMAGINARY       reduce using rule 111 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    NORETURN        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    ALIGNAS         reduce using rule 111 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 111 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 111 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 111 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 111 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 111 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 111 (storage_class_specifier -> EXTERN .)


state 11

    (102) declaration_specifiers -> function_specifier . declaration_specifiers
    (103) declaration_specifiers -> function_specifier .
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 103 (declaration_specifiers -> function_specifier .)
    TIMES           reduce using rule 103 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 103 (declaration_specifiers -> function_specifier .)
    LPAREN          reduce using rule 103 (declaration_specifiers -> function_specifier .)
    LBRACKET        reduce using rule 103 (declaration_specifiers -> function_specifier .)
    COMMA           reduce using rule 103 (declaration_specifiers -> function_specifier .)
    RPAREN          reduce using rule 103 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 54

state 12

    (1) translation_unit -> external_declaration .

    STATIC_ASSERT   reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    THREAD_LOCAL    reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    COMPLEX         reduce using rule 1 (translation_unit -> external_declaration .)
    IMAGINARY       reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    NORETURN        reduce using rule 1 (translation_unit -> external_declaration .)
    ALIGNAS         reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 13

    (98) declaration_specifiers -> type_specifier . declaration_specifiers
    (99) declaration_specifiers -> type_specifier .
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 99 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 99 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 99 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 99 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 99 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 99 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 99 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 55

state 14

    (115) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 115 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    THREAD_LOCAL    reduce using rule 115 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 115 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    COMPLEX         reduce using rule 115 (storage_class_specifier -> REGISTER .)
    IMAGINARY       reduce using rule 115 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    NORETURN        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    ALIGNAS         reduce using rule 115 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 115 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 115 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 115 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 115 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 115 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 115 (storage_class_specifier -> REGISTER .)


state 15

    (124) type_specifier -> UNSIGNED .

    VOID            reduce using rule 124 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 124 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 124 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 124 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 124 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 124 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 124 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 124 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 124 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 124 (type_specifier -> UNSIGNED .)
    COMPLEX         reduce using rule 124 (type_specifier -> UNSIGNED .)
    IMAGINARY       reduce using rule 124 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 124 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 124 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 124 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 124 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 124 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 124 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 124 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 124 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 124 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 124 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 124 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 124 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 124 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 124 (type_specifier -> UNSIGNED .)
    THREAD_LOCAL    reduce using rule 124 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 124 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 124 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 124 (type_specifier -> UNSIGNED .)
    NORETURN        reduce using rule 124 (type_specifier -> UNSIGNED .)
    ALIGNAS         reduce using rule 124 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 124 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 124 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 124 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 124 (type_specifier -> UNSIGNED .)


state 16

    (120) type_specifier -> LONG .

    VOID            reduce using rule 120 (type_specifier -> LONG .)
    CHAR            reduce using rule 120 (type_specifier -> LONG .)
    SHORT           reduce using rule 120 (type_specifier -> LONG .)
    INT             reduce using rule 120 (type_specifier -> LONG .)
    LONG            reduce using rule 120 (type_specifier -> LONG .)
    FLOAT           reduce using rule 120 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 120 (type_specifier -> LONG .)
    SIGNED          reduce using rule 120 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 120 (type_specifier -> LONG .)
    BOOL            reduce using rule 120 (type_specifier -> LONG .)
    COMPLEX         reduce using rule 120 (type_specifier -> LONG .)
    IMAGINARY       reduce using rule 120 (type_specifier -> LONG .)
    TYPEID          reduce using rule 120 (type_specifier -> LONG .)
    CONST           reduce using rule 120 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 120 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 120 (type_specifier -> LONG .)
    ENUM            reduce using rule 120 (type_specifier -> LONG .)
    STRUCT          reduce using rule 120 (type_specifier -> LONG .)
    UNION           reduce using rule 120 (type_specifier -> LONG .)
    TIMES           reduce using rule 120 (type_specifier -> LONG .)
    LPAREN          reduce using rule 120 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 120 (type_specifier -> LONG .)
    RPAREN          reduce using rule 120 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 120 (type_specifier -> LONG .)
    EXTERN          reduce using rule 120 (type_specifier -> LONG .)
    STATIC          reduce using rule 120 (type_specifier -> LONG .)
    THREAD_LOCAL    reduce using rule 120 (type_specifier -> LONG .)
    AUTO            reduce using rule 120 (type_specifier -> LONG .)
    REGISTER        reduce using rule 120 (type_specifier -> LONG .)
    INLINE          reduce using rule 120 (type_specifier -> LONG .)
    NORETURN        reduce using rule 120 (type_specifier -> LONG .)
    ALIGNAS         reduce using rule 120 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 120 (type_specifier -> LONG .)
    COMMA           reduce using rule 120 (type_specifier -> LONG .)
    SEMI            reduce using rule 120 (type_specifier -> LONG .)
    COLON           reduce using rule 120 (type_specifier -> LONG .)


state 17

    (161) type_qualifier -> VOLATILE .

    STATIC          reduce using rule 161 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 161 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 161 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 161 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 161 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 161 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 161 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 161 (type_qualifier -> VOLATILE .)
    ALIGNOF         reduce using rule 161 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 161 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 161 (type_qualifier -> VOLATILE .)
    AND_OP          reduce using rule 161 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 161 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 161 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 161 (type_qualifier -> VOLATILE .)
    NOT_OP          reduce using rule 161 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 161 (type_qualifier -> VOLATILE .)
    I_CONSTANT      reduce using rule 161 (type_qualifier -> VOLATILE .)
    F_CONSTANT      reduce using rule 161 (type_qualifier -> VOLATILE .)
    CCONST          reduce using rule 161 (type_qualifier -> VOLATILE .)
    STRINGLITERAL   reduce using rule 161 (type_qualifier -> VOLATILE .)
    FUNC_NAME       reduce using rule 161 (type_qualifier -> VOLATILE .)
    GENERIC         reduce using rule 161 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 161 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 161 (type_qualifier -> VOLATILE .)
    THREAD_LOCAL    reduce using rule 161 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 161 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 161 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 161 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 161 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 161 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 161 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 161 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 161 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 161 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 161 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 161 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 161 (type_qualifier -> VOLATILE .)
    COMPLEX         reduce using rule 161 (type_qualifier -> VOLATILE .)
    IMAGINARY       reduce using rule 161 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 161 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 161 (type_qualifier -> VOLATILE .)
    NORETURN        reduce using rule 161 (type_qualifier -> VOLATILE .)
    ALIGNAS         reduce using rule 161 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 161 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 161 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 161 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 161 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 161 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 161 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 161 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 161 (type_qualifier -> VOLATILE .)


state 18

    (127) type_specifier -> IMAGINARY .

    VOID            reduce using rule 127 (type_specifier -> IMAGINARY .)
    CHAR            reduce using rule 127 (type_specifier -> IMAGINARY .)
    SHORT           reduce using rule 127 (type_specifier -> IMAGINARY .)
    INT             reduce using rule 127 (type_specifier -> IMAGINARY .)
    LONG            reduce using rule 127 (type_specifier -> IMAGINARY .)
    FLOAT           reduce using rule 127 (type_specifier -> IMAGINARY .)
    DOUBLE          reduce using rule 127 (type_specifier -> IMAGINARY .)
    SIGNED          reduce using rule 127 (type_specifier -> IMAGINARY .)
    UNSIGNED        reduce using rule 127 (type_specifier -> IMAGINARY .)
    BOOL            reduce using rule 127 (type_specifier -> IMAGINARY .)
    COMPLEX         reduce using rule 127 (type_specifier -> IMAGINARY .)
    IMAGINARY       reduce using rule 127 (type_specifier -> IMAGINARY .)
    TYPEID          reduce using rule 127 (type_specifier -> IMAGINARY .)
    CONST           reduce using rule 127 (type_specifier -> IMAGINARY .)
    RESTRICT        reduce using rule 127 (type_specifier -> IMAGINARY .)
    VOLATILE        reduce using rule 127 (type_specifier -> IMAGINARY .)
    ENUM            reduce using rule 127 (type_specifier -> IMAGINARY .)
    STRUCT          reduce using rule 127 (type_specifier -> IMAGINARY .)
    UNION           reduce using rule 127 (type_specifier -> IMAGINARY .)
    TIMES           reduce using rule 127 (type_specifier -> IMAGINARY .)
    LPAREN          reduce using rule 127 (type_specifier -> IMAGINARY .)
    LBRACKET        reduce using rule 127 (type_specifier -> IMAGINARY .)
    RPAREN          reduce using rule 127 (type_specifier -> IMAGINARY .)
    TYPEDEF         reduce using rule 127 (type_specifier -> IMAGINARY .)
    EXTERN          reduce using rule 127 (type_specifier -> IMAGINARY .)
    STATIC          reduce using rule 127 (type_specifier -> IMAGINARY .)
    THREAD_LOCAL    reduce using rule 127 (type_specifier -> IMAGINARY .)
    AUTO            reduce using rule 127 (type_specifier -> IMAGINARY .)
    REGISTER        reduce using rule 127 (type_specifier -> IMAGINARY .)
    INLINE          reduce using rule 127 (type_specifier -> IMAGINARY .)
    NORETURN        reduce using rule 127 (type_specifier -> IMAGINARY .)
    ALIGNAS         reduce using rule 127 (type_specifier -> IMAGINARY .)
    IDENTIFIER      reduce using rule 127 (type_specifier -> IMAGINARY .)
    COMMA           reduce using rule 127 (type_specifier -> IMAGINARY .)
    SEMI            reduce using rule 127 (type_specifier -> IMAGINARY .)
    COLON           reduce using rule 127 (type_specifier -> IMAGINARY .)


state 19

    (110) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    THREAD_LOCAL    reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    COMPLEX         reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    IMAGINARY       reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    NORETURN        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    ALIGNAS         reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 110 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 110 (storage_class_specifier -> TYPEDEF .)


state 20

    (163) function_specifier -> NORETURN .

    TYPEDEF         reduce using rule 163 (function_specifier -> NORETURN .)
    EXTERN          reduce using rule 163 (function_specifier -> NORETURN .)
    STATIC          reduce using rule 163 (function_specifier -> NORETURN .)
    THREAD_LOCAL    reduce using rule 163 (function_specifier -> NORETURN .)
    AUTO            reduce using rule 163 (function_specifier -> NORETURN .)
    REGISTER        reduce using rule 163 (function_specifier -> NORETURN .)
    VOID            reduce using rule 163 (function_specifier -> NORETURN .)
    CHAR            reduce using rule 163 (function_specifier -> NORETURN .)
    SHORT           reduce using rule 163 (function_specifier -> NORETURN .)
    INT             reduce using rule 163 (function_specifier -> NORETURN .)
    LONG            reduce using rule 163 (function_specifier -> NORETURN .)
    FLOAT           reduce using rule 163 (function_specifier -> NORETURN .)
    DOUBLE          reduce using rule 163 (function_specifier -> NORETURN .)
    SIGNED          reduce using rule 163 (function_specifier -> NORETURN .)
    UNSIGNED        reduce using rule 163 (function_specifier -> NORETURN .)
    BOOL            reduce using rule 163 (function_specifier -> NORETURN .)
    COMPLEX         reduce using rule 163 (function_specifier -> NORETURN .)
    IMAGINARY       reduce using rule 163 (function_specifier -> NORETURN .)
    TYPEID          reduce using rule 163 (function_specifier -> NORETURN .)
    CONST           reduce using rule 163 (function_specifier -> NORETURN .)
    RESTRICT        reduce using rule 163 (function_specifier -> NORETURN .)
    VOLATILE        reduce using rule 163 (function_specifier -> NORETURN .)
    INLINE          reduce using rule 163 (function_specifier -> NORETURN .)
    NORETURN        reduce using rule 163 (function_specifier -> NORETURN .)
    ALIGNAS         reduce using rule 163 (function_specifier -> NORETURN .)
    ENUM            reduce using rule 163 (function_specifier -> NORETURN .)
    STRUCT          reduce using rule 163 (function_specifier -> NORETURN .)
    UNION           reduce using rule 163 (function_specifier -> NORETURN .)
    SEMI            reduce using rule 163 (function_specifier -> NORETURN .)
    TIMES           reduce using rule 163 (function_specifier -> NORETURN .)
    IDENTIFIER      reduce using rule 163 (function_specifier -> NORETURN .)
    LPAREN          reduce using rule 163 (function_specifier -> NORETURN .)
    LBRACKET        reduce using rule 163 (function_specifier -> NORETURN .)
    COMMA           reduce using rule 163 (function_specifier -> NORETURN .)
    RPAREN          reduce using rule 163 (function_specifier -> NORETURN .)


state 21

    (135) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 135 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 135 (struct_or_union -> UNION .)


state 22

    (114) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 114 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 114 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 114 (storage_class_specifier -> AUTO .)
    THREAD_LOCAL    reduce using rule 114 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 114 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 114 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 114 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 114 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 114 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 114 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 114 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 114 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 114 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 114 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 114 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 114 (storage_class_specifier -> AUTO .)
    COMPLEX         reduce using rule 114 (storage_class_specifier -> AUTO .)
    IMAGINARY       reduce using rule 114 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 114 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 114 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 114 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 114 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 114 (storage_class_specifier -> AUTO .)
    NORETURN        reduce using rule 114 (storage_class_specifier -> AUTO .)
    ALIGNAS         reduce using rule 114 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 114 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 114 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 114 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 114 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 114 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 114 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 114 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 114 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 114 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 114 (storage_class_specifier -> AUTO .)


state 23

    (164) alignment_specifier -> ALIGNAS . LPAREN type_name RPAREN
    (165) alignment_specifier -> ALIGNAS . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 56


state 24

    (150) enum_specifier -> ENUM . left_brace enumerator_list right_brace
    (151) enum_specifier -> ENUM . left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> ENUM . IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> ENUM . IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> ENUM . IDENTIFIER
    (275) left_brace -> . LBRACE

    IDENTIFIER      shift and go to state 59
    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 58

state 25

    (113) storage_class_specifier -> THREAD_LOCAL .

    TYPEDEF         reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    EXTERN          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    STATIC          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    THREAD_LOCAL    reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    AUTO            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    REGISTER        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    VOID            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    CHAR            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    SHORT           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    INT             reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    LONG            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    FLOAT           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    DOUBLE          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    SIGNED          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    UNSIGNED        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    BOOL            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    COMPLEX         reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    IMAGINARY       reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    TYPEID          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    CONST           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    RESTRICT        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    VOLATILE        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    INLINE          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    NORETURN        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    ALIGNAS         reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    ENUM            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    STRUCT          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    UNION           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    TIMES           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    IDENTIFIER      reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    LPAREN          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    LBRACKET        reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    COMMA           reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    RPAREN          reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)
    SEMI            reduce using rule 113 (storage_class_specifier -> THREAD_LOCAL .)


state 26

    (270) external_declaration -> declaration .

    STATIC_ASSERT   reduce using rule 270 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 270 (external_declaration -> declaration .)
    EXTERN          reduce using rule 270 (external_declaration -> declaration .)
    STATIC          reduce using rule 270 (external_declaration -> declaration .)
    THREAD_LOCAL    reduce using rule 270 (external_declaration -> declaration .)
    AUTO            reduce using rule 270 (external_declaration -> declaration .)
    REGISTER        reduce using rule 270 (external_declaration -> declaration .)
    VOID            reduce using rule 270 (external_declaration -> declaration .)
    CHAR            reduce using rule 270 (external_declaration -> declaration .)
    SHORT           reduce using rule 270 (external_declaration -> declaration .)
    INT             reduce using rule 270 (external_declaration -> declaration .)
    LONG            reduce using rule 270 (external_declaration -> declaration .)
    FLOAT           reduce using rule 270 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 270 (external_declaration -> declaration .)
    SIGNED          reduce using rule 270 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 270 (external_declaration -> declaration .)
    BOOL            reduce using rule 270 (external_declaration -> declaration .)
    COMPLEX         reduce using rule 270 (external_declaration -> declaration .)
    IMAGINARY       reduce using rule 270 (external_declaration -> declaration .)
    TYPEID          reduce using rule 270 (external_declaration -> declaration .)
    CONST           reduce using rule 270 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 270 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 270 (external_declaration -> declaration .)
    INLINE          reduce using rule 270 (external_declaration -> declaration .)
    NORETURN        reduce using rule 270 (external_declaration -> declaration .)
    ALIGNAS         reduce using rule 270 (external_declaration -> declaration .)
    ENUM            reduce using rule 270 (external_declaration -> declaration .)
    STRUCT          reduce using rule 270 (external_declaration -> declaration .)
    UNION           reduce using rule 270 (external_declaration -> declaration .)
    $end            reduce using rule 270 (external_declaration -> declaration .)


state 27

    (160) type_qualifier -> RESTRICT .

    STATIC          reduce using rule 160 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 160 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 160 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 160 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 160 (type_qualifier -> RESTRICT .)
    INC_OP          reduce using rule 160 (type_qualifier -> RESTRICT .)
    DEC_OP          reduce using rule 160 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 160 (type_qualifier -> RESTRICT .)
    ALIGNOF         reduce using rule 160 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 160 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 160 (type_qualifier -> RESTRICT .)
    AND_OP          reduce using rule 160 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 160 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 160 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 160 (type_qualifier -> RESTRICT .)
    NOT_OP          reduce using rule 160 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 160 (type_qualifier -> RESTRICT .)
    I_CONSTANT      reduce using rule 160 (type_qualifier -> RESTRICT .)
    F_CONSTANT      reduce using rule 160 (type_qualifier -> RESTRICT .)
    CCONST          reduce using rule 160 (type_qualifier -> RESTRICT .)
    STRINGLITERAL   reduce using rule 160 (type_qualifier -> RESTRICT .)
    FUNC_NAME       reduce using rule 160 (type_qualifier -> RESTRICT .)
    GENERIC         reduce using rule 160 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 160 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 160 (type_qualifier -> RESTRICT .)
    THREAD_LOCAL    reduce using rule 160 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 160 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 160 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 160 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 160 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 160 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 160 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 160 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 160 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 160 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 160 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 160 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 160 (type_qualifier -> RESTRICT .)
    COMPLEX         reduce using rule 160 (type_qualifier -> RESTRICT .)
    IMAGINARY       reduce using rule 160 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 160 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 160 (type_qualifier -> RESTRICT .)
    NORETURN        reduce using rule 160 (type_qualifier -> RESTRICT .)
    ALIGNAS         reduce using rule 160 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 160 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 160 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 160 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 160 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 160 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 160 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 160 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 160 (type_qualifier -> RESTRICT .)


state 28

    (130) type_specifier -> TYPEID .

    VOID            reduce using rule 130 (type_specifier -> TYPEID .)
    CHAR            reduce using rule 130 (type_specifier -> TYPEID .)
    SHORT           reduce using rule 130 (type_specifier -> TYPEID .)
    INT             reduce using rule 130 (type_specifier -> TYPEID .)
    LONG            reduce using rule 130 (type_specifier -> TYPEID .)
    FLOAT           reduce using rule 130 (type_specifier -> TYPEID .)
    DOUBLE          reduce using rule 130 (type_specifier -> TYPEID .)
    SIGNED          reduce using rule 130 (type_specifier -> TYPEID .)
    UNSIGNED        reduce using rule 130 (type_specifier -> TYPEID .)
    BOOL            reduce using rule 130 (type_specifier -> TYPEID .)
    COMPLEX         reduce using rule 130 (type_specifier -> TYPEID .)
    IMAGINARY       reduce using rule 130 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 130 (type_specifier -> TYPEID .)
    CONST           reduce using rule 130 (type_specifier -> TYPEID .)
    RESTRICT        reduce using rule 130 (type_specifier -> TYPEID .)
    VOLATILE        reduce using rule 130 (type_specifier -> TYPEID .)
    ENUM            reduce using rule 130 (type_specifier -> TYPEID .)
    STRUCT          reduce using rule 130 (type_specifier -> TYPEID .)
    UNION           reduce using rule 130 (type_specifier -> TYPEID .)
    TIMES           reduce using rule 130 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 130 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 130 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 130 (type_specifier -> TYPEID .)
    TYPEDEF         reduce using rule 130 (type_specifier -> TYPEID .)
    EXTERN          reduce using rule 130 (type_specifier -> TYPEID .)
    STATIC          reduce using rule 130 (type_specifier -> TYPEID .)
    THREAD_LOCAL    reduce using rule 130 (type_specifier -> TYPEID .)
    AUTO            reduce using rule 130 (type_specifier -> TYPEID .)
    REGISTER        reduce using rule 130 (type_specifier -> TYPEID .)
    INLINE          reduce using rule 130 (type_specifier -> TYPEID .)
    NORETURN        reduce using rule 130 (type_specifier -> TYPEID .)
    ALIGNAS         reduce using rule 130 (type_specifier -> TYPEID .)
    IDENTIFIER      reduce using rule 130 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 130 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 130 (type_specifier -> TYPEID .)
    COLON           reduce using rule 130 (type_specifier -> TYPEID .)


state 29

    (237) static_assert_declaration -> STATIC_ASSERT . LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI

    LPAREN          shift and go to state 60


state 30

    (269) external_declaration -> function_definition .

    STATIC_ASSERT   reduce using rule 269 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 269 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 269 (external_declaration -> function_definition .)
    STATIC          reduce using rule 269 (external_declaration -> function_definition .)
    THREAD_LOCAL    reduce using rule 269 (external_declaration -> function_definition .)
    AUTO            reduce using rule 269 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 269 (external_declaration -> function_definition .)
    VOID            reduce using rule 269 (external_declaration -> function_definition .)
    CHAR            reduce using rule 269 (external_declaration -> function_definition .)
    SHORT           reduce using rule 269 (external_declaration -> function_definition .)
    INT             reduce using rule 269 (external_declaration -> function_definition .)
    LONG            reduce using rule 269 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 269 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 269 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 269 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 269 (external_declaration -> function_definition .)
    BOOL            reduce using rule 269 (external_declaration -> function_definition .)
    COMPLEX         reduce using rule 269 (external_declaration -> function_definition .)
    IMAGINARY       reduce using rule 269 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 269 (external_declaration -> function_definition .)
    CONST           reduce using rule 269 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 269 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 269 (external_declaration -> function_definition .)
    INLINE          reduce using rule 269 (external_declaration -> function_definition .)
    NORETURN        reduce using rule 269 (external_declaration -> function_definition .)
    ALIGNAS         reduce using rule 269 (external_declaration -> function_definition .)
    ENUM            reduce using rule 269 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 269 (external_declaration -> function_definition .)
    UNION           reduce using rule 269 (external_declaration -> function_definition .)
    $end            reduce using rule 269 (external_declaration -> function_definition .)


state 31

    (134) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 134 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 134 (struct_or_union -> STRUCT .)


state 32

    (119) type_specifier -> INT .

    VOID            reduce using rule 119 (type_specifier -> INT .)
    CHAR            reduce using rule 119 (type_specifier -> INT .)
    SHORT           reduce using rule 119 (type_specifier -> INT .)
    INT             reduce using rule 119 (type_specifier -> INT .)
    LONG            reduce using rule 119 (type_specifier -> INT .)
    FLOAT           reduce using rule 119 (type_specifier -> INT .)
    DOUBLE          reduce using rule 119 (type_specifier -> INT .)
    SIGNED          reduce using rule 119 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 119 (type_specifier -> INT .)
    BOOL            reduce using rule 119 (type_specifier -> INT .)
    COMPLEX         reduce using rule 119 (type_specifier -> INT .)
    IMAGINARY       reduce using rule 119 (type_specifier -> INT .)
    TYPEID          reduce using rule 119 (type_specifier -> INT .)
    CONST           reduce using rule 119 (type_specifier -> INT .)
    RESTRICT        reduce using rule 119 (type_specifier -> INT .)
    VOLATILE        reduce using rule 119 (type_specifier -> INT .)
    ENUM            reduce using rule 119 (type_specifier -> INT .)
    STRUCT          reduce using rule 119 (type_specifier -> INT .)
    UNION           reduce using rule 119 (type_specifier -> INT .)
    TIMES           reduce using rule 119 (type_specifier -> INT .)
    LPAREN          reduce using rule 119 (type_specifier -> INT .)
    LBRACKET        reduce using rule 119 (type_specifier -> INT .)
    RPAREN          reduce using rule 119 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 119 (type_specifier -> INT .)
    EXTERN          reduce using rule 119 (type_specifier -> INT .)
    STATIC          reduce using rule 119 (type_specifier -> INT .)
    THREAD_LOCAL    reduce using rule 119 (type_specifier -> INT .)
    AUTO            reduce using rule 119 (type_specifier -> INT .)
    REGISTER        reduce using rule 119 (type_specifier -> INT .)
    INLINE          reduce using rule 119 (type_specifier -> INT .)
    NORETURN        reduce using rule 119 (type_specifier -> INT .)
    ALIGNAS         reduce using rule 119 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 119 (type_specifier -> INT .)
    COMMA           reduce using rule 119 (type_specifier -> INT .)
    SEMI            reduce using rule 119 (type_specifier -> INT .)
    COLON           reduce using rule 119 (type_specifier -> INT .)


state 33

    (122) type_specifier -> DOUBLE .

    VOID            reduce using rule 122 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 122 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 122 (type_specifier -> DOUBLE .)
    INT             reduce using rule 122 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 122 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 122 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 122 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 122 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 122 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 122 (type_specifier -> DOUBLE .)
    COMPLEX         reduce using rule 122 (type_specifier -> DOUBLE .)
    IMAGINARY       reduce using rule 122 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 122 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 122 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 122 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 122 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 122 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 122 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 122 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 122 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 122 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 122 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 122 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 122 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 122 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 122 (type_specifier -> DOUBLE .)
    THREAD_LOCAL    reduce using rule 122 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 122 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 122 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 122 (type_specifier -> DOUBLE .)
    NORETURN        reduce using rule 122 (type_specifier -> DOUBLE .)
    ALIGNAS         reduce using rule 122 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 122 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 122 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 122 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 122 (type_specifier -> DOUBLE .)


state 34

    (100) declaration_specifiers -> type_qualifier . declaration_specifiers
    (101) declaration_specifiers -> type_qualifier .
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 101 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 61

state 35

    (104) declaration_specifiers -> alignment_specifier . declaration_specifiers
    (105) declaration_specifiers -> alignment_specifier .
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    TIMES           reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    IDENTIFIER      reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    LPAREN          reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    LBRACKET        reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    COMMA           reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    RPAREN          reduce using rule 105 (declaration_specifiers -> alignment_specifier .)
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 62

state 36

    (123) type_specifier -> SIGNED .

    VOID            reduce using rule 123 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 123 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 123 (type_specifier -> SIGNED .)
    INT             reduce using rule 123 (type_specifier -> SIGNED .)
    LONG            reduce using rule 123 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 123 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 123 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 123 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 123 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 123 (type_specifier -> SIGNED .)
    COMPLEX         reduce using rule 123 (type_specifier -> SIGNED .)
    IMAGINARY       reduce using rule 123 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 123 (type_specifier -> SIGNED .)
    CONST           reduce using rule 123 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 123 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 123 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 123 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 123 (type_specifier -> SIGNED .)
    UNION           reduce using rule 123 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 123 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 123 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 123 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 123 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 123 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 123 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 123 (type_specifier -> SIGNED .)
    THREAD_LOCAL    reduce using rule 123 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 123 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 123 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 123 (type_specifier -> SIGNED .)
    NORETURN        reduce using rule 123 (type_specifier -> SIGNED .)
    ALIGNAS         reduce using rule 123 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 123 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 123 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 123 (type_specifier -> SIGNED .)
    COLON           reduce using rule 123 (type_specifier -> SIGNED .)


state 37

    (129) type_specifier -> enum_specifier .

    VOID            reduce using rule 129 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 129 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 129 (type_specifier -> enum_specifier .)
    INT             reduce using rule 129 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 129 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 129 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 129 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 129 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 129 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 129 (type_specifier -> enum_specifier .)
    COMPLEX         reduce using rule 129 (type_specifier -> enum_specifier .)
    IMAGINARY       reduce using rule 129 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 129 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 129 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 129 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 129 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 129 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 129 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 129 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 129 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 129 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 129 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 129 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 129 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 129 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 129 (type_specifier -> enum_specifier .)
    THREAD_LOCAL    reduce using rule 129 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 129 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 129 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 129 (type_specifier -> enum_specifier .)
    NORETURN        reduce using rule 129 (type_specifier -> enum_specifier .)
    ALIGNAS         reduce using rule 129 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 129 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 129 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 129 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 129 (type_specifier -> enum_specifier .)


state 38

    (126) type_specifier -> COMPLEX .

    VOID            reduce using rule 126 (type_specifier -> COMPLEX .)
    CHAR            reduce using rule 126 (type_specifier -> COMPLEX .)
    SHORT           reduce using rule 126 (type_specifier -> COMPLEX .)
    INT             reduce using rule 126 (type_specifier -> COMPLEX .)
    LONG            reduce using rule 126 (type_specifier -> COMPLEX .)
    FLOAT           reduce using rule 126 (type_specifier -> COMPLEX .)
    DOUBLE          reduce using rule 126 (type_specifier -> COMPLEX .)
    SIGNED          reduce using rule 126 (type_specifier -> COMPLEX .)
    UNSIGNED        reduce using rule 126 (type_specifier -> COMPLEX .)
    BOOL            reduce using rule 126 (type_specifier -> COMPLEX .)
    COMPLEX         reduce using rule 126 (type_specifier -> COMPLEX .)
    IMAGINARY       reduce using rule 126 (type_specifier -> COMPLEX .)
    TYPEID          reduce using rule 126 (type_specifier -> COMPLEX .)
    CONST           reduce using rule 126 (type_specifier -> COMPLEX .)
    RESTRICT        reduce using rule 126 (type_specifier -> COMPLEX .)
    VOLATILE        reduce using rule 126 (type_specifier -> COMPLEX .)
    ENUM            reduce using rule 126 (type_specifier -> COMPLEX .)
    STRUCT          reduce using rule 126 (type_specifier -> COMPLEX .)
    UNION           reduce using rule 126 (type_specifier -> COMPLEX .)
    TIMES           reduce using rule 126 (type_specifier -> COMPLEX .)
    LPAREN          reduce using rule 126 (type_specifier -> COMPLEX .)
    LBRACKET        reduce using rule 126 (type_specifier -> COMPLEX .)
    RPAREN          reduce using rule 126 (type_specifier -> COMPLEX .)
    TYPEDEF         reduce using rule 126 (type_specifier -> COMPLEX .)
    EXTERN          reduce using rule 126 (type_specifier -> COMPLEX .)
    STATIC          reduce using rule 126 (type_specifier -> COMPLEX .)
    THREAD_LOCAL    reduce using rule 126 (type_specifier -> COMPLEX .)
    AUTO            reduce using rule 126 (type_specifier -> COMPLEX .)
    REGISTER        reduce using rule 126 (type_specifier -> COMPLEX .)
    INLINE          reduce using rule 126 (type_specifier -> COMPLEX .)
    NORETURN        reduce using rule 126 (type_specifier -> COMPLEX .)
    ALIGNAS         reduce using rule 126 (type_specifier -> COMPLEX .)
    IDENTIFIER      reduce using rule 126 (type_specifier -> COMPLEX .)
    COMMA           reduce using rule 126 (type_specifier -> COMPLEX .)
    SEMI            reduce using rule 126 (type_specifier -> COMPLEX .)
    COLON           reduce using rule 126 (type_specifier -> COMPLEX .)


state 39

    (125) type_specifier -> BOOL .

    VOID            reduce using rule 125 (type_specifier -> BOOL .)
    CHAR            reduce using rule 125 (type_specifier -> BOOL .)
    SHORT           reduce using rule 125 (type_specifier -> BOOL .)
    INT             reduce using rule 125 (type_specifier -> BOOL .)
    LONG            reduce using rule 125 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 125 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 125 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 125 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 125 (type_specifier -> BOOL .)
    BOOL            reduce using rule 125 (type_specifier -> BOOL .)
    COMPLEX         reduce using rule 125 (type_specifier -> BOOL .)
    IMAGINARY       reduce using rule 125 (type_specifier -> BOOL .)
    TYPEID          reduce using rule 125 (type_specifier -> BOOL .)
    CONST           reduce using rule 125 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 125 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 125 (type_specifier -> BOOL .)
    ENUM            reduce using rule 125 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 125 (type_specifier -> BOOL .)
    UNION           reduce using rule 125 (type_specifier -> BOOL .)
    TIMES           reduce using rule 125 (type_specifier -> BOOL .)
    LPAREN          reduce using rule 125 (type_specifier -> BOOL .)
    LBRACKET        reduce using rule 125 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 125 (type_specifier -> BOOL .)
    TYPEDEF         reduce using rule 125 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 125 (type_specifier -> BOOL .)
    STATIC          reduce using rule 125 (type_specifier -> BOOL .)
    THREAD_LOCAL    reduce using rule 125 (type_specifier -> BOOL .)
    AUTO            reduce using rule 125 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 125 (type_specifier -> BOOL .)
    INLINE          reduce using rule 125 (type_specifier -> BOOL .)
    NORETURN        reduce using rule 125 (type_specifier -> BOOL .)
    ALIGNAS         reduce using rule 125 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 125 (type_specifier -> BOOL .)
    COMMA           reduce using rule 125 (type_specifier -> BOOL .)
    SEMI            reduce using rule 125 (type_specifier -> BOOL .)
    COLON           reduce using rule 125 (type_specifier -> BOOL .)


state 40

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (269) external_declaration -> . function_definition
    (270) external_declaration -> . declaration
    (271) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (272) function_definition -> . declaration_specifiers declarator compound_statement
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    external_declaration           shift and go to state 63
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 4
    declaration                    shift and go to state 26
    function_definition            shift and go to state 30
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35

state 41

    (162) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 162 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 162 (function_specifier -> INLINE .)
    STATIC          reduce using rule 162 (function_specifier -> INLINE .)
    THREAD_LOCAL    reduce using rule 162 (function_specifier -> INLINE .)
    AUTO            reduce using rule 162 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 162 (function_specifier -> INLINE .)
    VOID            reduce using rule 162 (function_specifier -> INLINE .)
    CHAR            reduce using rule 162 (function_specifier -> INLINE .)
    SHORT           reduce using rule 162 (function_specifier -> INLINE .)
    INT             reduce using rule 162 (function_specifier -> INLINE .)
    LONG            reduce using rule 162 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 162 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 162 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 162 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 162 (function_specifier -> INLINE .)
    BOOL            reduce using rule 162 (function_specifier -> INLINE .)
    COMPLEX         reduce using rule 162 (function_specifier -> INLINE .)
    IMAGINARY       reduce using rule 162 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 162 (function_specifier -> INLINE .)
    CONST           reduce using rule 162 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 162 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 162 (function_specifier -> INLINE .)
    INLINE          reduce using rule 162 (function_specifier -> INLINE .)
    NORETURN        reduce using rule 162 (function_specifier -> INLINE .)
    ALIGNAS         reduce using rule 162 (function_specifier -> INLINE .)
    ENUM            reduce using rule 162 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 162 (function_specifier -> INLINE .)
    UNION           reduce using rule 162 (function_specifier -> INLINE .)
    SEMI            reduce using rule 162 (function_specifier -> INLINE .)
    TIMES           reduce using rule 162 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 162 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 162 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 162 (function_specifier -> INLINE .)
    COMMA           reduce using rule 162 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 162 (function_specifier -> INLINE .)


state 42

    (121) type_specifier -> FLOAT .

    VOID            reduce using rule 121 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 121 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 121 (type_specifier -> FLOAT .)
    INT             reduce using rule 121 (type_specifier -> FLOAT .)
    LONG            reduce using rule 121 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 121 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 121 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 121 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 121 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 121 (type_specifier -> FLOAT .)
    COMPLEX         reduce using rule 121 (type_specifier -> FLOAT .)
    IMAGINARY       reduce using rule 121 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 121 (type_specifier -> FLOAT .)
    CONST           reduce using rule 121 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 121 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 121 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 121 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 121 (type_specifier -> FLOAT .)
    UNION           reduce using rule 121 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 121 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 121 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 121 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 121 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 121 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 121 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 121 (type_specifier -> FLOAT .)
    THREAD_LOCAL    reduce using rule 121 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 121 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 121 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 121 (type_specifier -> FLOAT .)
    NORETURN        reduce using rule 121 (type_specifier -> FLOAT .)
    ALIGNAS         reduce using rule 121 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 121 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 121 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 121 (type_specifier -> FLOAT .)
    COLON           reduce using rule 121 (type_specifier -> FLOAT .)


state 43

    (131) struct_or_union_specifier -> struct_or_union . left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> struct_or_union . IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> struct_or_union . IDENTIFIER
    (275) left_brace -> . LBRACE

    IDENTIFIER      shift and go to state 65
    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 64

state 44

    (96) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 96 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 45

    (94) declaration -> declaration_specifiers init_declarator_list . SEMI
    (107) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 67
    COMMA           shift and go to state 66


state 46

    (166) declarator -> pointer . direct_declarator
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 68

state 47

    (93) declaration -> declaration_specifiers SEMI .

    RBRACE          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    STATIC_ASSERT   reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    IDENTIFIER      reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    THREAD_LOCAL    reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    BOOL            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    COMPLEX         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    IMAGINARY       reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    RESTRICT        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    INLINE          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    NORETURN        reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    ALIGNAS         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    INC_OP          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    DEC_OP          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    ALIGNOF         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    AND_OP          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    NOT_OP          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    I_CONSTANT      reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    F_CONSTANT      reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    STRINGLITERAL   reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    FUNC_NAME       reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    GENERIC         reduce using rule 93 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 93 (declaration -> declaration_specifiers SEMI .)


state 48

    (168) direct_declarator -> IDENTIFIER .
    (172) direct_declarator -> IDENTIFIER . LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> IDENTIFIER . LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    SEMI            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    LBRACE          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    STATIC_ASSERT   reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    COMPLEX         reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    IMAGINARY       reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    TYPEID          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    NORETURN        reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    ALIGNAS         reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 168 (direct_declarator -> IDENTIFIER .)
    LBRACKET        shift and go to state 69

  ! LBRACKET        [ reduce using rule 168 (direct_declarator -> IDENTIFIER .) ]


state 49

    (167) declarator -> direct_declarator .
    (169) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> direct_declarator . LPAREN RPAREN
    (171) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (177) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (178) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET

    RPAREN          reduce using rule 167 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 167 (declarator -> direct_declarator .)
    SEMI            reduce using rule 167 (declarator -> direct_declarator .)
    COMMA           reduce using rule 167 (declarator -> direct_declarator .)
    COLON           reduce using rule 167 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 167 (declarator -> direct_declarator .)
    STATIC_ASSERT   reduce using rule 167 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 167 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 167 (declarator -> direct_declarator .)
    STATIC          reduce using rule 167 (declarator -> direct_declarator .)
    THREAD_LOCAL    reduce using rule 167 (declarator -> direct_declarator .)
    AUTO            reduce using rule 167 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 167 (declarator -> direct_declarator .)
    VOID            reduce using rule 167 (declarator -> direct_declarator .)
    CHAR            reduce using rule 167 (declarator -> direct_declarator .)
    SHORT           reduce using rule 167 (declarator -> direct_declarator .)
    INT             reduce using rule 167 (declarator -> direct_declarator .)
    LONG            reduce using rule 167 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 167 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 167 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 167 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 167 (declarator -> direct_declarator .)
    BOOL            reduce using rule 167 (declarator -> direct_declarator .)
    COMPLEX         reduce using rule 167 (declarator -> direct_declarator .)
    IMAGINARY       reduce using rule 167 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 167 (declarator -> direct_declarator .)
    CONST           reduce using rule 167 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 167 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 167 (declarator -> direct_declarator .)
    INLINE          reduce using rule 167 (declarator -> direct_declarator .)
    NORETURN        reduce using rule 167 (declarator -> direct_declarator .)
    ALIGNAS         reduce using rule 167 (declarator -> direct_declarator .)
    ENUM            reduce using rule 167 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 167 (declarator -> direct_declarator .)
    UNION           reduce using rule 167 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 71
    LBRACKET        shift and go to state 70


state 50

    (184) pointer -> TIMES . type_qualifier_list pointer
    (185) pointer -> TIMES . type_qualifier_list
    (186) pointer -> TIMES . pointer
    (187) pointer -> TIMES .
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 187 (pointer -> TIMES .)
    LPAREN          reduce using rule 187 (pointer -> TIMES .)
    LBRACKET        reduce using rule 187 (pointer -> TIMES .)
    RPAREN          reduce using rule 187 (pointer -> TIMES .)
    COLON           reduce using rule 187 (pointer -> TIMES .)
    COMMA           reduce using rule 187 (pointer -> TIMES .)
    TIMES           shift and go to state 50
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17

    type_qualifier_list            shift and go to state 72
    pointer                        shift and go to state 74
    type_qualifier                 shift and go to state 73

state 51

    (176) direct_declarator -> LPAREN . declarator RPAREN
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 75
    pointer                        shift and go to state 46

state 52

    (271) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (272) function_definition -> declaration_specifiers declarator . compound_statement
    (108) init_declarator -> declarator . EQUALS initializer
    (109) init_declarator -> declarator .
    (273) declaration_list -> . declaration
    (274) declaration_list -> . declaration_list declaration
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (275) left_brace -> . LBRACE
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    EQUALS          shift and go to state 79
    SEMI            reduce using rule 109 (init_declarator -> declarator .)
    COMMA           reduce using rule 109 (init_declarator -> declarator .)
    LBRACE          shift and go to state 57
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 78
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 76
    declaration                    shift and go to state 80
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    declaration_list               shift and go to state 77
    left_brace                     shift and go to state 81

state 53

    (106) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 106 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 106 (init_declarator_list -> init_declarator .)


state 54

    (102) declaration_specifiers -> function_specifier declaration_specifiers .

    SEMI            reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    TIMES           reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LPAREN          reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    COMMA           reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)
    RPAREN          reduce using rule 102 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 55

    (98) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 98 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 56

    (164) alignment_specifier -> ALIGNAS LPAREN . type_name RPAREN
    (165) alignment_specifier -> ALIGNAS LPAREN . constant_expression RPAREN
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (92) constant_expression -> . conditional_expression
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    type_specifier                 shift and go to state 96
    inclusive_or_expression        shift and go to state 85
    type_name                      shift and go to state 106
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    constant_expression            shift and go to state 110
    struct_or_union                shift and go to state 43
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 123

state 57

    (275) left_brace -> LBRACE .

    RBRACE          reduce using rule 275 (left_brace -> LBRACE .)
    STATIC_ASSERT   reduce using rule 275 (left_brace -> LBRACE .)
    IDENTIFIER      reduce using rule 275 (left_brace -> LBRACE .)
    CASE            reduce using rule 275 (left_brace -> LBRACE .)
    DEFAULT         reduce using rule 275 (left_brace -> LBRACE .)
    SEMI            reduce using rule 275 (left_brace -> LBRACE .)
    IF              reduce using rule 275 (left_brace -> LBRACE .)
    SWITCH          reduce using rule 275 (left_brace -> LBRACE .)
    WHILE           reduce using rule 275 (left_brace -> LBRACE .)
    DO              reduce using rule 275 (left_brace -> LBRACE .)
    FOR             reduce using rule 275 (left_brace -> LBRACE .)
    GOTO            reduce using rule 275 (left_brace -> LBRACE .)
    CONTINUE        reduce using rule 275 (left_brace -> LBRACE .)
    BREAK           reduce using rule 275 (left_brace -> LBRACE .)
    RETURN          reduce using rule 275 (left_brace -> LBRACE .)
    TYPEDEF         reduce using rule 275 (left_brace -> LBRACE .)
    EXTERN          reduce using rule 275 (left_brace -> LBRACE .)
    STATIC          reduce using rule 275 (left_brace -> LBRACE .)
    THREAD_LOCAL    reduce using rule 275 (left_brace -> LBRACE .)
    AUTO            reduce using rule 275 (left_brace -> LBRACE .)
    REGISTER        reduce using rule 275 (left_brace -> LBRACE .)
    VOID            reduce using rule 275 (left_brace -> LBRACE .)
    CHAR            reduce using rule 275 (left_brace -> LBRACE .)
    SHORT           reduce using rule 275 (left_brace -> LBRACE .)
    INT             reduce using rule 275 (left_brace -> LBRACE .)
    LONG            reduce using rule 275 (left_brace -> LBRACE .)
    FLOAT           reduce using rule 275 (left_brace -> LBRACE .)
    DOUBLE          reduce using rule 275 (left_brace -> LBRACE .)
    SIGNED          reduce using rule 275 (left_brace -> LBRACE .)
    UNSIGNED        reduce using rule 275 (left_brace -> LBRACE .)
    BOOL            reduce using rule 275 (left_brace -> LBRACE .)
    COMPLEX         reduce using rule 275 (left_brace -> LBRACE .)
    IMAGINARY       reduce using rule 275 (left_brace -> LBRACE .)
    TYPEID          reduce using rule 275 (left_brace -> LBRACE .)
    CONST           reduce using rule 275 (left_brace -> LBRACE .)
    RESTRICT        reduce using rule 275 (left_brace -> LBRACE .)
    VOLATILE        reduce using rule 275 (left_brace -> LBRACE .)
    INLINE          reduce using rule 275 (left_brace -> LBRACE .)
    NORETURN        reduce using rule 275 (left_brace -> LBRACE .)
    ALIGNAS         reduce using rule 275 (left_brace -> LBRACE .)
    LBRACE          reduce using rule 275 (left_brace -> LBRACE .)
    ENUM            reduce using rule 275 (left_brace -> LBRACE .)
    STRUCT          reduce using rule 275 (left_brace -> LBRACE .)
    UNION           reduce using rule 275 (left_brace -> LBRACE .)
    INC_OP          reduce using rule 275 (left_brace -> LBRACE .)
    DEC_OP          reduce using rule 275 (left_brace -> LBRACE .)
    SIZEOF          reduce using rule 275 (left_brace -> LBRACE .)
    ALIGNOF         reduce using rule 275 (left_brace -> LBRACE .)
    LPAREN          reduce using rule 275 (left_brace -> LBRACE .)
    AND_OP          reduce using rule 275 (left_brace -> LBRACE .)
    TIMES           reduce using rule 275 (left_brace -> LBRACE .)
    PLUS            reduce using rule 275 (left_brace -> LBRACE .)
    MINUS           reduce using rule 275 (left_brace -> LBRACE .)
    NOT_OP          reduce using rule 275 (left_brace -> LBRACE .)
    LNOT            reduce using rule 275 (left_brace -> LBRACE .)
    I_CONSTANT      reduce using rule 275 (left_brace -> LBRACE .)
    F_CONSTANT      reduce using rule 275 (left_brace -> LBRACE .)
    CCONST          reduce using rule 275 (left_brace -> LBRACE .)
    STRINGLITERAL   reduce using rule 275 (left_brace -> LBRACE .)
    FUNC_NAME       reduce using rule 275 (left_brace -> LBRACE .)
    GENERIC         reduce using rule 275 (left_brace -> LBRACE .)
    LBRACKET        reduce using rule 275 (left_brace -> LBRACE .)
    PERIOD          reduce using rule 275 (left_brace -> LBRACE .)


state 58

    (150) enum_specifier -> ENUM left_brace . enumerator_list right_brace
    (151) enum_specifier -> ENUM left_brace . enumerator_list COMMA right_brace
    (155) enumerator_list -> . enumerator
    (156) enumerator_list -> . enumerator_list COMMA enumerator
    (157) enumerator -> . enumeration_constant EQUALS constant_expression
    (158) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 127

    enumerator                     shift and go to state 124
    enumeration_constant           shift and go to state 125
    enumerator_list                shift and go to state 126

state 59

    (152) enum_specifier -> ENUM IDENTIFIER . left_brace enumerator_list right_brace
    (153) enum_specifier -> ENUM IDENTIFIER . left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> ENUM IDENTIFIER .
    (275) left_brace -> . LBRACE

    TYPEDEF         reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    COMPLEX         reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    IMAGINARY       reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    TYPEID          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    NORETURN        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    ALIGNAS         reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI            reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    LPAREN          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACKET        reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    RPAREN          reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 154 (enum_specifier -> ENUM IDENTIFIER .)
    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 128

state 60

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN . constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 123
    constant_expression            shift and go to state 129
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 61

    (100) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 100 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 62

    (104) declaration_specifiers -> alignment_specifier declaration_specifiers .

    SEMI            reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    TIMES           reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LPAREN          reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    COMMA           reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    RPAREN          reduce using rule 104 (declaration_specifiers -> alignment_specifier declaration_specifiers .)


state 63

    (2) translation_unit -> translation_unit external_declaration .

    STATIC_ASSERT   reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    THREAD_LOCAL    reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    COMPLEX         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IMAGINARY       reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NORETURN        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ALIGNAS         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 64

    (131) struct_or_union_specifier -> struct_or_union left_brace . struct_declaration_list right_brace
    (136) struct_declaration_list -> . struct_declaration
    (137) struct_declaration_list -> . struct_declaration_list struct_declaration
    (138) struct_declaration -> . specifier_qualifier_list SEMI
    (139) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (140) struct_declaration -> . static_assert_declaration
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 132
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 133
    struct_declaration_list        shift and go to state 131
    type_specifier                 shift and go to state 96

state 65

    (132) struct_or_union_specifier -> struct_or_union IDENTIFIER . left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> struct_or_union IDENTIFIER .
    (275) left_brace -> . LBRACE

    TYPEDEF         reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMPLEX         reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IMAGINARY       reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPEID          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    NORETURN        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ALIGNAS         reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI            reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LPAREN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACKET        reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RPAREN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 133 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 134

state 66

    (107) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (108) init_declarator -> . declarator EQUALS initializer
    (109) init_declarator -> . declarator
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 135
    declarator                     shift and go to state 136
    pointer                        shift and go to state 46

state 67

    (94) declaration -> declaration_specifiers init_declarator_list SEMI .

    RBRACE          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC_ASSERT   reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IDENTIFIER      reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    THREAD_LOCAL    reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BOOL            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    COMPLEX         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IMAGINARY       reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RESTRICT        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INLINE          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NORETURN        reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ALIGNAS         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INC_OP          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEC_OP          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ALIGNOF         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND_OP          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT_OP          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    I_CONSTANT      reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    F_CONSTANT      reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRINGLITERAL   reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FUNC_NAME       reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GENERIC         reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 94 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 68

    (166) declarator -> pointer direct_declarator .
    (169) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> direct_declarator . LPAREN RPAREN
    (171) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (177) direct_declarator -> direct_declarator . LBRACKET TIMES RBRACKET
    (178) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> direct_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list RBRACKET

    RPAREN          reduce using rule 166 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 166 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 166 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 166 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 166 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 166 (declarator -> pointer direct_declarator .)
    STATIC_ASSERT   reduce using rule 166 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 166 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 166 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 166 (declarator -> pointer direct_declarator .)
    THREAD_LOCAL    reduce using rule 166 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 166 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 166 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 166 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 166 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 166 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 166 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 166 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 166 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 166 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 166 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 166 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 166 (declarator -> pointer direct_declarator .)
    COMPLEX         reduce using rule 166 (declarator -> pointer direct_declarator .)
    IMAGINARY       reduce using rule 166 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 166 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 166 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 166 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 166 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 166 (declarator -> pointer direct_declarator .)
    NORETURN        reduce using rule 166 (declarator -> pointer direct_declarator .)
    ALIGNAS         reduce using rule 166 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 166 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 166 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 166 (declarator -> pointer direct_declarator .)
    LPAREN          shift and go to state 71
    LBRACKET        shift and go to state 70


state 69

    (172) direct_declarator -> IDENTIFIER LBRACKET . arrayindex RBRACKET
    (173) direct_declarator -> IDENTIFIER LBRACKET . arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (174) arrayindex -> . IDENTIFIER
    (175) arrayindex -> . I_CONSTANT

    IDENTIFIER      shift and go to state 137
    I_CONSTANT      shift and go to state 139

    arrayindex                     shift and go to state 138

state 70

    (177) direct_declarator -> direct_declarator LBRACKET . TIMES RBRACKET
    (178) direct_declarator -> direct_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> direct_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (180) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE

    TIMES           shift and go to state 141
    STATIC          shift and go to state 142
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17

    type_qualifier_list            shift and go to state 140
    type_qualifier                 shift and go to state 73

state 71

    (169) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (170) direct_declarator -> direct_declarator LPAREN . RPAREN
    (171) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (190) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (191) parameter_type_list -> . parameter_list
    (197) identifier_list -> . IDENTIFIER
    (198) identifier_list -> . identifier_list COMMA IDENTIFIER
    (192) parameter_list -> . parameter_declaration
    (193) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RPAREN          shift and go to state 143
    IDENTIFIER      shift and go to state 144
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    parameter_type_list            shift and go to state 145
    parameter_declaration          shift and go to state 146
    declaration_specifiers         shift and go to state 147
    identifier_list                shift and go to state 148
    parameter_list                 shift and go to state 149
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35

state 72

    (184) pointer -> TIMES type_qualifier_list . pointer
    (185) pointer -> TIMES type_qualifier_list .
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    LPAREN          reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    COLON           reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 185 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 50
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17

    pointer                        shift and go to state 151
    type_qualifier                 shift and go to state 150

state 73

    (188) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    ALIGNOF         reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    AND_OP          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    NOT_OP          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    I_CONSTANT      reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    F_CONSTANT      reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    CCONST          reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    STRINGLITERAL   reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    FUNC_NAME       reduce using rule 188 (type_qualifier_list -> type_qualifier .)
    GENERIC         reduce using rule 188 (type_qualifier_list -> type_qualifier .)


state 74

    (186) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 186 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 186 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 186 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 186 (pointer -> TIMES pointer .)
    COLON           reduce using rule 186 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 186 (pointer -> TIMES pointer .)


state 75

    (176) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 152


state 76

    (93) declaration -> declaration_specifiers . SEMI
    (94) declaration -> declaration_specifiers . init_declarator_list SEMI
    (106) init_declarator_list -> . init_declarator
    (107) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (108) init_declarator -> . declarator EQUALS initializer
    (109) init_declarator -> . declarator
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    SEMI            shift and go to state 47
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 53
    declarator                     shift and go to state 136
    init_declarator_list           shift and go to state 45
    pointer                        shift and go to state 46

state 77

    (271) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (274) declaration_list -> declaration_list . declaration
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (275) left_brace -> . LBRACE
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    LBRACE          shift and go to state 57
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 35
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 153
    struct_or_union                shift and go to state 43
    declaration_specifiers         shift and go to state 76
    declaration                    shift and go to state 154
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    left_brace                     shift and go to state 81

state 78

    (272) function_definition -> declaration_specifiers declarator compound_statement .

    STATIC_ASSERT   reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    THREAD_LOCAL    reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    COMPLEX         reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    IMAGINARY       reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    NORETURN        reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    ALIGNAS         reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 272 (function_definition -> declaration_specifiers declarator compound_statement .)


state 79

    (108) init_declarator -> declarator EQUALS . initializer
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    initializer                    shift and go to state 156
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160

state 80

    (273) declaration_list -> declaration .

    LBRACE          reduce using rule 273 (declaration_list -> declaration .)
    STATIC_ASSERT   reduce using rule 273 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 273 (declaration_list -> declaration .)
    EXTERN          reduce using rule 273 (declaration_list -> declaration .)
    STATIC          reduce using rule 273 (declaration_list -> declaration .)
    THREAD_LOCAL    reduce using rule 273 (declaration_list -> declaration .)
    AUTO            reduce using rule 273 (declaration_list -> declaration .)
    REGISTER        reduce using rule 273 (declaration_list -> declaration .)
    VOID            reduce using rule 273 (declaration_list -> declaration .)
    CHAR            reduce using rule 273 (declaration_list -> declaration .)
    SHORT           reduce using rule 273 (declaration_list -> declaration .)
    INT             reduce using rule 273 (declaration_list -> declaration .)
    LONG            reduce using rule 273 (declaration_list -> declaration .)
    FLOAT           reduce using rule 273 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 273 (declaration_list -> declaration .)
    SIGNED          reduce using rule 273 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 273 (declaration_list -> declaration .)
    BOOL            reduce using rule 273 (declaration_list -> declaration .)
    COMPLEX         reduce using rule 273 (declaration_list -> declaration .)
    IMAGINARY       reduce using rule 273 (declaration_list -> declaration .)
    TYPEID          reduce using rule 273 (declaration_list -> declaration .)
    CONST           reduce using rule 273 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 273 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 273 (declaration_list -> declaration .)
    INLINE          reduce using rule 273 (declaration_list -> declaration .)
    NORETURN        reduce using rule 273 (declaration_list -> declaration .)
    ALIGNAS         reduce using rule 273 (declaration_list -> declaration .)
    ENUM            reduce using rule 273 (declaration_list -> declaration .)
    STRUCT          reduce using rule 273 (declaration_list -> declaration .)
    UNION           reduce using rule 273 (declaration_list -> declaration .)


state 81

    (247) compound_statement -> left_brace . right_brace
    (248) compound_statement -> left_brace . block_item_list right_brace
    (276) right_brace -> . RBRACE
    (249) block_item_list -> . block_item
    (250) block_item_list -> . block_item_list block_item
    (251) block_item -> . declaration
    (252) block_item -> . statement
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 183
    STATIC_ASSERT   shift and go to state 29
    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    LBRACE          shift and go to state 57
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 104
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    right_brace                    shift and go to state 162
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 13
    unary_expression               shift and go to state 155
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    selection_statement            shift and go to state 185
    cast_expression                shift and go to state 108
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 176
    unary_operator                 shift and go to state 117
    logical_or_expression          shift and go to state 116
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    declaration_specifiers         shift and go to state 76
    declaration                    shift and go to state 178
    logical_and_expression         shift and go to state 98
    block_item_list                shift and go to state 169
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    labeled_statement              shift and go to state 165
    function_specifier             shift and go to state 11
    block_item                     shift and go to state 181
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 82

    (14) generic_selection -> GENERIC . LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 188


state 83

    (43) unary_operator -> NOT_OP .

    LPAREN          reduce using rule 43 (unary_operator -> NOT_OP .)
    INC_OP          reduce using rule 43 (unary_operator -> NOT_OP .)
    DEC_OP          reduce using rule 43 (unary_operator -> NOT_OP .)
    SIZEOF          reduce using rule 43 (unary_operator -> NOT_OP .)
    ALIGNOF         reduce using rule 43 (unary_operator -> NOT_OP .)
    IDENTIFIER      reduce using rule 43 (unary_operator -> NOT_OP .)
    AND_OP          reduce using rule 43 (unary_operator -> NOT_OP .)
    TIMES           reduce using rule 43 (unary_operator -> NOT_OP .)
    PLUS            reduce using rule 43 (unary_operator -> NOT_OP .)
    MINUS           reduce using rule 43 (unary_operator -> NOT_OP .)
    NOT_OP          reduce using rule 43 (unary_operator -> NOT_OP .)
    LNOT            reduce using rule 43 (unary_operator -> NOT_OP .)
    I_CONSTANT      reduce using rule 43 (unary_operator -> NOT_OP .)
    F_CONSTANT      reduce using rule 43 (unary_operator -> NOT_OP .)
    CCONST          reduce using rule 43 (unary_operator -> NOT_OP .)
    STRINGLITERAL   reduce using rule 43 (unary_operator -> NOT_OP .)
    FUNC_NAME       reduce using rule 43 (unary_operator -> NOT_OP .)
    GENERIC         reduce using rule 43 (unary_operator -> NOT_OP .)


state 84

    (42) unary_operator -> MINUS .

    LPAREN          reduce using rule 42 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 42 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 42 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 42 (unary_operator -> MINUS .)
    ALIGNOF         reduce using rule 42 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 42 (unary_operator -> MINUS .)
    AND_OP          reduce using rule 42 (unary_operator -> MINUS .)
    TIMES           reduce using rule 42 (unary_operator -> MINUS .)
    PLUS            reduce using rule 42 (unary_operator -> MINUS .)
    MINUS           reduce using rule 42 (unary_operator -> MINUS .)
    NOT_OP          reduce using rule 42 (unary_operator -> MINUS .)
    LNOT            reduce using rule 42 (unary_operator -> MINUS .)
    I_CONSTANT      reduce using rule 42 (unary_operator -> MINUS .)
    F_CONSTANT      reduce using rule 42 (unary_operator -> MINUS .)
    CCONST          reduce using rule 42 (unary_operator -> MINUS .)
    STRINGLITERAL   reduce using rule 42 (unary_operator -> MINUS .)
    FUNC_NAME       reduce using rule 42 (unary_operator -> MINUS .)
    GENERIC         reduce using rule 42 (unary_operator -> MINUS .)


state 85

    (71) logical_and_expression -> inclusive_or_expression .
    (70) inclusive_or_expression -> inclusive_or_expression . OR_OP exclusive_or_expression

    LAND            reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 71 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           shift and go to state 189


state 86

    (41) unary_operator -> PLUS .

    LPAREN          reduce using rule 41 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 41 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 41 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 41 (unary_operator -> PLUS .)
    ALIGNOF         reduce using rule 41 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 41 (unary_operator -> PLUS .)
    AND_OP          reduce using rule 41 (unary_operator -> PLUS .)
    TIMES           reduce using rule 41 (unary_operator -> PLUS .)
    PLUS            reduce using rule 41 (unary_operator -> PLUS .)
    MINUS           reduce using rule 41 (unary_operator -> PLUS .)
    NOT_OP          reduce using rule 41 (unary_operator -> PLUS .)
    LNOT            reduce using rule 41 (unary_operator -> PLUS .)
    I_CONSTANT      reduce using rule 41 (unary_operator -> PLUS .)
    F_CONSTANT      reduce using rule 41 (unary_operator -> PLUS .)
    CCONST          reduce using rule 41 (unary_operator -> PLUS .)
    STRINGLITERAL   reduce using rule 41 (unary_operator -> PLUS .)
    FUNC_NAME       reduce using rule 41 (unary_operator -> PLUS .)
    GENERIC         reduce using rule 41 (unary_operator -> PLUS .)


state 87

    (4) primary_expression -> string .

    LPAREN          reduce using rule 4 (primary_expression -> string .)
    PERIOD          reduce using rule 4 (primary_expression -> string .)
    PTR_OP          reduce using rule 4 (primary_expression -> string .)
    INC_OP          reduce using rule 4 (primary_expression -> string .)
    DEC_OP          reduce using rule 4 (primary_expression -> string .)
    EQUALS          reduce using rule 4 (primary_expression -> string .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> string .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> string .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> string .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> string .)
    TIMES           reduce using rule 4 (primary_expression -> string .)
    DIVIDE          reduce using rule 4 (primary_expression -> string .)
    MOD             reduce using rule 4 (primary_expression -> string .)
    PLUS            reduce using rule 4 (primary_expression -> string .)
    MINUS           reduce using rule 4 (primary_expression -> string .)
    LEFT_OP         reduce using rule 4 (primary_expression -> string .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> string .)
    LT_OP           reduce using rule 4 (primary_expression -> string .)
    GT_OP           reduce using rule 4 (primary_expression -> string .)
    LE_OP           reduce using rule 4 (primary_expression -> string .)
    GE_OP           reduce using rule 4 (primary_expression -> string .)
    EQ_OP           reduce using rule 4 (primary_expression -> string .)
    NE_OP           reduce using rule 4 (primary_expression -> string .)
    AND_OP          reduce using rule 4 (primary_expression -> string .)
    XOR             reduce using rule 4 (primary_expression -> string .)
    OR_OP           reduce using rule 4 (primary_expression -> string .)
    LAND            reduce using rule 4 (primary_expression -> string .)
    CONDOP          reduce using rule 4 (primary_expression -> string .)
    LOR             reduce using rule 4 (primary_expression -> string .)
    SEMI            reduce using rule 4 (primary_expression -> string .)
    COMMA           reduce using rule 4 (primary_expression -> string .)
    RBRACE          reduce using rule 4 (primary_expression -> string .)
    RPAREN          reduce using rule 4 (primary_expression -> string .)
    RBRACKET        reduce using rule 4 (primary_expression -> string .)
    COLON           reduce using rule 4 (primary_expression -> string .)


state 88

    (38) unary_expression -> ALIGNOF . LPAREN type_name RPAREN

    LPAREN          shift and go to state 190


state 89

    (33) unary_expression -> INC_OP . unary_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 192
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 191
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    unary_operator                 shift and go to state 117

state 90

    (45) cast_expression -> unary_expression .

    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 45 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 45 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 45 (cast_expression -> unary_expression .)
    XOR             reduce using rule 45 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    LAND            reduce using rule 45 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 45 (cast_expression -> unary_expression .)
    LOR             reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)
    COLON           reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 45 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 45 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 45 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 45 (cast_expression -> unary_expression .)


state 91

    (34) unary_expression -> DEC_OP . unary_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 192
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 193
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    unary_operator                 shift and go to state 117

state 92

    (13) string -> FUNC_NAME .

    LPAREN          reduce using rule 13 (string -> FUNC_NAME .)
    PERIOD          reduce using rule 13 (string -> FUNC_NAME .)
    PTR_OP          reduce using rule 13 (string -> FUNC_NAME .)
    INC_OP          reduce using rule 13 (string -> FUNC_NAME .)
    DEC_OP          reduce using rule 13 (string -> FUNC_NAME .)
    TIMES           reduce using rule 13 (string -> FUNC_NAME .)
    DIVIDE          reduce using rule 13 (string -> FUNC_NAME .)
    MOD             reduce using rule 13 (string -> FUNC_NAME .)
    PLUS            reduce using rule 13 (string -> FUNC_NAME .)
    MINUS           reduce using rule 13 (string -> FUNC_NAME .)
    LEFT_OP         reduce using rule 13 (string -> FUNC_NAME .)
    RIGHT_OP        reduce using rule 13 (string -> FUNC_NAME .)
    LT_OP           reduce using rule 13 (string -> FUNC_NAME .)
    GT_OP           reduce using rule 13 (string -> FUNC_NAME .)
    LE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    GE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    EQ_OP           reduce using rule 13 (string -> FUNC_NAME .)
    NE_OP           reduce using rule 13 (string -> FUNC_NAME .)
    AND_OP          reduce using rule 13 (string -> FUNC_NAME .)
    XOR             reduce using rule 13 (string -> FUNC_NAME .)
    OR_OP           reduce using rule 13 (string -> FUNC_NAME .)
    LAND            reduce using rule 13 (string -> FUNC_NAME .)
    CONDOP          reduce using rule 13 (string -> FUNC_NAME .)
    LOR             reduce using rule 13 (string -> FUNC_NAME .)
    RPAREN          reduce using rule 13 (string -> FUNC_NAME .)
    COMMA           reduce using rule 13 (string -> FUNC_NAME .)
    SEMI            reduce using rule 13 (string -> FUNC_NAME .)
    RBRACKET        reduce using rule 13 (string -> FUNC_NAME .)
    RBRACE          reduce using rule 13 (string -> FUNC_NAME .)
    COLON           reduce using rule 13 (string -> FUNC_NAME .)
    EQUALS          reduce using rule 13 (string -> FUNC_NAME .)
    MUL_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    DIV_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    MOD_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    ADD_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    SUB_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    LEFT_ASSIGN     reduce using rule 13 (string -> FUNC_NAME .)
    RIGHT_ASSIGN    reduce using rule 13 (string -> FUNC_NAME .)
    AND_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    XOR_ASSIGN      reduce using rule 13 (string -> FUNC_NAME .)
    OR_ASSIGN       reduce using rule 13 (string -> FUNC_NAME .)


state 93

    (12) string -> STRINGLITERAL .

    LPAREN          reduce using rule 12 (string -> STRINGLITERAL .)
    PERIOD          reduce using rule 12 (string -> STRINGLITERAL .)
    PTR_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    INC_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    DEC_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    TIMES           reduce using rule 12 (string -> STRINGLITERAL .)
    DIVIDE          reduce using rule 12 (string -> STRINGLITERAL .)
    MOD             reduce using rule 12 (string -> STRINGLITERAL .)
    PLUS            reduce using rule 12 (string -> STRINGLITERAL .)
    MINUS           reduce using rule 12 (string -> STRINGLITERAL .)
    LEFT_OP         reduce using rule 12 (string -> STRINGLITERAL .)
    RIGHT_OP        reduce using rule 12 (string -> STRINGLITERAL .)
    LT_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    GT_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    LE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    GE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    EQ_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    NE_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    AND_OP          reduce using rule 12 (string -> STRINGLITERAL .)
    XOR             reduce using rule 12 (string -> STRINGLITERAL .)
    OR_OP           reduce using rule 12 (string -> STRINGLITERAL .)
    LAND            reduce using rule 12 (string -> STRINGLITERAL .)
    CONDOP          reduce using rule 12 (string -> STRINGLITERAL .)
    LOR             reduce using rule 12 (string -> STRINGLITERAL .)
    RPAREN          reduce using rule 12 (string -> STRINGLITERAL .)
    COMMA           reduce using rule 12 (string -> STRINGLITERAL .)
    SEMI            reduce using rule 12 (string -> STRINGLITERAL .)
    RBRACKET        reduce using rule 12 (string -> STRINGLITERAL .)
    RBRACE          reduce using rule 12 (string -> STRINGLITERAL .)
    COLON           reduce using rule 12 (string -> STRINGLITERAL .)
    EQUALS          reduce using rule 12 (string -> STRINGLITERAL .)
    MUL_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    DIV_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    MOD_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    ADD_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    SUB_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    LEFT_ASSIGN     reduce using rule 12 (string -> STRINGLITERAL .)
    RIGHT_ASSIGN    reduce using rule 12 (string -> STRINGLITERAL .)
    AND_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    XOR_ASSIGN      reduce using rule 12 (string -> STRINGLITERAL .)
    OR_ASSIGN       reduce using rule 12 (string -> STRINGLITERAL .)


state 94

    (6) primary_expression -> generic_selection .

    LPAREN          reduce using rule 6 (primary_expression -> generic_selection .)
    PERIOD          reduce using rule 6 (primary_expression -> generic_selection .)
    PTR_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    INC_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    DEC_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    EQUALS          reduce using rule 6 (primary_expression -> generic_selection .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> generic_selection .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> generic_selection .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> generic_selection .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> generic_selection .)
    TIMES           reduce using rule 6 (primary_expression -> generic_selection .)
    DIVIDE          reduce using rule 6 (primary_expression -> generic_selection .)
    MOD             reduce using rule 6 (primary_expression -> generic_selection .)
    PLUS            reduce using rule 6 (primary_expression -> generic_selection .)
    MINUS           reduce using rule 6 (primary_expression -> generic_selection .)
    LEFT_OP         reduce using rule 6 (primary_expression -> generic_selection .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> generic_selection .)
    LT_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    GT_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    LE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    GE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    EQ_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    NE_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    AND_OP          reduce using rule 6 (primary_expression -> generic_selection .)
    XOR             reduce using rule 6 (primary_expression -> generic_selection .)
    OR_OP           reduce using rule 6 (primary_expression -> generic_selection .)
    LAND            reduce using rule 6 (primary_expression -> generic_selection .)
    CONDOP          reduce using rule 6 (primary_expression -> generic_selection .)
    LOR             reduce using rule 6 (primary_expression -> generic_selection .)
    SEMI            reduce using rule 6 (primary_expression -> generic_selection .)
    COMMA           reduce using rule 6 (primary_expression -> generic_selection .)
    RBRACE          reduce using rule 6 (primary_expression -> generic_selection .)
    RPAREN          reduce using rule 6 (primary_expression -> generic_selection .)
    RBRACKET        reduce using rule 6 (primary_expression -> generic_selection .)
    COLON           reduce using rule 6 (primary_expression -> generic_selection .)


state 95

    (36) unary_expression -> SIZEOF . unary_expression
    (37) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 195
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 194
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    unary_operator                 shift and go to state 117

state 96

    (141) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (142) specifier_qualifier_list -> type_specifier .
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 142 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 196

state 97

    (51) additive_expression -> multiplicative_expression .
    (48) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (49) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (50) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 51 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 51 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 51 (additive_expression -> multiplicative_expression .)
    LT_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    GT_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 51 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 51 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 51 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 51 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 51 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 51 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 51 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 51 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 51 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 199
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 197


state 98

    (73) logical_or_expression -> logical_and_expression .
    (72) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 73 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 200


state 99

    (57) relational_expression -> shift_expression .
    (55) shift_expression -> shift_expression . LEFT_OP additive_expression
    (56) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    GT_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 57 (relational_expression -> shift_expression .)
    XOR             reduce using rule 57 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 57 (relational_expression -> shift_expression .)
    LAND            reduce using rule 57 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 57 (relational_expression -> shift_expression .)
    LOR             reduce using rule 57 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 57 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 57 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 57 (relational_expression -> shift_expression .)
    COLON           reduce using rule 57 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 57 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 201
    RIGHT_OP        shift and go to state 202


state 100

    (143) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (144) specifier_qualifier_list -> type_qualifier .
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    SEMI            reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 144 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 203

state 101

    (10) constant -> CCONST .

    LPAREN          reduce using rule 10 (constant -> CCONST .)
    PERIOD          reduce using rule 10 (constant -> CCONST .)
    PTR_OP          reduce using rule 10 (constant -> CCONST .)
    INC_OP          reduce using rule 10 (constant -> CCONST .)
    DEC_OP          reduce using rule 10 (constant -> CCONST .)
    EQUALS          reduce using rule 10 (constant -> CCONST .)
    MUL_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    DIV_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    MOD_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    ADD_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    SUB_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    LEFT_ASSIGN     reduce using rule 10 (constant -> CCONST .)
    RIGHT_ASSIGN    reduce using rule 10 (constant -> CCONST .)
    AND_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    XOR_ASSIGN      reduce using rule 10 (constant -> CCONST .)
    OR_ASSIGN       reduce using rule 10 (constant -> CCONST .)
    TIMES           reduce using rule 10 (constant -> CCONST .)
    DIVIDE          reduce using rule 10 (constant -> CCONST .)
    MOD             reduce using rule 10 (constant -> CCONST .)
    PLUS            reduce using rule 10 (constant -> CCONST .)
    MINUS           reduce using rule 10 (constant -> CCONST .)
    LEFT_OP         reduce using rule 10 (constant -> CCONST .)
    RIGHT_OP        reduce using rule 10 (constant -> CCONST .)
    LT_OP           reduce using rule 10 (constant -> CCONST .)
    GT_OP           reduce using rule 10 (constant -> CCONST .)
    LE_OP           reduce using rule 10 (constant -> CCONST .)
    GE_OP           reduce using rule 10 (constant -> CCONST .)
    EQ_OP           reduce using rule 10 (constant -> CCONST .)
    NE_OP           reduce using rule 10 (constant -> CCONST .)
    AND_OP          reduce using rule 10 (constant -> CCONST .)
    XOR             reduce using rule 10 (constant -> CCONST .)
    OR_OP           reduce using rule 10 (constant -> CCONST .)
    LAND            reduce using rule 10 (constant -> CCONST .)
    CONDOP          reduce using rule 10 (constant -> CCONST .)
    LOR             reduce using rule 10 (constant -> CCONST .)
    COMMA           reduce using rule 10 (constant -> CCONST .)
    RBRACE          reduce using rule 10 (constant -> CCONST .)
    RPAREN          reduce using rule 10 (constant -> CCONST .)
    SEMI            reduce using rule 10 (constant -> CCONST .)
    RBRACKET        reduce using rule 10 (constant -> CCONST .)
    COLON           reduce using rule 10 (constant -> CCONST .)


state 102

    (8) constant -> I_CONSTANT .

    LPAREN          reduce using rule 8 (constant -> I_CONSTANT .)
    PERIOD          reduce using rule 8 (constant -> I_CONSTANT .)
    PTR_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    INC_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    DEC_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    EQUALS          reduce using rule 8 (constant -> I_CONSTANT .)
    MUL_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    DIV_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    MOD_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    ADD_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    SUB_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 8 (constant -> I_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 8 (constant -> I_CONSTANT .)
    AND_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    XOR_ASSIGN      reduce using rule 8 (constant -> I_CONSTANT .)
    OR_ASSIGN       reduce using rule 8 (constant -> I_CONSTANT .)
    TIMES           reduce using rule 8 (constant -> I_CONSTANT .)
    DIVIDE          reduce using rule 8 (constant -> I_CONSTANT .)
    MOD             reduce using rule 8 (constant -> I_CONSTANT .)
    PLUS            reduce using rule 8 (constant -> I_CONSTANT .)
    MINUS           reduce using rule 8 (constant -> I_CONSTANT .)
    LEFT_OP         reduce using rule 8 (constant -> I_CONSTANT .)
    RIGHT_OP        reduce using rule 8 (constant -> I_CONSTANT .)
    LT_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    GT_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    LE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    GE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    EQ_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    NE_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    AND_OP          reduce using rule 8 (constant -> I_CONSTANT .)
    XOR             reduce using rule 8 (constant -> I_CONSTANT .)
    OR_OP           reduce using rule 8 (constant -> I_CONSTANT .)
    LAND            reduce using rule 8 (constant -> I_CONSTANT .)
    CONDOP          reduce using rule 8 (constant -> I_CONSTANT .)
    LOR             reduce using rule 8 (constant -> I_CONSTANT .)
    COMMA           reduce using rule 8 (constant -> I_CONSTANT .)
    RBRACE          reduce using rule 8 (constant -> I_CONSTANT .)
    RPAREN          reduce using rule 8 (constant -> I_CONSTANT .)
    SEMI            reduce using rule 8 (constant -> I_CONSTANT .)
    RBRACKET        reduce using rule 8 (constant -> I_CONSTANT .)
    COLON           reduce using rule 8 (constant -> I_CONSTANT .)


state 103

    (69) inclusive_or_expression -> exclusive_or_expression .
    (68) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_OP           reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 69 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 204


state 104

    (3) primary_expression -> constant .

    LPAREN          reduce using rule 3 (primary_expression -> constant .)
    PERIOD          reduce using rule 3 (primary_expression -> constant .)
    PTR_OP          reduce using rule 3 (primary_expression -> constant .)
    INC_OP          reduce using rule 3 (primary_expression -> constant .)
    DEC_OP          reduce using rule 3 (primary_expression -> constant .)
    EQUALS          reduce using rule 3 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> constant .)
    TIMES           reduce using rule 3 (primary_expression -> constant .)
    DIVIDE          reduce using rule 3 (primary_expression -> constant .)
    MOD             reduce using rule 3 (primary_expression -> constant .)
    PLUS            reduce using rule 3 (primary_expression -> constant .)
    MINUS           reduce using rule 3 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 3 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> constant .)
    LT_OP           reduce using rule 3 (primary_expression -> constant .)
    GT_OP           reduce using rule 3 (primary_expression -> constant .)
    LE_OP           reduce using rule 3 (primary_expression -> constant .)
    GE_OP           reduce using rule 3 (primary_expression -> constant .)
    EQ_OP           reduce using rule 3 (primary_expression -> constant .)
    NE_OP           reduce using rule 3 (primary_expression -> constant .)
    AND_OP          reduce using rule 3 (primary_expression -> constant .)
    XOR             reduce using rule 3 (primary_expression -> constant .)
    OR_OP           reduce using rule 3 (primary_expression -> constant .)
    LAND            reduce using rule 3 (primary_expression -> constant .)
    CONDOP          reduce using rule 3 (primary_expression -> constant .)
    LOR             reduce using rule 3 (primary_expression -> constant .)
    SEMI            reduce using rule 3 (primary_expression -> constant .)
    COMMA           reduce using rule 3 (primary_expression -> constant .)
    RBRACE          reduce using rule 3 (primary_expression -> constant .)
    RPAREN          reduce using rule 3 (primary_expression -> constant .)
    RBRACKET        reduce using rule 3 (primary_expression -> constant .)
    COLON           reduce using rule 3 (primary_expression -> constant .)


state 105

    (54) shift_expression -> additive_expression .
    (52) additive_expression -> additive_expression . PLUS multiplicative_expression
    (53) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 54 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 54 (shift_expression -> additive_expression .)
    LT_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    GT_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 54 (shift_expression -> additive_expression .)
    XOR             reduce using rule 54 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 54 (shift_expression -> additive_expression .)
    LAND            reduce using rule 54 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 54 (shift_expression -> additive_expression .)
    LOR             reduce using rule 54 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 54 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 54 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 54 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 54 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 54 (shift_expression -> additive_expression .)
    COLON           reduce using rule 54 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 106

    (164) alignment_specifier -> ALIGNAS LPAREN type_name . RPAREN

    RPAREN          shift and go to state 207


state 107

    (62) equality_expression -> relational_expression .
    (58) relational_expression -> relational_expression . LT_OP shift_expression
    (59) relational_expression -> relational_expression . GT_OP shift_expression
    (60) relational_expression -> relational_expression . LE_OP shift_expression
    (61) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 62 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 62 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 62 (equality_expression -> relational_expression .)
    XOR             reduce using rule 62 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 62 (equality_expression -> relational_expression .)
    LAND            reduce using rule 62 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 62 (equality_expression -> relational_expression .)
    LOR             reduce using rule 62 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 62 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 62 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 62 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 62 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 62 (equality_expression -> relational_expression .)
    COLON           reduce using rule 62 (equality_expression -> relational_expression .)
    LT_OP           shift and go to state 209
    GT_OP           shift and go to state 211
    LE_OP           shift and go to state 208
    GE_OP           shift and go to state 210


state 108

    (47) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 47 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 47 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 47 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 47 (multiplicative_expression -> cast_expression .)
    LT_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    GT_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 47 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 47 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 47 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 47 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 47 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 47 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 47 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 47 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 47 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 47 (multiplicative_expression -> cast_expression .)


state 109

    (28) postfix_expression -> IDENTIFIER . LBRACKET expression RBRACKET
    (29) postfix_expression -> IDENTIFIER . LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (7) primary_expression -> IDENTIFIER .

    LBRACKET        shift and go to state 212
    LPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    CONDOP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 7 (primary_expression -> IDENTIFIER .)


state 110

    (165) alignment_specifier -> ALIGNAS LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 213


state 111

    (19) postfix_expression -> primary_expression .

    LPAREN          reduce using rule 19 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 19 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 19 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 19 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 19 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 19 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 19 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 19 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 19 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 19 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 19 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 19 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 19 (postfix_expression -> primary_expression .)
    LT_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    GT_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 19 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 19 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 19 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 19 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 19 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 19 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 19 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 19 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 19 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 19 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 19 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 19 (postfix_expression -> primary_expression .)


state 112

    (65) and_expression -> equality_expression .
    (63) equality_expression -> equality_expression . EQ_OP relational_expression
    (64) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 65 (and_expression -> equality_expression .)
    XOR             reduce using rule 65 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 65 (and_expression -> equality_expression .)
    LAND            reduce using rule 65 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 65 (and_expression -> equality_expression .)
    LOR             reduce using rule 65 (and_expression -> equality_expression .)
    SEMI            reduce using rule 65 (and_expression -> equality_expression .)
    COMMA           reduce using rule 65 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 65 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 65 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 65 (and_expression -> equality_expression .)
    COLON           reduce using rule 65 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 215
    NE_OP           shift and go to state 214


state 113

    (44) unary_operator -> LNOT .

    LPAREN          reduce using rule 44 (unary_operator -> LNOT .)
    INC_OP          reduce using rule 44 (unary_operator -> LNOT .)
    DEC_OP          reduce using rule 44 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 44 (unary_operator -> LNOT .)
    ALIGNOF         reduce using rule 44 (unary_operator -> LNOT .)
    IDENTIFIER      reduce using rule 44 (unary_operator -> LNOT .)
    AND_OP          reduce using rule 44 (unary_operator -> LNOT .)
    TIMES           reduce using rule 44 (unary_operator -> LNOT .)
    PLUS            reduce using rule 44 (unary_operator -> LNOT .)
    MINUS           reduce using rule 44 (unary_operator -> LNOT .)
    NOT_OP          reduce using rule 44 (unary_operator -> LNOT .)
    LNOT            reduce using rule 44 (unary_operator -> LNOT .)
    I_CONSTANT      reduce using rule 44 (unary_operator -> LNOT .)
    F_CONSTANT      reduce using rule 44 (unary_operator -> LNOT .)
    CCONST          reduce using rule 44 (unary_operator -> LNOT .)
    STRINGLITERAL   reduce using rule 44 (unary_operator -> LNOT .)
    FUNC_NAME       reduce using rule 44 (unary_operator -> LNOT .)
    GENERIC         reduce using rule 44 (unary_operator -> LNOT .)


state 114

    (67) exclusive_or_expression -> and_expression .
    (66) and_expression -> and_expression . AND_OP equality_expression

    XOR             reduce using rule 67 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 67 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 67 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 67 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 67 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 67 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 67 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 67 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 67 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 67 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 67 (exclusive_or_expression -> and_expression .)
    AND_OP          shift and go to state 216


state 115

    (32) unary_expression -> postfix_expression .
    (20) postfix_expression -> postfix_expression . LPAREN RPAREN
    (21) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> postfix_expression . PERIOD IDENTIFIER
    (23) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (26) postfix_expression -> postfix_expression . INC_OP
    (27) postfix_expression -> postfix_expression . DEC_OP

    EQUALS          reduce using rule 32 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 32 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 32 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 32 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 32 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 32 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 32 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 32 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 32 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 32 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 32 (unary_expression -> postfix_expression .)
    LT_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    GT_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 32 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 32 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 32 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 32 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 32 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 32 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 32 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 32 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 32 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 32 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 32 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 32 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 220
    PERIOD          shift and go to state 219
    PTR_OP          shift and go to state 217
    INC_OP          shift and go to state 221
    DEC_OP          shift and go to state 218


state 116

    (75) conditional_expression -> logical_or_expression .
    (76) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (74) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    RPAREN          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 75 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 75 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 75 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 75 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 222
    LOR             shift and go to state 223


state 117

    (35) unary_expression -> unary_operator . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    cast_expression                shift and go to state 224
    unary_operator                 shift and go to state 117

state 118

    (40) unary_operator -> TIMES .

    LPAREN          reduce using rule 40 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 40 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 40 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 40 (unary_operator -> TIMES .)
    TIMES           reduce using rule 40 (unary_operator -> TIMES .)
    PLUS            reduce using rule 40 (unary_operator -> TIMES .)
    MINUS           reduce using rule 40 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 40 (unary_operator -> TIMES .)
    LNOT            reduce using rule 40 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    CCONST          reduce using rule 40 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 40 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 40 (unary_operator -> TIMES .)


state 119

    (39) unary_operator -> AND_OP .

    LPAREN          reduce using rule 39 (unary_operator -> AND_OP .)
    INC_OP          reduce using rule 39 (unary_operator -> AND_OP .)
    DEC_OP          reduce using rule 39 (unary_operator -> AND_OP .)
    SIZEOF          reduce using rule 39 (unary_operator -> AND_OP .)
    ALIGNOF         reduce using rule 39 (unary_operator -> AND_OP .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> AND_OP .)
    AND_OP          reduce using rule 39 (unary_operator -> AND_OP .)
    TIMES           reduce using rule 39 (unary_operator -> AND_OP .)
    PLUS            reduce using rule 39 (unary_operator -> AND_OP .)
    MINUS           reduce using rule 39 (unary_operator -> AND_OP .)
    NOT_OP          reduce using rule 39 (unary_operator -> AND_OP .)
    LNOT            reduce using rule 39 (unary_operator -> AND_OP .)
    I_CONSTANT      reduce using rule 39 (unary_operator -> AND_OP .)
    F_CONSTANT      reduce using rule 39 (unary_operator -> AND_OP .)
    CCONST          reduce using rule 39 (unary_operator -> AND_OP .)
    STRINGLITERAL   reduce using rule 39 (unary_operator -> AND_OP .)
    FUNC_NAME       reduce using rule 39 (unary_operator -> AND_OP .)
    GENERIC         reduce using rule 39 (unary_operator -> AND_OP .)


state 120

    (46) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (24) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list COMMA right_brace
    (5) primary_expression -> LPAREN . expression RPAREN
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 96
    inclusive_or_expression        shift and go to state 85
    type_name                      shift and go to state 226
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 225

state 121

    (9) constant -> F_CONSTANT .

    LPAREN          reduce using rule 9 (constant -> F_CONSTANT .)
    PERIOD          reduce using rule 9 (constant -> F_CONSTANT .)
    PTR_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    INC_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    DEC_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    EQUALS          reduce using rule 9 (constant -> F_CONSTANT .)
    MUL_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    DIV_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    MOD_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    ADD_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    SUB_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 9 (constant -> F_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 9 (constant -> F_CONSTANT .)
    AND_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    XOR_ASSIGN      reduce using rule 9 (constant -> F_CONSTANT .)
    OR_ASSIGN       reduce using rule 9 (constant -> F_CONSTANT .)
    TIMES           reduce using rule 9 (constant -> F_CONSTANT .)
    DIVIDE          reduce using rule 9 (constant -> F_CONSTANT .)
    MOD             reduce using rule 9 (constant -> F_CONSTANT .)
    PLUS            reduce using rule 9 (constant -> F_CONSTANT .)
    MINUS           reduce using rule 9 (constant -> F_CONSTANT .)
    LEFT_OP         reduce using rule 9 (constant -> F_CONSTANT .)
    RIGHT_OP        reduce using rule 9 (constant -> F_CONSTANT .)
    LT_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    GT_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    LE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    GE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    EQ_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    NE_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    AND_OP          reduce using rule 9 (constant -> F_CONSTANT .)
    XOR             reduce using rule 9 (constant -> F_CONSTANT .)
    OR_OP           reduce using rule 9 (constant -> F_CONSTANT .)
    LAND            reduce using rule 9 (constant -> F_CONSTANT .)
    CONDOP          reduce using rule 9 (constant -> F_CONSTANT .)
    LOR             reduce using rule 9 (constant -> F_CONSTANT .)
    COMMA           reduce using rule 9 (constant -> F_CONSTANT .)
    RBRACE          reduce using rule 9 (constant -> F_CONSTANT .)
    RPAREN          reduce using rule 9 (constant -> F_CONSTANT .)
    SEMI            reduce using rule 9 (constant -> F_CONSTANT .)
    RBRACKET        reduce using rule 9 (constant -> F_CONSTANT .)
    COLON           reduce using rule 9 (constant -> F_CONSTANT .)


state 122

    (199) type_name -> specifier_qualifier_list . abstract_declarator
    (200) type_name -> specifier_qualifier_list .
    (201) abstract_declarator -> . pointer direct_abstract_declarator
    (202) abstract_declarator -> . pointer
    (203) abstract_declarator -> . direct_abstract_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 200 (type_name -> specifier_qualifier_list .)
    COLON           reduce using rule 200 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 50
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 227

    abstract_declarator            shift and go to state 230
    direct_abstract_declarator     shift and go to state 229
    pointer                        shift and go to state 231

state 123

    (92) constant_expression -> conditional_expression .

    RPAREN          reduce using rule 92 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 92 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 92 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 92 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 92 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 92 (constant_expression -> conditional_expression .)


state 124

    (155) enumerator_list -> enumerator .

    COMMA           reduce using rule 155 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 155 (enumerator_list -> enumerator .)


state 125

    (157) enumerator -> enumeration_constant . EQUALS constant_expression
    (158) enumerator -> enumeration_constant .

    EQUALS          shift and go to state 232
    COMMA           reduce using rule 158 (enumerator -> enumeration_constant .)
    RBRACE          reduce using rule 158 (enumerator -> enumeration_constant .)


state 126

    (150) enum_specifier -> ENUM left_brace enumerator_list . right_brace
    (151) enum_specifier -> ENUM left_brace enumerator_list . COMMA right_brace
    (156) enumerator_list -> enumerator_list . COMMA enumerator
    (276) right_brace -> . RBRACE

    COMMA           shift and go to state 234
    RBRACE          shift and go to state 183

    right_brace                    shift and go to state 233

state 127

    (11) enumeration_constant -> IDENTIFIER .

    EQUALS          reduce using rule 11 (enumeration_constant -> IDENTIFIER .)
    COMMA           reduce using rule 11 (enumeration_constant -> IDENTIFIER .)
    RBRACE          reduce using rule 11 (enumeration_constant -> IDENTIFIER .)


state 128

    (152) enum_specifier -> ENUM IDENTIFIER left_brace . enumerator_list right_brace
    (153) enum_specifier -> ENUM IDENTIFIER left_brace . enumerator_list COMMA right_brace
    (155) enumerator_list -> . enumerator
    (156) enumerator_list -> . enumerator_list COMMA enumerator
    (157) enumerator -> . enumeration_constant EQUALS constant_expression
    (158) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 127

    enumerator                     shift and go to state 124
    enumeration_constant           shift and go to state 125
    enumerator_list                shift and go to state 235

state 129

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression . COMMA STRINGLITERAL RPAREN SEMI

    COMMA           shift and go to state 236


state 130

    (140) struct_declaration -> static_assert_declaration .

    RBRACE          reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    VOID            reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    CHAR            reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    SHORT           reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    INT             reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    LONG            reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    BOOL            reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    TYPEID          reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    CONST           reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    RESTRICT        reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    ENUM            reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 140 (struct_declaration -> static_assert_declaration .)
    UNION           reduce using rule 140 (struct_declaration -> static_assert_declaration .)


state 131

    (131) struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list . right_brace
    (137) struct_declaration_list -> struct_declaration_list . struct_declaration
    (276) right_brace -> . RBRACE
    (138) struct_declaration -> . specifier_qualifier_list SEMI
    (139) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (140) struct_declaration -> . static_assert_declaration
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RBRACE          shift and go to state 183
    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 238
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    right_brace                    shift and go to state 237
    specifier_qualifier_list       shift and go to state 133
    type_specifier                 shift and go to state 96

state 132

    (136) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    STATIC_ASSERT   reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    COMPLEX         reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    IMAGINARY       reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 136 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 136 (struct_declaration_list -> struct_declaration .)


state 133

    (138) struct_declaration -> specifier_qualifier_list . SEMI
    (139) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (145) struct_declarator_list -> . struct_declarator
    (146) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (147) struct_declarator -> . COLON constant_expression
    (148) struct_declarator -> . declarator COLON constant_expression
    (149) struct_declarator -> . declarator
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    SEMI            shift and go to state 239
    COLON           shift and go to state 240
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    struct_declarator              shift and go to state 242
    struct_declarator_list         shift and go to state 241
    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 243
    pointer                        shift and go to state 46

state 134

    (132) struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace . struct_declaration_list right_brace
    (136) struct_declaration_list -> . struct_declaration
    (137) struct_declaration_list -> . struct_declaration_list struct_declaration
    (138) struct_declaration -> . specifier_qualifier_list SEMI
    (139) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (140) struct_declaration -> . static_assert_declaration
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 132
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 133
    struct_declaration_list        shift and go to state 244
    type_specifier                 shift and go to state 96

state 135

    (107) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 107 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 107 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 136

    (108) init_declarator -> declarator . EQUALS initializer
    (109) init_declarator -> declarator .

    EQUALS          shift and go to state 79
    SEMI            reduce using rule 109 (init_declarator -> declarator .)
    COMMA           reduce using rule 109 (init_declarator -> declarator .)


state 137

    (174) arrayindex -> IDENTIFIER .

    RBRACKET        reduce using rule 174 (arrayindex -> IDENTIFIER .)


state 138

    (172) direct_declarator -> IDENTIFIER LBRACKET arrayindex . RBRACKET
    (173) direct_declarator -> IDENTIFIER LBRACKET arrayindex . RBRACKET LBRACKET arrayindex RBRACKET

    RBRACKET        shift and go to state 245


state 139

    (175) arrayindex -> I_CONSTANT .

    RBRACKET        reduce using rule 175 (arrayindex -> I_CONSTANT .)


state 140

    (180) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . TIMES RBRACKET
    (181) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (182) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (183) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 248
    STATIC          shift and go to state 246
    RBRACKET        shift and go to state 249
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 247
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 97
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 141

    (177) direct_declarator -> direct_declarator LBRACKET TIMES . RBRACKET

    RBRACKET        shift and go to state 250


state 142

    (178) direct_declarator -> direct_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> direct_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 251
    type_qualifier_list            shift and go to state 252
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 97
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 160

state 143

    (170) direct_declarator -> direct_declarator LPAREN RPAREN .

    LPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACKET        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC_ASSERT   reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    THREAD_LOCAL    reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    BOOL            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMPLEX         reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    IMAGINARY       reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RESTRICT        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INLINE          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    NORETURN        reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ALIGNAS         reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 170 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 144

    (197) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 197 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 197 (identifier_list -> IDENTIFIER .)


state 145

    (169) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 253


state 146

    (192) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 192 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 192 (parameter_list -> parameter_declaration .)


state 147

    (194) parameter_declaration -> declaration_specifiers . declarator
    (195) parameter_declaration -> declaration_specifiers . abstract_declarator
    (196) parameter_declaration -> declaration_specifiers .
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (201) abstract_declarator -> . pointer direct_abstract_declarator
    (202) abstract_declarator -> . pointer
    (203) abstract_declarator -> . direct_abstract_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 196 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 254
    LBRACKET        shift and go to state 227

    direct_declarator              shift and go to state 49
    abstract_declarator            shift and go to state 255
    declarator                     shift and go to state 256
    direct_abstract_declarator     shift and go to state 229
    pointer                        shift and go to state 257

state 148

    (171) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (198) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 258
    COMMA           shift and go to state 259


state 149

    (190) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (191) parameter_type_list -> parameter_list .
    (193) parameter_list -> parameter_list . COMMA parameter_declaration

    COMMA           shift and go to state 260
    RPAREN          reduce using rule 191 (parameter_type_list -> parameter_list .)


state 150

    (189) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COLON           reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ALIGNOF         reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND_OP          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT_OP          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    I_CONSTANT      reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    F_CONSTANT      reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CCONST          reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRINGLITERAL   reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FUNC_NAME       reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    GENERIC         reduce using rule 189 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 151

    (184) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)
    LPAREN          reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)
    COLON           reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 184 (pointer -> TIMES type_qualifier_list pointer .)


state 152

    (176) direct_declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC_ASSERT   reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    THREAD_LOCAL    reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    BOOL            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COMPLEX         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    IMAGINARY       reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    NORETURN        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    ALIGNAS         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)


state 153

    (271) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    STATIC_ASSERT   reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    THREAD_LOCAL    reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    COMPLEX         reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IMAGINARY       reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    NORETURN        reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ALIGNAS         reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 271 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 154

    (274) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    STATIC_ASSERT   reduce using rule 274 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 274 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    THREAD_LOCAL    reduce using rule 274 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 274 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 274 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 274 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 274 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 274 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    COMPLEX         reduce using rule 274 (declaration_list -> declaration_list declaration .)
    IMAGINARY       reduce using rule 274 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 274 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 274 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 274 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    NORETURN        reduce using rule 274 (declaration_list -> declaration_list declaration .)
    ALIGNAS         reduce using rule 274 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 274 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 274 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 274 (declaration_list -> declaration_list declaration .)


state 155

    (78) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (45) cast_expression -> unary_expression .
    (79) assignment_operator -> . EQUALS
    (80) assignment_operator -> . MUL_ASSIGN
    (81) assignment_operator -> . DIV_ASSIGN
    (82) assignment_operator -> . MOD_ASSIGN
    (83) assignment_operator -> . ADD_ASSIGN
    (84) assignment_operator -> . SUB_ASSIGN
    (85) assignment_operator -> . LEFT_ASSIGN
    (86) assignment_operator -> . RIGHT_ASSIGN
    (87) assignment_operator -> . AND_ASSIGN
    (88) assignment_operator -> . XOR_ASSIGN
    (89) assignment_operator -> . OR_ASSIGN

    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 45 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 45 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 45 (cast_expression -> unary_expression .)
    XOR             reduce using rule 45 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 45 (cast_expression -> unary_expression .)
    LAND            reduce using rule 45 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 45 (cast_expression -> unary_expression .)
    LOR             reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 45 (cast_expression -> unary_expression .)
    COLON           reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 265
    MUL_ASSIGN      shift and go to state 267
    DIV_ASSIGN      shift and go to state 268
    MOD_ASSIGN      shift and go to state 262
    ADD_ASSIGN      shift and go to state 270
    SUB_ASSIGN      shift and go to state 261
    LEFT_ASSIGN     shift and go to state 269
    RIGHT_ASSIGN    shift and go to state 271
    AND_ASSIGN      shift and go to state 266
    XOR_ASSIGN      shift and go to state 263
    OR_ASSIGN       shift and go to state 264

    assignment_operator            shift and go to state 272

state 156

    (108) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 108 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 108 (init_declarator -> declarator EQUALS initializer .)


state 157

    (227) initializer -> assignment_expression .

    COMMA           reduce using rule 227 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 227 (initializer -> assignment_expression .)
    SEMI            reduce using rule 227 (initializer -> assignment_expression .)


state 158

    (24) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list COMMA right_brace
    (5) primary_expression -> LPAREN . expression RPAREN
    (46) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 96
    inclusive_or_expression        shift and go to state 85
    type_name                      shift and go to state 273
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 225

state 159

    (225) initializer -> left_brace . initializer_list right_brace
    (226) initializer -> left_brace . initializer_list COMMA right_brace
    (228) initializer_list -> . designation initializer
    (229) initializer_list -> . initializer
    (230) initializer_list -> . initializer_list COMMA designation initializer
    (231) initializer_list -> . initializer_list COMMA initializer
    (232) designation -> . designator_list EQUALS
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (233) designator_list -> . designator
    (234) designator_list -> . designator_list designator
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (235) designator -> . LBRACKET constant_expression RBRACKET
    (236) designator -> . PERIOD IDENTIFIER
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 57
    LBRACKET        shift and go to state 275
    PERIOD          shift and go to state 278
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    initializer                    shift and go to state 274
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    initializer_list               shift and go to state 276
    designator                     shift and go to state 277
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    designation                    shift and go to state 279
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160
    designator_list                shift and go to state 280

state 160

    (77) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 77 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 77 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 77 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 77 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 77 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 77 (assignment_expression -> conditional_expression .)


state 161

    (240) statement -> expression_statement .

    RBRACE          reduce using rule 240 (statement -> expression_statement .)
    STATIC_ASSERT   reduce using rule 240 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 240 (statement -> expression_statement .)
    CASE            reduce using rule 240 (statement -> expression_statement .)
    DEFAULT         reduce using rule 240 (statement -> expression_statement .)
    SEMI            reduce using rule 240 (statement -> expression_statement .)
    IF              reduce using rule 240 (statement -> expression_statement .)
    SWITCH          reduce using rule 240 (statement -> expression_statement .)
    WHILE           reduce using rule 240 (statement -> expression_statement .)
    DO              reduce using rule 240 (statement -> expression_statement .)
    FOR             reduce using rule 240 (statement -> expression_statement .)
    GOTO            reduce using rule 240 (statement -> expression_statement .)
    CONTINUE        reduce using rule 240 (statement -> expression_statement .)
    BREAK           reduce using rule 240 (statement -> expression_statement .)
    RETURN          reduce using rule 240 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 240 (statement -> expression_statement .)
    EXTERN          reduce using rule 240 (statement -> expression_statement .)
    STATIC          reduce using rule 240 (statement -> expression_statement .)
    THREAD_LOCAL    reduce using rule 240 (statement -> expression_statement .)
    AUTO            reduce using rule 240 (statement -> expression_statement .)
    REGISTER        reduce using rule 240 (statement -> expression_statement .)
    VOID            reduce using rule 240 (statement -> expression_statement .)
    CHAR            reduce using rule 240 (statement -> expression_statement .)
    SHORT           reduce using rule 240 (statement -> expression_statement .)
    INT             reduce using rule 240 (statement -> expression_statement .)
    LONG            reduce using rule 240 (statement -> expression_statement .)
    FLOAT           reduce using rule 240 (statement -> expression_statement .)
    DOUBLE          reduce using rule 240 (statement -> expression_statement .)
    SIGNED          reduce using rule 240 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 240 (statement -> expression_statement .)
    BOOL            reduce using rule 240 (statement -> expression_statement .)
    COMPLEX         reduce using rule 240 (statement -> expression_statement .)
    IMAGINARY       reduce using rule 240 (statement -> expression_statement .)
    TYPEID          reduce using rule 240 (statement -> expression_statement .)
    CONST           reduce using rule 240 (statement -> expression_statement .)
    RESTRICT        reduce using rule 240 (statement -> expression_statement .)
    VOLATILE        reduce using rule 240 (statement -> expression_statement .)
    INLINE          reduce using rule 240 (statement -> expression_statement .)
    NORETURN        reduce using rule 240 (statement -> expression_statement .)
    ALIGNAS         reduce using rule 240 (statement -> expression_statement .)
    LBRACE          reduce using rule 240 (statement -> expression_statement .)
    ENUM            reduce using rule 240 (statement -> expression_statement .)
    STRUCT          reduce using rule 240 (statement -> expression_statement .)
    UNION           reduce using rule 240 (statement -> expression_statement .)
    INC_OP          reduce using rule 240 (statement -> expression_statement .)
    DEC_OP          reduce using rule 240 (statement -> expression_statement .)
    SIZEOF          reduce using rule 240 (statement -> expression_statement .)
    ALIGNOF         reduce using rule 240 (statement -> expression_statement .)
    LPAREN          reduce using rule 240 (statement -> expression_statement .)
    AND_OP          reduce using rule 240 (statement -> expression_statement .)
    TIMES           reduce using rule 240 (statement -> expression_statement .)
    PLUS            reduce using rule 240 (statement -> expression_statement .)
    MINUS           reduce using rule 240 (statement -> expression_statement .)
    NOT_OP          reduce using rule 240 (statement -> expression_statement .)
    LNOT            reduce using rule 240 (statement -> expression_statement .)
    I_CONSTANT      reduce using rule 240 (statement -> expression_statement .)
    F_CONSTANT      reduce using rule 240 (statement -> expression_statement .)
    CCONST          reduce using rule 240 (statement -> expression_statement .)
    STRINGLITERAL   reduce using rule 240 (statement -> expression_statement .)
    FUNC_NAME       reduce using rule 240 (statement -> expression_statement .)
    GENERIC         reduce using rule 240 (statement -> expression_statement .)
    ELSE            reduce using rule 240 (statement -> expression_statement .)


state 162

    (247) compound_statement -> left_brace right_brace .

    RBRACE          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    STATIC_ASSERT   reduce using rule 247 (compound_statement -> left_brace right_brace .)
    IDENTIFIER      reduce using rule 247 (compound_statement -> left_brace right_brace .)
    CASE            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    DEFAULT         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    SEMI            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    IF              reduce using rule 247 (compound_statement -> left_brace right_brace .)
    SWITCH          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    WHILE           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    DO              reduce using rule 247 (compound_statement -> left_brace right_brace .)
    FOR             reduce using rule 247 (compound_statement -> left_brace right_brace .)
    GOTO            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    CONTINUE        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    BREAK           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    RETURN          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    TYPEDEF         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    EXTERN          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    STATIC          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    THREAD_LOCAL    reduce using rule 247 (compound_statement -> left_brace right_brace .)
    AUTO            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    REGISTER        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    VOID            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    CHAR            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    SHORT           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    INT             reduce using rule 247 (compound_statement -> left_brace right_brace .)
    LONG            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    FLOAT           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    DOUBLE          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    SIGNED          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    UNSIGNED        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    BOOL            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    COMPLEX         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    IMAGINARY       reduce using rule 247 (compound_statement -> left_brace right_brace .)
    TYPEID          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    CONST           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    RESTRICT        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    VOLATILE        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    INLINE          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    NORETURN        reduce using rule 247 (compound_statement -> left_brace right_brace .)
    ALIGNAS         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    LBRACE          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    ENUM            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    STRUCT          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    UNION           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    INC_OP          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    DEC_OP          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    SIZEOF          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    ALIGNOF         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    LPAREN          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    AND_OP          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    TIMES           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    PLUS            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    MINUS           reduce using rule 247 (compound_statement -> left_brace right_brace .)
    NOT_OP          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    LNOT            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    I_CONSTANT      reduce using rule 247 (compound_statement -> left_brace right_brace .)
    F_CONSTANT      reduce using rule 247 (compound_statement -> left_brace right_brace .)
    CCONST          reduce using rule 247 (compound_statement -> left_brace right_brace .)
    STRINGLITERAL   reduce using rule 247 (compound_statement -> left_brace right_brace .)
    FUNC_NAME       reduce using rule 247 (compound_statement -> left_brace right_brace .)
    GENERIC         reduce using rule 247 (compound_statement -> left_brace right_brace .)
    ELSE            reduce using rule 247 (compound_statement -> left_brace right_brace .)
    $end            reduce using rule 247 (compound_statement -> left_brace right_brace .)


state 163

    (242) statement -> iteration_statement .

    RBRACE          reduce using rule 242 (statement -> iteration_statement .)
    STATIC_ASSERT   reduce using rule 242 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 242 (statement -> iteration_statement .)
    CASE            reduce using rule 242 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 242 (statement -> iteration_statement .)
    SEMI            reduce using rule 242 (statement -> iteration_statement .)
    IF              reduce using rule 242 (statement -> iteration_statement .)
    SWITCH          reduce using rule 242 (statement -> iteration_statement .)
    WHILE           reduce using rule 242 (statement -> iteration_statement .)
    DO              reduce using rule 242 (statement -> iteration_statement .)
    FOR             reduce using rule 242 (statement -> iteration_statement .)
    GOTO            reduce using rule 242 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 242 (statement -> iteration_statement .)
    BREAK           reduce using rule 242 (statement -> iteration_statement .)
    RETURN          reduce using rule 242 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 242 (statement -> iteration_statement .)
    EXTERN          reduce using rule 242 (statement -> iteration_statement .)
    STATIC          reduce using rule 242 (statement -> iteration_statement .)
    THREAD_LOCAL    reduce using rule 242 (statement -> iteration_statement .)
    AUTO            reduce using rule 242 (statement -> iteration_statement .)
    REGISTER        reduce using rule 242 (statement -> iteration_statement .)
    VOID            reduce using rule 242 (statement -> iteration_statement .)
    CHAR            reduce using rule 242 (statement -> iteration_statement .)
    SHORT           reduce using rule 242 (statement -> iteration_statement .)
    INT             reduce using rule 242 (statement -> iteration_statement .)
    LONG            reduce using rule 242 (statement -> iteration_statement .)
    FLOAT           reduce using rule 242 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 242 (statement -> iteration_statement .)
    SIGNED          reduce using rule 242 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 242 (statement -> iteration_statement .)
    BOOL            reduce using rule 242 (statement -> iteration_statement .)
    COMPLEX         reduce using rule 242 (statement -> iteration_statement .)
    IMAGINARY       reduce using rule 242 (statement -> iteration_statement .)
    TYPEID          reduce using rule 242 (statement -> iteration_statement .)
    CONST           reduce using rule 242 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 242 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 242 (statement -> iteration_statement .)
    INLINE          reduce using rule 242 (statement -> iteration_statement .)
    NORETURN        reduce using rule 242 (statement -> iteration_statement .)
    ALIGNAS         reduce using rule 242 (statement -> iteration_statement .)
    LBRACE          reduce using rule 242 (statement -> iteration_statement .)
    ENUM            reduce using rule 242 (statement -> iteration_statement .)
    STRUCT          reduce using rule 242 (statement -> iteration_statement .)
    UNION           reduce using rule 242 (statement -> iteration_statement .)
    INC_OP          reduce using rule 242 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 242 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 242 (statement -> iteration_statement .)
    ALIGNOF         reduce using rule 242 (statement -> iteration_statement .)
    LPAREN          reduce using rule 242 (statement -> iteration_statement .)
    AND_OP          reduce using rule 242 (statement -> iteration_statement .)
    TIMES           reduce using rule 242 (statement -> iteration_statement .)
    PLUS            reduce using rule 242 (statement -> iteration_statement .)
    MINUS           reduce using rule 242 (statement -> iteration_statement .)
    NOT_OP          reduce using rule 242 (statement -> iteration_statement .)
    LNOT            reduce using rule 242 (statement -> iteration_statement .)
    I_CONSTANT      reduce using rule 242 (statement -> iteration_statement .)
    F_CONSTANT      reduce using rule 242 (statement -> iteration_statement .)
    CCONST          reduce using rule 242 (statement -> iteration_statement .)
    STRINGLITERAL   reduce using rule 242 (statement -> iteration_statement .)
    FUNC_NAME       reduce using rule 242 (statement -> iteration_statement .)
    GENERIC         reduce using rule 242 (statement -> iteration_statement .)
    ELSE            reduce using rule 242 (statement -> iteration_statement .)


state 164

    (264) jump_statement -> GOTO . IDENTIFIER SEMI

    IDENTIFIER      shift and go to state 281


state 165

    (238) statement -> labeled_statement .

    RBRACE          reduce using rule 238 (statement -> labeled_statement .)
    STATIC_ASSERT   reduce using rule 238 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 238 (statement -> labeled_statement .)
    CASE            reduce using rule 238 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 238 (statement -> labeled_statement .)
    SEMI            reduce using rule 238 (statement -> labeled_statement .)
    IF              reduce using rule 238 (statement -> labeled_statement .)
    SWITCH          reduce using rule 238 (statement -> labeled_statement .)
    WHILE           reduce using rule 238 (statement -> labeled_statement .)
    DO              reduce using rule 238 (statement -> labeled_statement .)
    FOR             reduce using rule 238 (statement -> labeled_statement .)
    GOTO            reduce using rule 238 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 238 (statement -> labeled_statement .)
    BREAK           reduce using rule 238 (statement -> labeled_statement .)
    RETURN          reduce using rule 238 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 238 (statement -> labeled_statement .)
    EXTERN          reduce using rule 238 (statement -> labeled_statement .)
    STATIC          reduce using rule 238 (statement -> labeled_statement .)
    THREAD_LOCAL    reduce using rule 238 (statement -> labeled_statement .)
    AUTO            reduce using rule 238 (statement -> labeled_statement .)
    REGISTER        reduce using rule 238 (statement -> labeled_statement .)
    VOID            reduce using rule 238 (statement -> labeled_statement .)
    CHAR            reduce using rule 238 (statement -> labeled_statement .)
    SHORT           reduce using rule 238 (statement -> labeled_statement .)
    INT             reduce using rule 238 (statement -> labeled_statement .)
    LONG            reduce using rule 238 (statement -> labeled_statement .)
    FLOAT           reduce using rule 238 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 238 (statement -> labeled_statement .)
    SIGNED          reduce using rule 238 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 238 (statement -> labeled_statement .)
    BOOL            reduce using rule 238 (statement -> labeled_statement .)
    COMPLEX         reduce using rule 238 (statement -> labeled_statement .)
    IMAGINARY       reduce using rule 238 (statement -> labeled_statement .)
    TYPEID          reduce using rule 238 (statement -> labeled_statement .)
    CONST           reduce using rule 238 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 238 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 238 (statement -> labeled_statement .)
    INLINE          reduce using rule 238 (statement -> labeled_statement .)
    NORETURN        reduce using rule 238 (statement -> labeled_statement .)
    ALIGNAS         reduce using rule 238 (statement -> labeled_statement .)
    LBRACE          reduce using rule 238 (statement -> labeled_statement .)
    ENUM            reduce using rule 238 (statement -> labeled_statement .)
    STRUCT          reduce using rule 238 (statement -> labeled_statement .)
    UNION           reduce using rule 238 (statement -> labeled_statement .)
    INC_OP          reduce using rule 238 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 238 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 238 (statement -> labeled_statement .)
    ALIGNOF         reduce using rule 238 (statement -> labeled_statement .)
    LPAREN          reduce using rule 238 (statement -> labeled_statement .)
    AND_OP          reduce using rule 238 (statement -> labeled_statement .)
    TIMES           reduce using rule 238 (statement -> labeled_statement .)
    PLUS            reduce using rule 238 (statement -> labeled_statement .)
    MINUS           reduce using rule 238 (statement -> labeled_statement .)
    NOT_OP          reduce using rule 238 (statement -> labeled_statement .)
    LNOT            reduce using rule 238 (statement -> labeled_statement .)
    I_CONSTANT      reduce using rule 238 (statement -> labeled_statement .)
    F_CONSTANT      reduce using rule 238 (statement -> labeled_statement .)
    CCONST          reduce using rule 238 (statement -> labeled_statement .)
    STRINGLITERAL   reduce using rule 238 (statement -> labeled_statement .)
    FUNC_NAME       reduce using rule 238 (statement -> labeled_statement .)
    GENERIC         reduce using rule 238 (statement -> labeled_statement .)
    ELSE            reduce using rule 238 (statement -> labeled_statement .)


state 166

    (267) jump_statement -> RETURN . SEMI
    (268) jump_statement -> RETURN . expression SEMI
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 282
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 283

state 167

    (239) statement -> compound_statement .

    RBRACE          reduce using rule 239 (statement -> compound_statement .)
    STATIC_ASSERT   reduce using rule 239 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 239 (statement -> compound_statement .)
    CASE            reduce using rule 239 (statement -> compound_statement .)
    DEFAULT         reduce using rule 239 (statement -> compound_statement .)
    SEMI            reduce using rule 239 (statement -> compound_statement .)
    IF              reduce using rule 239 (statement -> compound_statement .)
    SWITCH          reduce using rule 239 (statement -> compound_statement .)
    WHILE           reduce using rule 239 (statement -> compound_statement .)
    DO              reduce using rule 239 (statement -> compound_statement .)
    FOR             reduce using rule 239 (statement -> compound_statement .)
    GOTO            reduce using rule 239 (statement -> compound_statement .)
    CONTINUE        reduce using rule 239 (statement -> compound_statement .)
    BREAK           reduce using rule 239 (statement -> compound_statement .)
    RETURN          reduce using rule 239 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 239 (statement -> compound_statement .)
    EXTERN          reduce using rule 239 (statement -> compound_statement .)
    STATIC          reduce using rule 239 (statement -> compound_statement .)
    THREAD_LOCAL    reduce using rule 239 (statement -> compound_statement .)
    AUTO            reduce using rule 239 (statement -> compound_statement .)
    REGISTER        reduce using rule 239 (statement -> compound_statement .)
    VOID            reduce using rule 239 (statement -> compound_statement .)
    CHAR            reduce using rule 239 (statement -> compound_statement .)
    SHORT           reduce using rule 239 (statement -> compound_statement .)
    INT             reduce using rule 239 (statement -> compound_statement .)
    LONG            reduce using rule 239 (statement -> compound_statement .)
    FLOAT           reduce using rule 239 (statement -> compound_statement .)
    DOUBLE          reduce using rule 239 (statement -> compound_statement .)
    SIGNED          reduce using rule 239 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 239 (statement -> compound_statement .)
    BOOL            reduce using rule 239 (statement -> compound_statement .)
    COMPLEX         reduce using rule 239 (statement -> compound_statement .)
    IMAGINARY       reduce using rule 239 (statement -> compound_statement .)
    TYPEID          reduce using rule 239 (statement -> compound_statement .)
    CONST           reduce using rule 239 (statement -> compound_statement .)
    RESTRICT        reduce using rule 239 (statement -> compound_statement .)
    VOLATILE        reduce using rule 239 (statement -> compound_statement .)
    INLINE          reduce using rule 239 (statement -> compound_statement .)
    NORETURN        reduce using rule 239 (statement -> compound_statement .)
    ALIGNAS         reduce using rule 239 (statement -> compound_statement .)
    LBRACE          reduce using rule 239 (statement -> compound_statement .)
    ENUM            reduce using rule 239 (statement -> compound_statement .)
    STRUCT          reduce using rule 239 (statement -> compound_statement .)
    UNION           reduce using rule 239 (statement -> compound_statement .)
    INC_OP          reduce using rule 239 (statement -> compound_statement .)
    DEC_OP          reduce using rule 239 (statement -> compound_statement .)
    SIZEOF          reduce using rule 239 (statement -> compound_statement .)
    ALIGNOF         reduce using rule 239 (statement -> compound_statement .)
    LPAREN          reduce using rule 239 (statement -> compound_statement .)
    AND_OP          reduce using rule 239 (statement -> compound_statement .)
    TIMES           reduce using rule 239 (statement -> compound_statement .)
    PLUS            reduce using rule 239 (statement -> compound_statement .)
    MINUS           reduce using rule 239 (statement -> compound_statement .)
    NOT_OP          reduce using rule 239 (statement -> compound_statement .)
    LNOT            reduce using rule 239 (statement -> compound_statement .)
    I_CONSTANT      reduce using rule 239 (statement -> compound_statement .)
    F_CONSTANT      reduce using rule 239 (statement -> compound_statement .)
    CCONST          reduce using rule 239 (statement -> compound_statement .)
    STRINGLITERAL   reduce using rule 239 (statement -> compound_statement .)
    FUNC_NAME       reduce using rule 239 (statement -> compound_statement .)
    GENERIC         reduce using rule 239 (statement -> compound_statement .)
    ELSE            reduce using rule 239 (statement -> compound_statement .)


state 168

    (260) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> FOR . LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> FOR . LPAREN declaration expression_statement expression RPAREN statement

    LPAREN          shift and go to state 284


state 169

    (248) compound_statement -> left_brace block_item_list . right_brace
    (250) block_item_list -> block_item_list . block_item
    (276) right_brace -> . RBRACE
    (251) block_item -> . declaration
    (252) block_item -> . statement
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 183
    STATIC_ASSERT   shift and go to state 29
    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    LBRACE          shift and go to state 57
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 104
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    right_brace                    shift and go to state 285
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 13
    unary_expression               shift and go to state 155
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    selection_statement            shift and go to state 185
    cast_expression                shift and go to state 108
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 176
    unary_operator                 shift and go to state 117
    logical_or_expression          shift and go to state 116
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    declaration_specifiers         shift and go to state 76
    declaration                    shift and go to state 178
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    labeled_statement              shift and go to state 165
    function_specifier             shift and go to state 11
    block_item                     shift and go to state 286
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 170

    (265) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 287


state 171

    (254) expression_statement -> expression . SEMI
    (91) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 289
    COMMA           shift and go to state 288


state 172

    (246) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 290


state 173

    (258) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 291


state 174

    (245) labeled_statement -> CASE . constant_expression COLON statement
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    constant_expression            shift and go to state 292
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 123

state 175

    (257) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 293


state 176

    (252) block_item -> statement .

    RBRACE          reduce using rule 252 (block_item -> statement .)
    STATIC_ASSERT   reduce using rule 252 (block_item -> statement .)
    IDENTIFIER      reduce using rule 252 (block_item -> statement .)
    CASE            reduce using rule 252 (block_item -> statement .)
    DEFAULT         reduce using rule 252 (block_item -> statement .)
    SEMI            reduce using rule 252 (block_item -> statement .)
    IF              reduce using rule 252 (block_item -> statement .)
    SWITCH          reduce using rule 252 (block_item -> statement .)
    WHILE           reduce using rule 252 (block_item -> statement .)
    DO              reduce using rule 252 (block_item -> statement .)
    FOR             reduce using rule 252 (block_item -> statement .)
    GOTO            reduce using rule 252 (block_item -> statement .)
    CONTINUE        reduce using rule 252 (block_item -> statement .)
    BREAK           reduce using rule 252 (block_item -> statement .)
    RETURN          reduce using rule 252 (block_item -> statement .)
    TYPEDEF         reduce using rule 252 (block_item -> statement .)
    EXTERN          reduce using rule 252 (block_item -> statement .)
    STATIC          reduce using rule 252 (block_item -> statement .)
    THREAD_LOCAL    reduce using rule 252 (block_item -> statement .)
    AUTO            reduce using rule 252 (block_item -> statement .)
    REGISTER        reduce using rule 252 (block_item -> statement .)
    VOID            reduce using rule 252 (block_item -> statement .)
    CHAR            reduce using rule 252 (block_item -> statement .)
    SHORT           reduce using rule 252 (block_item -> statement .)
    INT             reduce using rule 252 (block_item -> statement .)
    LONG            reduce using rule 252 (block_item -> statement .)
    FLOAT           reduce using rule 252 (block_item -> statement .)
    DOUBLE          reduce using rule 252 (block_item -> statement .)
    SIGNED          reduce using rule 252 (block_item -> statement .)
    UNSIGNED        reduce using rule 252 (block_item -> statement .)
    BOOL            reduce using rule 252 (block_item -> statement .)
    COMPLEX         reduce using rule 252 (block_item -> statement .)
    IMAGINARY       reduce using rule 252 (block_item -> statement .)
    TYPEID          reduce using rule 252 (block_item -> statement .)
    CONST           reduce using rule 252 (block_item -> statement .)
    RESTRICT        reduce using rule 252 (block_item -> statement .)
    VOLATILE        reduce using rule 252 (block_item -> statement .)
    INLINE          reduce using rule 252 (block_item -> statement .)
    NORETURN        reduce using rule 252 (block_item -> statement .)
    ALIGNAS         reduce using rule 252 (block_item -> statement .)
    LBRACE          reduce using rule 252 (block_item -> statement .)
    ENUM            reduce using rule 252 (block_item -> statement .)
    STRUCT          reduce using rule 252 (block_item -> statement .)
    UNION           reduce using rule 252 (block_item -> statement .)
    INC_OP          reduce using rule 252 (block_item -> statement .)
    DEC_OP          reduce using rule 252 (block_item -> statement .)
    SIZEOF          reduce using rule 252 (block_item -> statement .)
    ALIGNOF         reduce using rule 252 (block_item -> statement .)
    LPAREN          reduce using rule 252 (block_item -> statement .)
    AND_OP          reduce using rule 252 (block_item -> statement .)
    TIMES           reduce using rule 252 (block_item -> statement .)
    PLUS            reduce using rule 252 (block_item -> statement .)
    MINUS           reduce using rule 252 (block_item -> statement .)
    NOT_OP          reduce using rule 252 (block_item -> statement .)
    LNOT            reduce using rule 252 (block_item -> statement .)
    I_CONSTANT      reduce using rule 252 (block_item -> statement .)
    F_CONSTANT      reduce using rule 252 (block_item -> statement .)
    CCONST          reduce using rule 252 (block_item -> statement .)
    STRINGLITERAL   reduce using rule 252 (block_item -> statement .)
    FUNC_NAME       reduce using rule 252 (block_item -> statement .)
    GENERIC         reduce using rule 252 (block_item -> statement .)


state 177

    (244) labeled_statement -> IDENTIFIER . COLON statement
    (28) postfix_expression -> IDENTIFIER . LBRACKET expression RBRACKET
    (29) postfix_expression -> IDENTIFIER . LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (7) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 294
    LBRACKET        shift and go to state 212
    LPAREN          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PERIOD          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LAND            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    CONDOP          reduce using rule 7 (primary_expression -> IDENTIFIER .)
    LOR             reduce using rule 7 (primary_expression -> IDENTIFIER .)
    SEMI            reduce using rule 7 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 7 (primary_expression -> IDENTIFIER .)


state 178

    (251) block_item -> declaration .

    RBRACE          reduce using rule 251 (block_item -> declaration .)
    STATIC_ASSERT   reduce using rule 251 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 251 (block_item -> declaration .)
    CASE            reduce using rule 251 (block_item -> declaration .)
    DEFAULT         reduce using rule 251 (block_item -> declaration .)
    SEMI            reduce using rule 251 (block_item -> declaration .)
    IF              reduce using rule 251 (block_item -> declaration .)
    SWITCH          reduce using rule 251 (block_item -> declaration .)
    WHILE           reduce using rule 251 (block_item -> declaration .)
    DO              reduce using rule 251 (block_item -> declaration .)
    FOR             reduce using rule 251 (block_item -> declaration .)
    GOTO            reduce using rule 251 (block_item -> declaration .)
    CONTINUE        reduce using rule 251 (block_item -> declaration .)
    BREAK           reduce using rule 251 (block_item -> declaration .)
    RETURN          reduce using rule 251 (block_item -> declaration .)
    TYPEDEF         reduce using rule 251 (block_item -> declaration .)
    EXTERN          reduce using rule 251 (block_item -> declaration .)
    STATIC          reduce using rule 251 (block_item -> declaration .)
    THREAD_LOCAL    reduce using rule 251 (block_item -> declaration .)
    AUTO            reduce using rule 251 (block_item -> declaration .)
    REGISTER        reduce using rule 251 (block_item -> declaration .)
    VOID            reduce using rule 251 (block_item -> declaration .)
    CHAR            reduce using rule 251 (block_item -> declaration .)
    SHORT           reduce using rule 251 (block_item -> declaration .)
    INT             reduce using rule 251 (block_item -> declaration .)
    LONG            reduce using rule 251 (block_item -> declaration .)
    FLOAT           reduce using rule 251 (block_item -> declaration .)
    DOUBLE          reduce using rule 251 (block_item -> declaration .)
    SIGNED          reduce using rule 251 (block_item -> declaration .)
    UNSIGNED        reduce using rule 251 (block_item -> declaration .)
    BOOL            reduce using rule 251 (block_item -> declaration .)
    COMPLEX         reduce using rule 251 (block_item -> declaration .)
    IMAGINARY       reduce using rule 251 (block_item -> declaration .)
    TYPEID          reduce using rule 251 (block_item -> declaration .)
    CONST           reduce using rule 251 (block_item -> declaration .)
    RESTRICT        reduce using rule 251 (block_item -> declaration .)
    VOLATILE        reduce using rule 251 (block_item -> declaration .)
    INLINE          reduce using rule 251 (block_item -> declaration .)
    NORETURN        reduce using rule 251 (block_item -> declaration .)
    ALIGNAS         reduce using rule 251 (block_item -> declaration .)
    LBRACE          reduce using rule 251 (block_item -> declaration .)
    ENUM            reduce using rule 251 (block_item -> declaration .)
    STRUCT          reduce using rule 251 (block_item -> declaration .)
    UNION           reduce using rule 251 (block_item -> declaration .)
    INC_OP          reduce using rule 251 (block_item -> declaration .)
    DEC_OP          reduce using rule 251 (block_item -> declaration .)
    SIZEOF          reduce using rule 251 (block_item -> declaration .)
    ALIGNOF         reduce using rule 251 (block_item -> declaration .)
    LPAREN          reduce using rule 251 (block_item -> declaration .)
    AND_OP          reduce using rule 251 (block_item -> declaration .)
    TIMES           reduce using rule 251 (block_item -> declaration .)
    PLUS            reduce using rule 251 (block_item -> declaration .)
    MINUS           reduce using rule 251 (block_item -> declaration .)
    NOT_OP          reduce using rule 251 (block_item -> declaration .)
    LNOT            reduce using rule 251 (block_item -> declaration .)
    I_CONSTANT      reduce using rule 251 (block_item -> declaration .)
    F_CONSTANT      reduce using rule 251 (block_item -> declaration .)
    CCONST          reduce using rule 251 (block_item -> declaration .)
    STRINGLITERAL   reduce using rule 251 (block_item -> declaration .)
    FUNC_NAME       reduce using rule 251 (block_item -> declaration .)
    GENERIC         reduce using rule 251 (block_item -> declaration .)


state 179

    (243) statement -> jump_statement .

    RBRACE          reduce using rule 243 (statement -> jump_statement .)
    STATIC_ASSERT   reduce using rule 243 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 243 (statement -> jump_statement .)
    CASE            reduce using rule 243 (statement -> jump_statement .)
    DEFAULT         reduce using rule 243 (statement -> jump_statement .)
    SEMI            reduce using rule 243 (statement -> jump_statement .)
    IF              reduce using rule 243 (statement -> jump_statement .)
    SWITCH          reduce using rule 243 (statement -> jump_statement .)
    WHILE           reduce using rule 243 (statement -> jump_statement .)
    DO              reduce using rule 243 (statement -> jump_statement .)
    FOR             reduce using rule 243 (statement -> jump_statement .)
    GOTO            reduce using rule 243 (statement -> jump_statement .)
    CONTINUE        reduce using rule 243 (statement -> jump_statement .)
    BREAK           reduce using rule 243 (statement -> jump_statement .)
    RETURN          reduce using rule 243 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 243 (statement -> jump_statement .)
    EXTERN          reduce using rule 243 (statement -> jump_statement .)
    STATIC          reduce using rule 243 (statement -> jump_statement .)
    THREAD_LOCAL    reduce using rule 243 (statement -> jump_statement .)
    AUTO            reduce using rule 243 (statement -> jump_statement .)
    REGISTER        reduce using rule 243 (statement -> jump_statement .)
    VOID            reduce using rule 243 (statement -> jump_statement .)
    CHAR            reduce using rule 243 (statement -> jump_statement .)
    SHORT           reduce using rule 243 (statement -> jump_statement .)
    INT             reduce using rule 243 (statement -> jump_statement .)
    LONG            reduce using rule 243 (statement -> jump_statement .)
    FLOAT           reduce using rule 243 (statement -> jump_statement .)
    DOUBLE          reduce using rule 243 (statement -> jump_statement .)
    SIGNED          reduce using rule 243 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 243 (statement -> jump_statement .)
    BOOL            reduce using rule 243 (statement -> jump_statement .)
    COMPLEX         reduce using rule 243 (statement -> jump_statement .)
    IMAGINARY       reduce using rule 243 (statement -> jump_statement .)
    TYPEID          reduce using rule 243 (statement -> jump_statement .)
    CONST           reduce using rule 243 (statement -> jump_statement .)
    RESTRICT        reduce using rule 243 (statement -> jump_statement .)
    VOLATILE        reduce using rule 243 (statement -> jump_statement .)
    INLINE          reduce using rule 243 (statement -> jump_statement .)
    NORETURN        reduce using rule 243 (statement -> jump_statement .)
    ALIGNAS         reduce using rule 243 (statement -> jump_statement .)
    LBRACE          reduce using rule 243 (statement -> jump_statement .)
    ENUM            reduce using rule 243 (statement -> jump_statement .)
    STRUCT          reduce using rule 243 (statement -> jump_statement .)
    UNION           reduce using rule 243 (statement -> jump_statement .)
    INC_OP          reduce using rule 243 (statement -> jump_statement .)
    DEC_OP          reduce using rule 243 (statement -> jump_statement .)
    SIZEOF          reduce using rule 243 (statement -> jump_statement .)
    ALIGNOF         reduce using rule 243 (statement -> jump_statement .)
    LPAREN          reduce using rule 243 (statement -> jump_statement .)
    AND_OP          reduce using rule 243 (statement -> jump_statement .)
    TIMES           reduce using rule 243 (statement -> jump_statement .)
    PLUS            reduce using rule 243 (statement -> jump_statement .)
    MINUS           reduce using rule 243 (statement -> jump_statement .)
    NOT_OP          reduce using rule 243 (statement -> jump_statement .)
    LNOT            reduce using rule 243 (statement -> jump_statement .)
    I_CONSTANT      reduce using rule 243 (statement -> jump_statement .)
    F_CONSTANT      reduce using rule 243 (statement -> jump_statement .)
    CCONST          reduce using rule 243 (statement -> jump_statement .)
    STRINGLITERAL   reduce using rule 243 (statement -> jump_statement .)
    FUNC_NAME       reduce using rule 243 (statement -> jump_statement .)
    GENERIC         reduce using rule 243 (statement -> jump_statement .)
    ELSE            reduce using rule 243 (statement -> jump_statement .)


state 180

    (266) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 295


state 181

    (249) block_item_list -> block_item .

    RBRACE          reduce using rule 249 (block_item_list -> block_item .)
    STATIC_ASSERT   reduce using rule 249 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 249 (block_item_list -> block_item .)
    CASE            reduce using rule 249 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 249 (block_item_list -> block_item .)
    SEMI            reduce using rule 249 (block_item_list -> block_item .)
    IF              reduce using rule 249 (block_item_list -> block_item .)
    SWITCH          reduce using rule 249 (block_item_list -> block_item .)
    WHILE           reduce using rule 249 (block_item_list -> block_item .)
    DO              reduce using rule 249 (block_item_list -> block_item .)
    FOR             reduce using rule 249 (block_item_list -> block_item .)
    GOTO            reduce using rule 249 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 249 (block_item_list -> block_item .)
    BREAK           reduce using rule 249 (block_item_list -> block_item .)
    RETURN          reduce using rule 249 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 249 (block_item_list -> block_item .)
    EXTERN          reduce using rule 249 (block_item_list -> block_item .)
    STATIC          reduce using rule 249 (block_item_list -> block_item .)
    THREAD_LOCAL    reduce using rule 249 (block_item_list -> block_item .)
    AUTO            reduce using rule 249 (block_item_list -> block_item .)
    REGISTER        reduce using rule 249 (block_item_list -> block_item .)
    VOID            reduce using rule 249 (block_item_list -> block_item .)
    CHAR            reduce using rule 249 (block_item_list -> block_item .)
    SHORT           reduce using rule 249 (block_item_list -> block_item .)
    INT             reduce using rule 249 (block_item_list -> block_item .)
    LONG            reduce using rule 249 (block_item_list -> block_item .)
    FLOAT           reduce using rule 249 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 249 (block_item_list -> block_item .)
    SIGNED          reduce using rule 249 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 249 (block_item_list -> block_item .)
    BOOL            reduce using rule 249 (block_item_list -> block_item .)
    COMPLEX         reduce using rule 249 (block_item_list -> block_item .)
    IMAGINARY       reduce using rule 249 (block_item_list -> block_item .)
    TYPEID          reduce using rule 249 (block_item_list -> block_item .)
    CONST           reduce using rule 249 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 249 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 249 (block_item_list -> block_item .)
    INLINE          reduce using rule 249 (block_item_list -> block_item .)
    NORETURN        reduce using rule 249 (block_item_list -> block_item .)
    ALIGNAS         reduce using rule 249 (block_item_list -> block_item .)
    LBRACE          reduce using rule 249 (block_item_list -> block_item .)
    ENUM            reduce using rule 249 (block_item_list -> block_item .)
    STRUCT          reduce using rule 249 (block_item_list -> block_item .)
    UNION           reduce using rule 249 (block_item_list -> block_item .)
    INC_OP          reduce using rule 249 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 249 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 249 (block_item_list -> block_item .)
    ALIGNOF         reduce using rule 249 (block_item_list -> block_item .)
    LPAREN          reduce using rule 249 (block_item_list -> block_item .)
    AND_OP          reduce using rule 249 (block_item_list -> block_item .)
    TIMES           reduce using rule 249 (block_item_list -> block_item .)
    PLUS            reduce using rule 249 (block_item_list -> block_item .)
    MINUS           reduce using rule 249 (block_item_list -> block_item .)
    NOT_OP          reduce using rule 249 (block_item_list -> block_item .)
    LNOT            reduce using rule 249 (block_item_list -> block_item .)
    I_CONSTANT      reduce using rule 249 (block_item_list -> block_item .)
    F_CONSTANT      reduce using rule 249 (block_item_list -> block_item .)
    CCONST          reduce using rule 249 (block_item_list -> block_item .)
    STRINGLITERAL   reduce using rule 249 (block_item_list -> block_item .)
    FUNC_NAME       reduce using rule 249 (block_item_list -> block_item .)
    GENERIC         reduce using rule 249 (block_item_list -> block_item .)


state 182

    (259) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 296
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 183

    (276) right_brace -> RBRACE .

    TYPEDEF         reduce using rule 276 (right_brace -> RBRACE .)
    EXTERN          reduce using rule 276 (right_brace -> RBRACE .)
    STATIC          reduce using rule 276 (right_brace -> RBRACE .)
    THREAD_LOCAL    reduce using rule 276 (right_brace -> RBRACE .)
    AUTO            reduce using rule 276 (right_brace -> RBRACE .)
    REGISTER        reduce using rule 276 (right_brace -> RBRACE .)
    VOID            reduce using rule 276 (right_brace -> RBRACE .)
    CHAR            reduce using rule 276 (right_brace -> RBRACE .)
    SHORT           reduce using rule 276 (right_brace -> RBRACE .)
    INT             reduce using rule 276 (right_brace -> RBRACE .)
    LONG            reduce using rule 276 (right_brace -> RBRACE .)
    FLOAT           reduce using rule 276 (right_brace -> RBRACE .)
    DOUBLE          reduce using rule 276 (right_brace -> RBRACE .)
    SIGNED          reduce using rule 276 (right_brace -> RBRACE .)
    UNSIGNED        reduce using rule 276 (right_brace -> RBRACE .)
    BOOL            reduce using rule 276 (right_brace -> RBRACE .)
    COMPLEX         reduce using rule 276 (right_brace -> RBRACE .)
    IMAGINARY       reduce using rule 276 (right_brace -> RBRACE .)
    TYPEID          reduce using rule 276 (right_brace -> RBRACE .)
    CONST           reduce using rule 276 (right_brace -> RBRACE .)
    RESTRICT        reduce using rule 276 (right_brace -> RBRACE .)
    VOLATILE        reduce using rule 276 (right_brace -> RBRACE .)
    INLINE          reduce using rule 276 (right_brace -> RBRACE .)
    NORETURN        reduce using rule 276 (right_brace -> RBRACE .)
    ALIGNAS         reduce using rule 276 (right_brace -> RBRACE .)
    ENUM            reduce using rule 276 (right_brace -> RBRACE .)
    STRUCT          reduce using rule 276 (right_brace -> RBRACE .)
    UNION           reduce using rule 276 (right_brace -> RBRACE .)
    SEMI            reduce using rule 276 (right_brace -> RBRACE .)
    TIMES           reduce using rule 276 (right_brace -> RBRACE .)
    IDENTIFIER      reduce using rule 276 (right_brace -> RBRACE .)
    LPAREN          reduce using rule 276 (right_brace -> RBRACE .)
    LBRACKET        reduce using rule 276 (right_brace -> RBRACE .)
    COMMA           reduce using rule 276 (right_brace -> RBRACE .)
    RPAREN          reduce using rule 276 (right_brace -> RBRACE .)
    COLON           reduce using rule 276 (right_brace -> RBRACE .)
    RBRACE          reduce using rule 276 (right_brace -> RBRACE .)
    STATIC_ASSERT   reduce using rule 276 (right_brace -> RBRACE .)
    $end            reduce using rule 276 (right_brace -> RBRACE .)
    CASE            reduce using rule 276 (right_brace -> RBRACE .)
    DEFAULT         reduce using rule 276 (right_brace -> RBRACE .)
    IF              reduce using rule 276 (right_brace -> RBRACE .)
    SWITCH          reduce using rule 276 (right_brace -> RBRACE .)
    WHILE           reduce using rule 276 (right_brace -> RBRACE .)
    DO              reduce using rule 276 (right_brace -> RBRACE .)
    FOR             reduce using rule 276 (right_brace -> RBRACE .)
    GOTO            reduce using rule 276 (right_brace -> RBRACE .)
    CONTINUE        reduce using rule 276 (right_brace -> RBRACE .)
    BREAK           reduce using rule 276 (right_brace -> RBRACE .)
    RETURN          reduce using rule 276 (right_brace -> RBRACE .)
    LBRACE          reduce using rule 276 (right_brace -> RBRACE .)
    INC_OP          reduce using rule 276 (right_brace -> RBRACE .)
    DEC_OP          reduce using rule 276 (right_brace -> RBRACE .)
    SIZEOF          reduce using rule 276 (right_brace -> RBRACE .)
    ALIGNOF         reduce using rule 276 (right_brace -> RBRACE .)
    AND_OP          reduce using rule 276 (right_brace -> RBRACE .)
    PLUS            reduce using rule 276 (right_brace -> RBRACE .)
    MINUS           reduce using rule 276 (right_brace -> RBRACE .)
    NOT_OP          reduce using rule 276 (right_brace -> RBRACE .)
    LNOT            reduce using rule 276 (right_brace -> RBRACE .)
    I_CONSTANT      reduce using rule 276 (right_brace -> RBRACE .)
    F_CONSTANT      reduce using rule 276 (right_brace -> RBRACE .)
    CCONST          reduce using rule 276 (right_brace -> RBRACE .)
    STRINGLITERAL   reduce using rule 276 (right_brace -> RBRACE .)
    FUNC_NAME       reduce using rule 276 (right_brace -> RBRACE .)
    GENERIC         reduce using rule 276 (right_brace -> RBRACE .)
    ELSE            reduce using rule 276 (right_brace -> RBRACE .)
    PERIOD          reduce using rule 276 (right_brace -> RBRACE .)
    PTR_OP          reduce using rule 276 (right_brace -> RBRACE .)
    DIVIDE          reduce using rule 276 (right_brace -> RBRACE .)
    MOD             reduce using rule 276 (right_brace -> RBRACE .)
    LEFT_OP         reduce using rule 276 (right_brace -> RBRACE .)
    RIGHT_OP        reduce using rule 276 (right_brace -> RBRACE .)
    LT_OP           reduce using rule 276 (right_brace -> RBRACE .)
    GT_OP           reduce using rule 276 (right_brace -> RBRACE .)
    LE_OP           reduce using rule 276 (right_brace -> RBRACE .)
    GE_OP           reduce using rule 276 (right_brace -> RBRACE .)
    EQ_OP           reduce using rule 276 (right_brace -> RBRACE .)
    NE_OP           reduce using rule 276 (right_brace -> RBRACE .)
    XOR             reduce using rule 276 (right_brace -> RBRACE .)
    OR_OP           reduce using rule 276 (right_brace -> RBRACE .)
    LAND            reduce using rule 276 (right_brace -> RBRACE .)
    CONDOP          reduce using rule 276 (right_brace -> RBRACE .)
    LOR             reduce using rule 276 (right_brace -> RBRACE .)
    EQUALS          reduce using rule 276 (right_brace -> RBRACE .)
    MUL_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    DIV_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    MOD_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    ADD_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    SUB_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    LEFT_ASSIGN     reduce using rule 276 (right_brace -> RBRACE .)
    RIGHT_ASSIGN    reduce using rule 276 (right_brace -> RBRACE .)
    AND_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    XOR_ASSIGN      reduce using rule 276 (right_brace -> RBRACE .)
    OR_ASSIGN       reduce using rule 276 (right_brace -> RBRACE .)
    RBRACKET        reduce using rule 276 (right_brace -> RBRACE .)


state 184

    (253) expression_statement -> SEMI .

    RBRACE          reduce using rule 253 (expression_statement -> SEMI .)
    STATIC_ASSERT   reduce using rule 253 (expression_statement -> SEMI .)
    IDENTIFIER      reduce using rule 253 (expression_statement -> SEMI .)
    CASE            reduce using rule 253 (expression_statement -> SEMI .)
    DEFAULT         reduce using rule 253 (expression_statement -> SEMI .)
    SEMI            reduce using rule 253 (expression_statement -> SEMI .)
    IF              reduce using rule 253 (expression_statement -> SEMI .)
    SWITCH          reduce using rule 253 (expression_statement -> SEMI .)
    WHILE           reduce using rule 253 (expression_statement -> SEMI .)
    DO              reduce using rule 253 (expression_statement -> SEMI .)
    FOR             reduce using rule 253 (expression_statement -> SEMI .)
    GOTO            reduce using rule 253 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 253 (expression_statement -> SEMI .)
    BREAK           reduce using rule 253 (expression_statement -> SEMI .)
    RETURN          reduce using rule 253 (expression_statement -> SEMI .)
    TYPEDEF         reduce using rule 253 (expression_statement -> SEMI .)
    EXTERN          reduce using rule 253 (expression_statement -> SEMI .)
    STATIC          reduce using rule 253 (expression_statement -> SEMI .)
    THREAD_LOCAL    reduce using rule 253 (expression_statement -> SEMI .)
    AUTO            reduce using rule 253 (expression_statement -> SEMI .)
    REGISTER        reduce using rule 253 (expression_statement -> SEMI .)
    VOID            reduce using rule 253 (expression_statement -> SEMI .)
    CHAR            reduce using rule 253 (expression_statement -> SEMI .)
    SHORT           reduce using rule 253 (expression_statement -> SEMI .)
    INT             reduce using rule 253 (expression_statement -> SEMI .)
    LONG            reduce using rule 253 (expression_statement -> SEMI .)
    FLOAT           reduce using rule 253 (expression_statement -> SEMI .)
    DOUBLE          reduce using rule 253 (expression_statement -> SEMI .)
    SIGNED          reduce using rule 253 (expression_statement -> SEMI .)
    UNSIGNED        reduce using rule 253 (expression_statement -> SEMI .)
    BOOL            reduce using rule 253 (expression_statement -> SEMI .)
    COMPLEX         reduce using rule 253 (expression_statement -> SEMI .)
    IMAGINARY       reduce using rule 253 (expression_statement -> SEMI .)
    TYPEID          reduce using rule 253 (expression_statement -> SEMI .)
    CONST           reduce using rule 253 (expression_statement -> SEMI .)
    RESTRICT        reduce using rule 253 (expression_statement -> SEMI .)
    VOLATILE        reduce using rule 253 (expression_statement -> SEMI .)
    INLINE          reduce using rule 253 (expression_statement -> SEMI .)
    NORETURN        reduce using rule 253 (expression_statement -> SEMI .)
    ALIGNAS         reduce using rule 253 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 253 (expression_statement -> SEMI .)
    ENUM            reduce using rule 253 (expression_statement -> SEMI .)
    STRUCT          reduce using rule 253 (expression_statement -> SEMI .)
    UNION           reduce using rule 253 (expression_statement -> SEMI .)
    INC_OP          reduce using rule 253 (expression_statement -> SEMI .)
    DEC_OP          reduce using rule 253 (expression_statement -> SEMI .)
    SIZEOF          reduce using rule 253 (expression_statement -> SEMI .)
    ALIGNOF         reduce using rule 253 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 253 (expression_statement -> SEMI .)
    AND_OP          reduce using rule 253 (expression_statement -> SEMI .)
    TIMES           reduce using rule 253 (expression_statement -> SEMI .)
    PLUS            reduce using rule 253 (expression_statement -> SEMI .)
    MINUS           reduce using rule 253 (expression_statement -> SEMI .)
    NOT_OP          reduce using rule 253 (expression_statement -> SEMI .)
    LNOT            reduce using rule 253 (expression_statement -> SEMI .)
    I_CONSTANT      reduce using rule 253 (expression_statement -> SEMI .)
    F_CONSTANT      reduce using rule 253 (expression_statement -> SEMI .)
    CCONST          reduce using rule 253 (expression_statement -> SEMI .)
    STRINGLITERAL   reduce using rule 253 (expression_statement -> SEMI .)
    FUNC_NAME       reduce using rule 253 (expression_statement -> SEMI .)
    GENERIC         reduce using rule 253 (expression_statement -> SEMI .)
    ELSE            reduce using rule 253 (expression_statement -> SEMI .)
    RPAREN          reduce using rule 253 (expression_statement -> SEMI .)


state 185

    (241) statement -> selection_statement .

    RBRACE          reduce using rule 241 (statement -> selection_statement .)
    STATIC_ASSERT   reduce using rule 241 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 241 (statement -> selection_statement .)
    CASE            reduce using rule 241 (statement -> selection_statement .)
    DEFAULT         reduce using rule 241 (statement -> selection_statement .)
    SEMI            reduce using rule 241 (statement -> selection_statement .)
    IF              reduce using rule 241 (statement -> selection_statement .)
    SWITCH          reduce using rule 241 (statement -> selection_statement .)
    WHILE           reduce using rule 241 (statement -> selection_statement .)
    DO              reduce using rule 241 (statement -> selection_statement .)
    FOR             reduce using rule 241 (statement -> selection_statement .)
    GOTO            reduce using rule 241 (statement -> selection_statement .)
    CONTINUE        reduce using rule 241 (statement -> selection_statement .)
    BREAK           reduce using rule 241 (statement -> selection_statement .)
    RETURN          reduce using rule 241 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 241 (statement -> selection_statement .)
    EXTERN          reduce using rule 241 (statement -> selection_statement .)
    STATIC          reduce using rule 241 (statement -> selection_statement .)
    THREAD_LOCAL    reduce using rule 241 (statement -> selection_statement .)
    AUTO            reduce using rule 241 (statement -> selection_statement .)
    REGISTER        reduce using rule 241 (statement -> selection_statement .)
    VOID            reduce using rule 241 (statement -> selection_statement .)
    CHAR            reduce using rule 241 (statement -> selection_statement .)
    SHORT           reduce using rule 241 (statement -> selection_statement .)
    INT             reduce using rule 241 (statement -> selection_statement .)
    LONG            reduce using rule 241 (statement -> selection_statement .)
    FLOAT           reduce using rule 241 (statement -> selection_statement .)
    DOUBLE          reduce using rule 241 (statement -> selection_statement .)
    SIGNED          reduce using rule 241 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 241 (statement -> selection_statement .)
    BOOL            reduce using rule 241 (statement -> selection_statement .)
    COMPLEX         reduce using rule 241 (statement -> selection_statement .)
    IMAGINARY       reduce using rule 241 (statement -> selection_statement .)
    TYPEID          reduce using rule 241 (statement -> selection_statement .)
    CONST           reduce using rule 241 (statement -> selection_statement .)
    RESTRICT        reduce using rule 241 (statement -> selection_statement .)
    VOLATILE        reduce using rule 241 (statement -> selection_statement .)
    INLINE          reduce using rule 241 (statement -> selection_statement .)
    NORETURN        reduce using rule 241 (statement -> selection_statement .)
    ALIGNAS         reduce using rule 241 (statement -> selection_statement .)
    LBRACE          reduce using rule 241 (statement -> selection_statement .)
    ENUM            reduce using rule 241 (statement -> selection_statement .)
    STRUCT          reduce using rule 241 (statement -> selection_statement .)
    UNION           reduce using rule 241 (statement -> selection_statement .)
    INC_OP          reduce using rule 241 (statement -> selection_statement .)
    DEC_OP          reduce using rule 241 (statement -> selection_statement .)
    SIZEOF          reduce using rule 241 (statement -> selection_statement .)
    ALIGNOF         reduce using rule 241 (statement -> selection_statement .)
    LPAREN          reduce using rule 241 (statement -> selection_statement .)
    AND_OP          reduce using rule 241 (statement -> selection_statement .)
    TIMES           reduce using rule 241 (statement -> selection_statement .)
    PLUS            reduce using rule 241 (statement -> selection_statement .)
    MINUS           reduce using rule 241 (statement -> selection_statement .)
    NOT_OP          reduce using rule 241 (statement -> selection_statement .)
    LNOT            reduce using rule 241 (statement -> selection_statement .)
    I_CONSTANT      reduce using rule 241 (statement -> selection_statement .)
    F_CONSTANT      reduce using rule 241 (statement -> selection_statement .)
    CCONST          reduce using rule 241 (statement -> selection_statement .)
    STRINGLITERAL   reduce using rule 241 (statement -> selection_statement .)
    FUNC_NAME       reduce using rule 241 (statement -> selection_statement .)
    GENERIC         reduce using rule 241 (statement -> selection_statement .)
    ELSE            reduce using rule 241 (statement -> selection_statement .)


state 186

    (90) expression -> assignment_expression .

    RPAREN          reduce using rule 90 (expression -> assignment_expression .)
    COMMA           reduce using rule 90 (expression -> assignment_expression .)
    SEMI            reduce using rule 90 (expression -> assignment_expression .)
    COLON           reduce using rule 90 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 90 (expression -> assignment_expression .)


state 187

    (255) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 297


state 188

    (14) generic_selection -> GENERIC LPAREN . assignment_expression COMMA generic_assoc_list RPAREN
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 298
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 189

    (70) inclusive_or_expression -> inclusive_or_expression OR_OP . exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 299
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    primary_expression             shift and go to state 111
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 190

    (38) unary_expression -> ALIGNOF LPAREN . type_name RPAREN
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_name                      shift and go to state 300
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 96

state 191

    (33) unary_expression -> INC_OP unary_expression .

    EQUALS          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    TIMES           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    MOD             reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LT_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    GT_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    XOR             reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LAND            reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    CONDOP          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    LOR             reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    SEMI            reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    RPAREN          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    RBRACKET        reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    RBRACE          reduce using rule 33 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 33 (unary_expression -> INC_OP unary_expression .)


state 192

    (24) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list COMMA right_brace
    (5) primary_expression -> LPAREN . expression RPAREN
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 96
    inclusive_or_expression        shift and go to state 85
    type_name                      shift and go to state 301
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 225

state 193

    (34) unary_expression -> DEC_OP unary_expression .

    EQUALS          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    TIMES           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    MOD             reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LT_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    GT_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    XOR             reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LAND            reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    CONDOP          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    LOR             reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    SEMI            reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    RPAREN          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    RBRACKET        reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    RBRACE          reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 34 (unary_expression -> DEC_OP unary_expression .)


state 194

    (36) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LT_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    GT_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 36 (unary_expression -> SIZEOF unary_expression .)


state 195

    (37) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (24) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN . type_name RPAREN left_brace initializer_list COMMA right_brace
    (5) primary_expression -> LPAREN . expression RPAREN
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 96
    inclusive_or_expression        shift and go to state 85
    type_name                      shift and go to state 302
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 225

state 196

    (141) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    SEMI            reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    TIMES           reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 141 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 197

    (50) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    cast_expression                shift and go to state 303
    unary_operator                 shift and go to state 117

state 198

    (49) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    cast_expression                shift and go to state 304
    unary_operator                 shift and go to state 117

state 199

    (48) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    primary_expression             shift and go to state 111
    cast_expression                shift and go to state 305
    unary_operator                 shift and go to state 117

state 200

    (72) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 306
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    primary_expression             shift and go to state 111
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 201

    (55) shift_expression -> shift_expression LEFT_OP . additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    additive_expression            shift and go to state 307
    primary_expression             shift and go to state 111

state 202

    (56) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    additive_expression            shift and go to state 308
    primary_expression             shift and go to state 111

state 203

    (143) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    SEMI            reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    TIMES           reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 143 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 204

    (68) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 309
    postfix_expression             shift and go to state 115
    additive_expression            shift and go to state 105
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    primary_expression             shift and go to state 111
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 205

    (52) additive_expression -> additive_expression PLUS . multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 310
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    primary_expression             shift and go to state 111

state 206

    (53) additive_expression -> additive_expression MINUS . multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 311
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    primary_expression             shift and go to state 111

state 207

    (164) alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STATIC          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    AUTO            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOID            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CHAR            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SHORT           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INT             reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LONG            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    BOOL            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CONST           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RESTRICT        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INLINE          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ENUM            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNION           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SEMI            reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TIMES           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LBRACKET        reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMMA           reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 164 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)


state 208

    (60) relational_expression -> relational_expression LE_OP . shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 312
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 209

    (58) relational_expression -> relational_expression LT_OP . shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 313
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 210

    (61) relational_expression -> relational_expression GE_OP . shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 314
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 211

    (59) relational_expression -> relational_expression GT_OP . shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 315
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 212

    (28) postfix_expression -> IDENTIFIER LBRACKET . expression RBRACKET
    (29) postfix_expression -> IDENTIFIER LBRACKET . expression RBRACKET LBRACKET expression RBRACKET
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 316

state 213

    (165) alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .

    TYPEDEF         reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    THREAD_LOCAL    reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INT             reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    BOOL            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMPLEX         reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IMAGINARY       reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TYPEID          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RESTRICT        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INLINE          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    NORETURN        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ALIGNAS         reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SEMI            reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IDENTIFIER      reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LBRACKET        reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 165 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)


state 214

    (64) equality_expression -> equality_expression NE_OP . relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    relational_expression          shift and go to state 317
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 99
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 215

    (63) equality_expression -> equality_expression EQ_OP . relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 97
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    relational_expression          shift and go to state 318
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    shift_expression               shift and go to state 99
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111

state 216

    (66) and_expression -> and_expression AND_OP . equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    generic_selection              shift and go to state 94
    postfix_expression             shift and go to state 115
    additive_expression            shift and go to state 105
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    primary_expression             shift and go to state 111
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 319

state 217

    (23) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 320


state 218

    (27) postfix_expression -> postfix_expression DEC_OP .

    LPAREN          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    PERIOD          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    EQUALS          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    TIMES           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    MOD             reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LT_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    GT_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    XOR             reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LAND            reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    CONDOP          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    LOR             reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    SEMI            reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACKET        reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    RPAREN          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    RBRACE          reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression DEC_OP .)


state 219

    (22) postfix_expression -> postfix_expression PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 321


state 220

    (20) postfix_expression -> postfix_expression LPAREN . RPAREN
    (21) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (30) argument_expression_list -> . assignment_expression
    (31) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 322
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 323
    multiplicative_expression      shift and go to state 97
    argument_expression_list       shift and go to state 324
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 221

    (26) postfix_expression -> postfix_expression INC_OP .

    LPAREN          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    PERIOD          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    EQUALS          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    TIMES           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    MOD             reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LT_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    GT_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    XOR             reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LAND            reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    CONDOP          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    LOR             reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    SEMI            reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    RBRACKET        reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    RPAREN          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    RBRACE          reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 26 (postfix_expression -> postfix_expression INC_OP .)


state 222

    (76) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 325

state 223

    (74) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 326
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 224

    (35) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LT_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    GT_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 35 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 35 (unary_expression -> unary_operator cast_expression .)


state 225

    (5) primary_expression -> LPAREN expression . RPAREN
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 327
    COMMA           shift and go to state 288


state 226

    (46) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (24) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list COMMA right_brace

    RPAREN          shift and go to state 328


state 227

    (205) direct_abstract_declarator -> LBRACKET . RBRACKET
    (206) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (207) direct_abstract_declarator -> LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> LBRACKET . STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> LBRACKET . type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> LBRACKET . assignment_expression RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 333
    TIMES           shift and go to state 332
    STATIC          shift and go to state 329
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 330
    multiplicative_expression      shift and go to state 97
    type_qualifier_list            shift and go to state 331
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 160

state 228

    (204) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (221) direct_abstract_declarator -> LPAREN . RPAREN
    (222) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (201) abstract_declarator -> . pointer direct_abstract_declarator
    (202) abstract_declarator -> . pointer
    (203) abstract_declarator -> . direct_abstract_declarator
    (190) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (191) parameter_type_list -> . parameter_list
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (192) parameter_list -> . parameter_declaration
    (193) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RPAREN          shift and go to state 334
    TIMES           shift and go to state 50
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 227
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    pointer                        shift and go to state 231
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    parameter_type_list            shift and go to state 335
    parameter_declaration          shift and go to state 146
    declaration_specifiers         shift and go to state 147
    parameter_list                 shift and go to state 149
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    abstract_declarator            shift and go to state 336
    direct_abstract_declarator     shift and go to state 229

state 229

    (203) abstract_declarator -> direct_abstract_declarator .
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (223) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (224) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 203 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 203 (abstract_declarator -> direct_abstract_declarator .)
    COLON           reduce using rule 203 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 337
    LPAREN          shift and go to state 338


state 230

    (199) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 199 (type_name -> specifier_qualifier_list abstract_declarator .)
    COLON           reduce using rule 199 (type_name -> specifier_qualifier_list abstract_declarator .)


state 231

    (201) abstract_declarator -> pointer . direct_abstract_declarator
    (202) abstract_declarator -> pointer .
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 202 (abstract_declarator -> pointer .)
    COLON           reduce using rule 202 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 228
    LBRACKET        shift and go to state 227

    direct_abstract_declarator     shift and go to state 339

state 232

    (157) enumerator -> enumeration_constant EQUALS . constant_expression
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    constant_expression            shift and go to state 340
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 123

state 233

    (150) enum_specifier -> ENUM left_brace enumerator_list right_brace .

    TYPEDEF         reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    EXTERN          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    STATIC          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    THREAD_LOCAL    reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    AUTO            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    REGISTER        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    VOID            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    CHAR            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    SHORT           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    INT             reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    LONG            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    FLOAT           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    DOUBLE          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    SIGNED          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    UNSIGNED        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    BOOL            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    COMPLEX         reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    IMAGINARY       reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    TYPEID          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    CONST           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    RESTRICT        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    VOLATILE        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    INLINE          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    NORETURN        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    ALIGNAS         reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    ENUM            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    STRUCT          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    UNION           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    SEMI            reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    TIMES           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    IDENTIFIER      reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    LPAREN          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    LBRACKET        reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    COMMA           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    RPAREN          reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)
    COLON           reduce using rule 150 (enum_specifier -> ENUM left_brace enumerator_list right_brace .)


state 234

    (151) enum_specifier -> ENUM left_brace enumerator_list COMMA . right_brace
    (156) enumerator_list -> enumerator_list COMMA . enumerator
    (276) right_brace -> . RBRACE
    (157) enumerator -> . enumeration_constant EQUALS constant_expression
    (158) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 183
    IDENTIFIER      shift and go to state 127

    enumerator                     shift and go to state 341
    enumeration_constant           shift and go to state 125
    right_brace                    shift and go to state 342

state 235

    (152) enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list . right_brace
    (153) enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list . COMMA right_brace
    (156) enumerator_list -> enumerator_list . COMMA enumerator
    (276) right_brace -> . RBRACE

    COMMA           shift and go to state 344
    RBRACE          shift and go to state 183

    right_brace                    shift and go to state 343

state 236

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA . STRINGLITERAL RPAREN SEMI

    STRINGLITERAL   shift and go to state 345


state 237

    (131) struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .

    TYPEDEF         reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    EXTERN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    STATIC          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    THREAD_LOCAL    reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    AUTO            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    REGISTER        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    VOID            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    CHAR            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    SHORT           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    INT             reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    LONG            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    FLOAT           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    DOUBLE          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    SIGNED          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    UNSIGNED        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    BOOL            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    COMPLEX         reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    IMAGINARY       reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    TYPEID          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    CONST           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    RESTRICT        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    VOLATILE        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    INLINE          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    NORETURN        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    ALIGNAS         reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    ENUM            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    STRUCT          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    UNION           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    SEMI            reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    TIMES           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    IDENTIFIER      reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    LPAREN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    LBRACKET        reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    COMMA           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    RPAREN          reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)
    COLON           reduce using rule 131 (struct_or_union_specifier -> struct_or_union left_brace struct_declaration_list right_brace .)


state 238

    (137) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STATIC_ASSERT   reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    COMPLEX         reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    IMAGINARY       reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 137 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 239

    (138) struct_declaration -> specifier_qualifier_list SEMI .

    RBRACE          reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    STATIC_ASSERT   reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    VOID            reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    CHAR            reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    SHORT           reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    INT             reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    LONG            reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    FLOAT           reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    DOUBLE          reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    SIGNED          reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    UNSIGNED        reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    BOOL            reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    COMPLEX         reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    IMAGINARY       reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    TYPEID          reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    CONST           reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    RESTRICT        reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    VOLATILE        reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    ENUM            reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    STRUCT          reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)
    UNION           reduce using rule 138 (struct_declaration -> specifier_qualifier_list SEMI .)


state 240

    (147) struct_declarator -> COLON . constant_expression
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 123
    constant_expression            shift and go to state 346
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 241

    (139) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (146) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 348
    COMMA           shift and go to state 347


state 242

    (145) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 145 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 145 (struct_declarator_list -> struct_declarator .)


state 243

    (148) struct_declarator -> declarator . COLON constant_expression
    (149) struct_declarator -> declarator .

    COLON           shift and go to state 349
    SEMI            reduce using rule 149 (struct_declarator -> declarator .)
    COMMA           reduce using rule 149 (struct_declarator -> declarator .)


state 244

    (132) struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list . right_brace
    (137) struct_declaration_list -> struct_declaration_list . struct_declaration
    (276) right_brace -> . RBRACE
    (138) struct_declaration -> . specifier_qualifier_list SEMI
    (139) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (140) struct_declaration -> . static_assert_declaration
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RBRACE          shift and go to state 183
    STATIC_ASSERT   shift and go to state 29
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    static_assert_declaration      shift and go to state 130
    struct_declaration             shift and go to state 238
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 100
    right_brace                    shift and go to state 350
    specifier_qualifier_list       shift and go to state 133
    type_specifier                 shift and go to state 96

state 245

    (172) direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .
    (173) direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET . LBRACKET arrayindex RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    EQUALS          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    SEMI            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    COMMA           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    RPAREN          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    COLON           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    LBRACE          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    STATIC_ASSERT   reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    TYPEDEF         reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    EXTERN          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    STATIC          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    THREAD_LOCAL    reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    AUTO            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    REGISTER        reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    VOID            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    CHAR            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    SHORT           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    INT             reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    LONG            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    FLOAT           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    DOUBLE          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    SIGNED          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    UNSIGNED        reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    BOOL            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    COMPLEX         reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    IMAGINARY       reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    TYPEID          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    CONST           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    RESTRICT        reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    VOLATILE        reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    INLINE          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    NORETURN        reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    ALIGNAS         reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    ENUM            reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    STRUCT          reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    UNION           reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .)
    LBRACKET        shift and go to state 351

  ! LBRACKET        [ reduce using rule 172 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET .) ]


state 246

    (181) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 352
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 160

state 247

    (182) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 353


state 248

    (180) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES . RBRACKET
    (40) unary_operator -> TIMES .

    RBRACKET        shift and go to state 354
    LPAREN          reduce using rule 40 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 40 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 40 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 40 (unary_operator -> TIMES .)
    TIMES           reduce using rule 40 (unary_operator -> TIMES .)
    PLUS            reduce using rule 40 (unary_operator -> TIMES .)
    MINUS           reduce using rule 40 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 40 (unary_operator -> TIMES .)
    LNOT            reduce using rule 40 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    CCONST          reduce using rule 40 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 40 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 40 (unary_operator -> TIMES .)


state 249

    (183) direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .

    LPAREN          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LBRACKET        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EQUALS          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SEMI            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LBRACE          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC_ASSERT   reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    TYPEDEF         reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    EXTERN          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STATIC          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    THREAD_LOCAL    reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    AUTO            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    REGISTER        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOID            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CHAR            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SHORT           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INT             reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    LONG            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    FLOAT           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    DOUBLE          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    SIGNED          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNSIGNED        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    BOOL            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMPLEX         reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    IMAGINARY       reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    TYPEID          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    CONST           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    RESTRICT        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    VOLATILE        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    INLINE          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    NORETURN        reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ALIGNAS         reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    ENUM            reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    STRUCT          reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)
    UNION           reduce using rule 183 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list RBRACKET .)


state 250

    (177) direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .

    LPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACKET        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EQUALS          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LBRACE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEDEF         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    EXTERN          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STATIC          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    AUTO            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    REGISTER        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOID            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CHAR            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SHORT           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INT             reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    LONG            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    FLOAT           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    DOUBLE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    SIGNED          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNSIGNED        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    BOOL            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    COMPLEX         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    IMAGINARY       reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    TYPEID          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    CONST           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    RESTRICT        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    VOLATILE        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    INLINE          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    NORETURN        reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ALIGNAS         reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    ENUM            reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    STRUCT          reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)
    UNION           reduce using rule 177 (direct_declarator -> direct_declarator LBRACKET TIMES RBRACKET .)


state 251

    (179) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 355


state 252

    (178) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 356
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    multiplicative_expression      shift and go to state 97
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 253

    (169) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACKET        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC_ASSERT   reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    THREAD_LOCAL    reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    BOOL            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMPLEX         reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    IMAGINARY       reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    NORETURN        reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ALIGNAS         reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 169 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 254

    (176) direct_declarator -> LPAREN . declarator RPAREN
    (204) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (221) direct_abstract_declarator -> LPAREN . RPAREN
    (222) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (201) abstract_declarator -> . pointer direct_abstract_declarator
    (202) abstract_declarator -> . pointer
    (203) abstract_declarator -> . direct_abstract_declarator
    (190) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (191) parameter_type_list -> . parameter_list
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (192) parameter_list -> . parameter_declaration
    (193) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RPAREN          shift and go to state 334
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 254
    LBRACKET        shift and go to state 227
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    function_specifier             shift and go to state 11
    pointer                        shift and go to state 257
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 43
    parameter_type_list            shift and go to state 335
    parameter_declaration          shift and go to state 146
    direct_declarator              shift and go to state 49
    declaration_specifiers         shift and go to state 147
    parameter_list                 shift and go to state 149
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    abstract_declarator            shift and go to state 336
    declarator                     shift and go to state 75
    direct_abstract_declarator     shift and go to state 229

state 255

    (195) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 195 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 256

    (194) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 194 (parameter_declaration -> declaration_specifiers declarator .)


state 257

    (166) declarator -> pointer . direct_declarator
    (201) abstract_declarator -> pointer . direct_abstract_declarator
    (202) abstract_declarator -> pointer .
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET
    (204) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (205) direct_abstract_declarator -> . LBRACKET RBRACKET
    (206) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (207) direct_abstract_declarator -> . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> . LBRACKET STATIC assignment_expression RBRACKET
    (209) direct_abstract_declarator -> . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (211) direct_abstract_declarator -> . LBRACKET type_qualifier_list RBRACKET
    (212) direct_abstract_declarator -> . LBRACKET assignment_expression RBRACKET
    (213) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET RBRACKET
    (214) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression RBRACKET
    (221) direct_abstract_declarator -> . LPAREN RPAREN
    (222) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (223) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (224) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 202 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 202 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 254
    LBRACKET        shift and go to state 227

    direct_declarator              shift and go to state 68
    direct_abstract_declarator     shift and go to state 339

state 258

    (171) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACKET        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC_ASSERT   reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    THREAD_LOCAL    reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    BOOL            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMPLEX         reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    IMAGINARY       reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RESTRICT        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INLINE          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    NORETURN        reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ALIGNAS         reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 171 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 259

    (198) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 357


state 260

    (190) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (193) parameter_list -> parameter_list COMMA . parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 358
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 37
    parameter_declaration          shift and go to state 359
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 147
    function_specifier             shift and go to state 11

state 261

    (84) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    ALIGNOF         reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    AND_OP          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    TIMES           reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    NOT_OP          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    LNOT            reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    I_CONSTANT      reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    F_CONSTANT      reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    CCONST          reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    STRINGLITERAL   reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    FUNC_NAME       reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)
    GENERIC         reduce using rule 84 (assignment_operator -> SUB_ASSIGN .)


state 262

    (82) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    ALIGNOF         reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    AND_OP          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    TIMES           reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    NOT_OP          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    LNOT            reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    I_CONSTANT      reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    F_CONSTANT      reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    CCONST          reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    STRINGLITERAL   reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    FUNC_NAME       reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)
    GENERIC         reduce using rule 82 (assignment_operator -> MOD_ASSIGN .)


state 263

    (88) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    ALIGNOF         reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    AND_OP          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    TIMES           reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    NOT_OP          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    LNOT            reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    I_CONSTANT      reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    F_CONSTANT      reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    CCONST          reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    STRINGLITERAL   reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    FUNC_NAME       reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)
    GENERIC         reduce using rule 88 (assignment_operator -> XOR_ASSIGN .)


state 264

    (89) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    ALIGNOF         reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    AND_OP          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    TIMES           reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    NOT_OP          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    LNOT            reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    I_CONSTANT      reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    F_CONSTANT      reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    CCONST          reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    STRINGLITERAL   reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    FUNC_NAME       reduce using rule 89 (assignment_operator -> OR_ASSIGN .)
    GENERIC         reduce using rule 89 (assignment_operator -> OR_ASSIGN .)


state 265

    (79) assignment_operator -> EQUALS .

    INC_OP          reduce using rule 79 (assignment_operator -> EQUALS .)
    DEC_OP          reduce using rule 79 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 79 (assignment_operator -> EQUALS .)
    ALIGNOF         reduce using rule 79 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 79 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 79 (assignment_operator -> EQUALS .)
    AND_OP          reduce using rule 79 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 79 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 79 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 79 (assignment_operator -> EQUALS .)
    NOT_OP          reduce using rule 79 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 79 (assignment_operator -> EQUALS .)
    I_CONSTANT      reduce using rule 79 (assignment_operator -> EQUALS .)
    F_CONSTANT      reduce using rule 79 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 79 (assignment_operator -> EQUALS .)
    STRINGLITERAL   reduce using rule 79 (assignment_operator -> EQUALS .)
    FUNC_NAME       reduce using rule 79 (assignment_operator -> EQUALS .)
    GENERIC         reduce using rule 79 (assignment_operator -> EQUALS .)


state 266

    (87) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    ALIGNOF         reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    AND_OP          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    TIMES           reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    NOT_OP          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    LNOT            reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    I_CONSTANT      reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    F_CONSTANT      reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    CCONST          reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    STRINGLITERAL   reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    FUNC_NAME       reduce using rule 87 (assignment_operator -> AND_ASSIGN .)
    GENERIC         reduce using rule 87 (assignment_operator -> AND_ASSIGN .)


state 267

    (80) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    ALIGNOF         reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    AND_OP          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    TIMES           reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    NOT_OP          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    LNOT            reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    I_CONSTANT      reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    F_CONSTANT      reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    CCONST          reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    STRINGLITERAL   reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    FUNC_NAME       reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)
    GENERIC         reduce using rule 80 (assignment_operator -> MUL_ASSIGN .)


state 268

    (81) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    ALIGNOF         reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    AND_OP          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    TIMES           reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    NOT_OP          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    LNOT            reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    I_CONSTANT      reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    F_CONSTANT      reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    CCONST          reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    STRINGLITERAL   reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    FUNC_NAME       reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)
    GENERIC         reduce using rule 81 (assignment_operator -> DIV_ASSIGN .)


state 269

    (85) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    ALIGNOF         reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    AND_OP          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    TIMES           reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    NOT_OP          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    LNOT            reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    I_CONSTANT      reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    F_CONSTANT      reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    CCONST          reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    STRINGLITERAL   reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    FUNC_NAME       reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)
    GENERIC         reduce using rule 85 (assignment_operator -> LEFT_ASSIGN .)


state 270

    (83) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    ALIGNOF         reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    AND_OP          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    TIMES           reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    NOT_OP          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    LNOT            reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    I_CONSTANT      reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    F_CONSTANT      reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    CCONST          reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    STRINGLITERAL   reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    FUNC_NAME       reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)
    GENERIC         reduce using rule 83 (assignment_operator -> ADD_ASSIGN .)


state 271

    (86) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    ALIGNOF         reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    AND_OP          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    TIMES           reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    NOT_OP          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    LNOT            reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    I_CONSTANT      reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    F_CONSTANT      reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    CCONST          reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    STRINGLITERAL   reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    FUNC_NAME       reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)
    GENERIC         reduce using rule 86 (assignment_operator -> RIGHT_ASSIGN .)


state 272

    (78) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 360
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 273

    (24) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list COMMA right_brace
    (46) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 361


state 274

    (229) initializer_list -> initializer .

    COMMA           reduce using rule 229 (initializer_list -> initializer .)
    RBRACE          reduce using rule 229 (initializer_list -> initializer .)


state 275

    (235) designator -> LBRACKET . constant_expression RBRACKET
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 123
    constant_expression            shift and go to state 362
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 276

    (225) initializer -> left_brace initializer_list . right_brace
    (226) initializer -> left_brace initializer_list . COMMA right_brace
    (230) initializer_list -> initializer_list . COMMA designation initializer
    (231) initializer_list -> initializer_list . COMMA initializer
    (276) right_brace -> . RBRACE

    COMMA           shift and go to state 364
    RBRACE          shift and go to state 183

    right_brace                    shift and go to state 363

state 277

    (233) designator_list -> designator .

    EQUALS          reduce using rule 233 (designator_list -> designator .)
    LBRACKET        reduce using rule 233 (designator_list -> designator .)
    PERIOD          reduce using rule 233 (designator_list -> designator .)


state 278

    (236) designator -> PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 365


state 279

    (228) initializer_list -> designation . initializer
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    initializer                    shift and go to state 366
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160

state 280

    (232) designation -> designator_list . EQUALS
    (234) designator_list -> designator_list . designator
    (235) designator -> . LBRACKET constant_expression RBRACKET
    (236) designator -> . PERIOD IDENTIFIER

    EQUALS          shift and go to state 368
    LBRACKET        shift and go to state 275
    PERIOD          shift and go to state 278

    designator                     shift and go to state 367

state 281

    (264) jump_statement -> GOTO IDENTIFIER . SEMI

    SEMI            shift and go to state 369


state 282

    (267) jump_statement -> RETURN SEMI .

    RBRACE          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    STATIC_ASSERT   reduce using rule 267 (jump_statement -> RETURN SEMI .)
    IDENTIFIER      reduce using rule 267 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 267 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 267 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 267 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    THREAD_LOCAL    reduce using rule 267 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 267 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    BOOL            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    COMPLEX         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    IMAGINARY       reduce using rule 267 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    NORETURN        reduce using rule 267 (jump_statement -> RETURN SEMI .)
    ALIGNAS         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    INC_OP          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    DEC_OP          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    ALIGNOF         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    AND_OP          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 267 (jump_statement -> RETURN SEMI .)
    NOT_OP          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 267 (jump_statement -> RETURN SEMI .)
    I_CONSTANT      reduce using rule 267 (jump_statement -> RETURN SEMI .)
    F_CONSTANT      reduce using rule 267 (jump_statement -> RETURN SEMI .)
    CCONST          reduce using rule 267 (jump_statement -> RETURN SEMI .)
    STRINGLITERAL   reduce using rule 267 (jump_statement -> RETURN SEMI .)
    FUNC_NAME       reduce using rule 267 (jump_statement -> RETURN SEMI .)
    GENERIC         reduce using rule 267 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 267 (jump_statement -> RETURN SEMI .)


state 283

    (268) jump_statement -> RETURN expression . SEMI
    (91) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 370
    COMMA           shift and go to state 288


state 284

    (260) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> FOR LPAREN . declaration expression_statement RPAREN statement
    (263) iteration_statement -> FOR LPAREN . declaration expression_statement expression RPAREN statement
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (93) declaration -> . declaration_specifiers SEMI
    (94) declaration -> . declaration_specifiers init_declarator_list SEMI
    (95) declaration -> . static_assert_declaration
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (237) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 184
    STATIC_ASSERT   shift and go to state 29
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    ENUM            shift and go to state 24
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 371
    storage_class_specifier        shift and go to state 1
    static_assert_declaration      shift and go to state 2
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    type_specifier                 shift and go to state 13
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    unary_operator                 shift and go to state 117
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    struct_or_union                shift and go to state 43
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    declaration_specifiers         shift and go to state 76
    declaration                    shift and go to state 372
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    enum_specifier                 shift and go to state 37
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    function_specifier             shift and go to state 11
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 285

    (248) compound_statement -> left_brace block_item_list right_brace .

    RBRACE          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    STATIC_ASSERT   reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    IDENTIFIER      reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    CASE            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    DEFAULT         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    SEMI            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    IF              reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    SWITCH          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    WHILE           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    DO              reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    FOR             reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    GOTO            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    CONTINUE        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    BREAK           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    RETURN          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    TYPEDEF         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    EXTERN          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    STATIC          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    THREAD_LOCAL    reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    AUTO            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    REGISTER        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    VOID            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    CHAR            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    SHORT           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    INT             reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    LONG            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    FLOAT           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    DOUBLE          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    SIGNED          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    UNSIGNED        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    BOOL            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    COMPLEX         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    IMAGINARY       reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    TYPEID          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    CONST           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    RESTRICT        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    VOLATILE        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    INLINE          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    NORETURN        reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    ALIGNAS         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    LBRACE          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    ENUM            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    STRUCT          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    UNION           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    INC_OP          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    DEC_OP          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    SIZEOF          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    ALIGNOF         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    LPAREN          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    AND_OP          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    TIMES           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    PLUS            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    MINUS           reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    NOT_OP          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    LNOT            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    I_CONSTANT      reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    F_CONSTANT      reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    CCONST          reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    STRINGLITERAL   reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    FUNC_NAME       reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    GENERIC         reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    ELSE            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)
    $end            reduce using rule 248 (compound_statement -> left_brace block_item_list right_brace .)


state 286

    (250) block_item_list -> block_item_list block_item .

    RBRACE          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    STATIC_ASSERT   reduce using rule 250 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 250 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 250 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 250 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 250 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 250 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 250 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    THREAD_LOCAL    reduce using rule 250 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 250 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    COMPLEX         reduce using rule 250 (block_item_list -> block_item_list block_item .)
    IMAGINARY       reduce using rule 250 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    NORETURN        reduce using rule 250 (block_item_list -> block_item_list block_item .)
    ALIGNAS         reduce using rule 250 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    ALIGNOF         reduce using rule 250 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    AND_OP          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 250 (block_item_list -> block_item_list block_item .)
    NOT_OP          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 250 (block_item_list -> block_item_list block_item .)
    I_CONSTANT      reduce using rule 250 (block_item_list -> block_item_list block_item .)
    F_CONSTANT      reduce using rule 250 (block_item_list -> block_item_list block_item .)
    CCONST          reduce using rule 250 (block_item_list -> block_item_list block_item .)
    STRINGLITERAL   reduce using rule 250 (block_item_list -> block_item_list block_item .)
    FUNC_NAME       reduce using rule 250 (block_item_list -> block_item_list block_item .)
    GENERIC         reduce using rule 250 (block_item_list -> block_item_list block_item .)


state 287

    (265) jump_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    STATIC_ASSERT   reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    IDENTIFIER      reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    THREAD_LOCAL    reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    BOOL            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    COMPLEX         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    IMAGINARY       reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    NORETURN        reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    ALIGNAS         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    INC_OP          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    DEC_OP          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    ALIGNOF         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    AND_OP          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    NOT_OP          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    I_CONSTANT      reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    F_CONSTANT      reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    CCONST          reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    STRINGLITERAL   reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    FUNC_NAME       reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    GENERIC         reduce using rule 265 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 265 (jump_statement -> CONTINUE SEMI .)


state 288

    (91) expression -> expression COMMA . assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 373
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 289

    (254) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 254 (expression_statement -> expression SEMI .)
    STATIC_ASSERT   reduce using rule 254 (expression_statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 254 (expression_statement -> expression SEMI .)
    CASE            reduce using rule 254 (expression_statement -> expression SEMI .)
    DEFAULT         reduce using rule 254 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 254 (expression_statement -> expression SEMI .)
    IF              reduce using rule 254 (expression_statement -> expression SEMI .)
    SWITCH          reduce using rule 254 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 254 (expression_statement -> expression SEMI .)
    DO              reduce using rule 254 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 254 (expression_statement -> expression SEMI .)
    GOTO            reduce using rule 254 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 254 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 254 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 254 (expression_statement -> expression SEMI .)
    TYPEDEF         reduce using rule 254 (expression_statement -> expression SEMI .)
    EXTERN          reduce using rule 254 (expression_statement -> expression SEMI .)
    STATIC          reduce using rule 254 (expression_statement -> expression SEMI .)
    THREAD_LOCAL    reduce using rule 254 (expression_statement -> expression SEMI .)
    AUTO            reduce using rule 254 (expression_statement -> expression SEMI .)
    REGISTER        reduce using rule 254 (expression_statement -> expression SEMI .)
    VOID            reduce using rule 254 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 254 (expression_statement -> expression SEMI .)
    SHORT           reduce using rule 254 (expression_statement -> expression SEMI .)
    INT             reduce using rule 254 (expression_statement -> expression SEMI .)
    LONG            reduce using rule 254 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 254 (expression_statement -> expression SEMI .)
    DOUBLE          reduce using rule 254 (expression_statement -> expression SEMI .)
    SIGNED          reduce using rule 254 (expression_statement -> expression SEMI .)
    UNSIGNED        reduce using rule 254 (expression_statement -> expression SEMI .)
    BOOL            reduce using rule 254 (expression_statement -> expression SEMI .)
    COMPLEX         reduce using rule 254 (expression_statement -> expression SEMI .)
    IMAGINARY       reduce using rule 254 (expression_statement -> expression SEMI .)
    TYPEID          reduce using rule 254 (expression_statement -> expression SEMI .)
    CONST           reduce using rule 254 (expression_statement -> expression SEMI .)
    RESTRICT        reduce using rule 254 (expression_statement -> expression SEMI .)
    VOLATILE        reduce using rule 254 (expression_statement -> expression SEMI .)
    INLINE          reduce using rule 254 (expression_statement -> expression SEMI .)
    NORETURN        reduce using rule 254 (expression_statement -> expression SEMI .)
    ALIGNAS         reduce using rule 254 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 254 (expression_statement -> expression SEMI .)
    ENUM            reduce using rule 254 (expression_statement -> expression SEMI .)
    STRUCT          reduce using rule 254 (expression_statement -> expression SEMI .)
    UNION           reduce using rule 254 (expression_statement -> expression SEMI .)
    INC_OP          reduce using rule 254 (expression_statement -> expression SEMI .)
    DEC_OP          reduce using rule 254 (expression_statement -> expression SEMI .)
    SIZEOF          reduce using rule 254 (expression_statement -> expression SEMI .)
    ALIGNOF         reduce using rule 254 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 254 (expression_statement -> expression SEMI .)
    AND_OP          reduce using rule 254 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 254 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 254 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 254 (expression_statement -> expression SEMI .)
    NOT_OP          reduce using rule 254 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 254 (expression_statement -> expression SEMI .)
    I_CONSTANT      reduce using rule 254 (expression_statement -> expression SEMI .)
    F_CONSTANT      reduce using rule 254 (expression_statement -> expression SEMI .)
    CCONST          reduce using rule 254 (expression_statement -> expression SEMI .)
    STRINGLITERAL   reduce using rule 254 (expression_statement -> expression SEMI .)
    FUNC_NAME       reduce using rule 254 (expression_statement -> expression SEMI .)
    GENERIC         reduce using rule 254 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 254 (expression_statement -> expression SEMI .)
    RPAREN          reduce using rule 254 (expression_statement -> expression SEMI .)


state 290

    (246) labeled_statement -> DEFAULT COLON . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 374
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 291

    (258) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 375

state 292

    (245) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 376


state 293

    (257) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 377

state 294

    (244) labeled_statement -> IDENTIFIER COLON . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 378
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 295

    (266) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    STATIC_ASSERT   reduce using rule 266 (jump_statement -> BREAK SEMI .)
    IDENTIFIER      reduce using rule 266 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 266 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 266 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 266 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    THREAD_LOCAL    reduce using rule 266 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 266 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    BOOL            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    COMPLEX         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    IMAGINARY       reduce using rule 266 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    NORETURN        reduce using rule 266 (jump_statement -> BREAK SEMI .)
    ALIGNAS         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    INC_OP          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    DEC_OP          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    ALIGNOF         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    AND_OP          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 266 (jump_statement -> BREAK SEMI .)
    NOT_OP          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 266 (jump_statement -> BREAK SEMI .)
    I_CONSTANT      reduce using rule 266 (jump_statement -> BREAK SEMI .)
    F_CONSTANT      reduce using rule 266 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 266 (jump_statement -> BREAK SEMI .)
    STRINGLITERAL   reduce using rule 266 (jump_statement -> BREAK SEMI .)
    FUNC_NAME       reduce using rule 266 (jump_statement -> BREAK SEMI .)
    GENERIC         reduce using rule 266 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 266 (jump_statement -> BREAK SEMI .)


state 296

    (259) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 379


state 297

    (255) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (256) selection_statement -> IF LPAREN . expression RPAREN statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 380

state 298

    (14) generic_selection -> GENERIC LPAREN assignment_expression . COMMA generic_assoc_list RPAREN

    COMMA           shift and go to state 381


state 299

    (70) inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .
    (68) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR_OP           reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    LAND            reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    CONDOP          reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    LOR             reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RBRACKET        reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    COMMA           reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    SEMI            reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RPAREN          reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    RBRACE          reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    COLON           reduce using rule 70 (inclusive_or_expression -> inclusive_or_expression OR_OP exclusive_or_expression .)
    XOR             shift and go to state 204


state 300

    (38) unary_expression -> ALIGNOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 382


state 301

    (24) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list COMMA right_brace

    RPAREN          shift and go to state 383


state 302

    (37) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (24) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name . RPAREN left_brace initializer_list COMMA right_brace

    RPAREN          shift and go to state 384


state 303

    (50) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND_OP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR_OP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 304

    (49) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_OP          reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OP           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 49 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 305

    (48) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEFT_OP         reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RIGHT_OP        reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND_OP          reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR_OP           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 48 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 306

    (72) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (70) inclusive_or_expression -> inclusive_or_expression . OR_OP exclusive_or_expression

    LAND            reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 72 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR_OP           shift and go to state 189


state 307

    (55) shift_expression -> shift_expression LEFT_OP additive_expression .
    (52) additive_expression -> additive_expression . PLUS multiplicative_expression
    (53) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LT_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GT_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    XOR             reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LAND            reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    CONDOP          reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LOR             reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACKET        reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RPAREN          reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMI            reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RBRACE          reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 55 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 308

    (56) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (52) additive_expression -> additive_expression . PLUS multiplicative_expression
    (53) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LT_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GT_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    XOR             reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LAND            reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    CONDOP          reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LOR             reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACKET        reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RPAREN          reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMI            reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RBRACE          reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 56 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 205
    MINUS           shift and go to state 206


state 309

    (68) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (66) and_expression -> and_expression . AND_OP equality_expression

    XOR             reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_OP           reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 68 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_OP          shift and go to state 216


state 310

    (52) additive_expression -> additive_expression PLUS multiplicative_expression .
    (48) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (49) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (50) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 52 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 199
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 197


state 311

    (53) additive_expression -> additive_expression MINUS multiplicative_expression .
    (48) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (49) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (50) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 53 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 199
    DIVIDE          shift and go to state 198
    MOD             shift and go to state 197


state 312

    (60) relational_expression -> relational_expression LE_OP shift_expression .
    (55) shift_expression -> shift_expression . LEFT_OP additive_expression
    (56) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    GT_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    XOR             reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    LAND            reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    CONDOP          reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    LOR             reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACKET        reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    RBRACE          reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMI            reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    RPAREN          reduce using rule 60 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 201
    RIGHT_OP        shift and go to state 202


state 313

    (58) relational_expression -> relational_expression LT_OP shift_expression .
    (55) shift_expression -> shift_expression . LEFT_OP additive_expression
    (56) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    GT_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    LE_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    GE_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    EQ_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    NE_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    AND_OP          reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    XOR             reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    OR_OP           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    LAND            reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    CONDOP          reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    LOR             reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    RBRACKET        reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    RBRACE          reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    COLON           reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    SEMI            reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    RPAREN          reduce using rule 58 (relational_expression -> relational_expression LT_OP shift_expression .)
    LEFT_OP         shift and go to state 201
    RIGHT_OP        shift and go to state 202


state 314

    (61) relational_expression -> relational_expression GE_OP shift_expression .
    (55) shift_expression -> shift_expression . LEFT_OP additive_expression
    (56) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    GT_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    XOR             reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    LAND            reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    CONDOP          reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    LOR             reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACKET        reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    RBRACE          reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMI            reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    RPAREN          reduce using rule 61 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 201
    RIGHT_OP        shift and go to state 202


state 315

    (59) relational_expression -> relational_expression GT_OP shift_expression .
    (55) shift_expression -> shift_expression . LEFT_OP additive_expression
    (56) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    GT_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    LE_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    GE_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    EQ_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    NE_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    AND_OP          reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    XOR             reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    OR_OP           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    LAND            reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    CONDOP          reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    LOR             reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    RBRACKET        reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    COMMA           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    RBRACE          reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    COLON           reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    SEMI            reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    RPAREN          reduce using rule 59 (relational_expression -> relational_expression GT_OP shift_expression .)
    LEFT_OP         shift and go to state 201
    RIGHT_OP        shift and go to state 202


state 316

    (28) postfix_expression -> IDENTIFIER LBRACKET expression . RBRACKET
    (29) postfix_expression -> IDENTIFIER LBRACKET expression . RBRACKET LBRACKET expression RBRACKET
    (91) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 385
    COMMA           shift and go to state 288


state 317

    (64) equality_expression -> equality_expression NE_OP relational_expression .
    (58) relational_expression -> relational_expression . LT_OP shift_expression
    (59) relational_expression -> relational_expression . GT_OP shift_expression
    (60) relational_expression -> relational_expression . LE_OP shift_expression
    (61) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    XOR             reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    LAND            reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    CONDOP          reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    LOR             reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMI            reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACE          reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    RPAREN          reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    RBRACKET        reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 64 (equality_expression -> equality_expression NE_OP relational_expression .)
    LT_OP           shift and go to state 209
    GT_OP           shift and go to state 211
    LE_OP           shift and go to state 208
    GE_OP           shift and go to state 210


state 318

    (63) equality_expression -> equality_expression EQ_OP relational_expression .
    (58) relational_expression -> relational_expression . LT_OP shift_expression
    (59) relational_expression -> relational_expression . GT_OP shift_expression
    (60) relational_expression -> relational_expression . LE_OP shift_expression
    (61) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    XOR             reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LAND            reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    CONDOP          reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LOR             reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMI            reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACE          reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RPAREN          reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RBRACKET        reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 63 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LT_OP           shift and go to state 209
    GT_OP           shift and go to state 211
    LE_OP           shift and go to state 208
    GE_OP           shift and go to state 210


state 319

    (66) and_expression -> and_expression AND_OP equality_expression .
    (63) equality_expression -> equality_expression . EQ_OP relational_expression
    (64) equality_expression -> equality_expression . NE_OP relational_expression

    AND_OP          reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    XOR             reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    OR_OP           reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    LAND            reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    CONDOP          reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    LOR             reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    SEMI            reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    COMMA           reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    RBRACKET        reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    RPAREN          reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    RBRACE          reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    COLON           reduce using rule 66 (and_expression -> and_expression AND_OP equality_expression .)
    EQ_OP           shift and go to state 215
    NE_OP           shift and go to state 214


state 320

    (23) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    LPAREN          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PERIOD          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUALS          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TIMES           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD             reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LT_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GT_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR             reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LAND            reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    CONDOP          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LOR             reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMI            reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACKET        reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RPAREN          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RBRACE          reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 23 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 321

    (22) postfix_expression -> postfix_expression PERIOD IDENTIFIER .

    LPAREN          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PERIOD          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PTR_OP          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    INC_OP          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DEC_OP          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQUALS          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    AND_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OR_ASSIGN       reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    TIMES           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    DIVIDE          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MOD             reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    PLUS            reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    MINUS           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LEFT_OP         reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RIGHT_OP        reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LT_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GT_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    GE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    EQ_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    NE_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    AND_OP          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    XOR             reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    OR_OP           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LAND            reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    CONDOP          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    LOR             reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    SEMI            reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COMMA           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACKET        reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RPAREN          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    RBRACE          reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)
    COLON           reduce using rule 22 (postfix_expression -> postfix_expression PERIOD IDENTIFIER .)


state 322

    (20) postfix_expression -> postfix_expression LPAREN RPAREN .

    LPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PTR_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_OP         reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_OP        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_OP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_OP           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 20 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 323

    (30) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 30 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 30 (argument_expression_list -> assignment_expression .)


state 324

    (21) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (31) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 386
    COMMA           shift and go to state 387


state 325

    (76) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (91) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 388
    COMMA           shift and go to state 288


state 326

    (74) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (72) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 74 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 200


state 327

    (5) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PTR_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    INC_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DEC_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_OP         reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LT_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    GT_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    NE_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 5 (primary_expression -> LPAREN expression RPAREN .)


state 328

    (46) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (24) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list COMMA right_brace
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (275) left_brace -> . LBRACE
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    left_brace                     shift and go to state 390
    cast_expression                shift and go to state 389
    unary_operator                 shift and go to state 117
    primary_expression             shift and go to state 111

state 329

    (207) direct_abstract_declarator -> LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (208) direct_abstract_declarator -> LBRACKET STATIC . assignment_expression RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 391
    multiplicative_expression      shift and go to state 97
    type_qualifier_list            shift and go to state 392
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 160

state 330

    (212) direct_abstract_declarator -> LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 393


state 331

    (209) direct_abstract_declarator -> LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (210) direct_abstract_declarator -> LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (211) direct_abstract_declarator -> LBRACKET type_qualifier_list . RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 394
    RBRACKET        shift and go to state 396
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 395
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 332

    (206) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (40) unary_operator -> TIMES .

    RBRACKET        shift and go to state 397
    LPAREN          reduce using rule 40 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 40 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 40 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 40 (unary_operator -> TIMES .)
    TIMES           reduce using rule 40 (unary_operator -> TIMES .)
    PLUS            reduce using rule 40 (unary_operator -> TIMES .)
    MINUS           reduce using rule 40 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 40 (unary_operator -> TIMES .)
    LNOT            reduce using rule 40 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    CCONST          reduce using rule 40 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 40 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 40 (unary_operator -> TIMES .)


state 333

    (205) direct_abstract_declarator -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 205 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 205 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 205 (direct_abstract_declarator -> LBRACKET RBRACKET .)
    COLON           reduce using rule 205 (direct_abstract_declarator -> LBRACKET RBRACKET .)


state 334

    (221) direct_abstract_declarator -> LPAREN RPAREN .

    LBRACKET        reduce using rule 221 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 221 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 221 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 221 (direct_abstract_declarator -> LPAREN RPAREN .)
    COLON           reduce using rule 221 (direct_abstract_declarator -> LPAREN RPAREN .)


state 335

    (222) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 398


state 336

    (204) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 399


state 337

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACKET        shift and go to state 404
    TIMES           shift and go to state 403
    STATIC          shift and go to state 400
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 401
    multiplicative_expression      shift and go to state 97
    type_qualifier_list            shift and go to state 402
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 160

state 338

    (223) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (224) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (190) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (191) parameter_type_list -> . parameter_list
    (192) parameter_list -> . parameter_declaration
    (193) parameter_list -> . parameter_list COMMA parameter_declaration
    (194) parameter_declaration -> . declaration_specifiers declarator
    (195) parameter_declaration -> . declaration_specifiers abstract_declarator
    (196) parameter_declaration -> . declaration_specifiers
    (96) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (97) declaration_specifiers -> . storage_class_specifier
    (98) declaration_specifiers -> . type_specifier declaration_specifiers
    (99) declaration_specifiers -> . type_specifier
    (100) declaration_specifiers -> . type_qualifier declaration_specifiers
    (101) declaration_specifiers -> . type_qualifier
    (102) declaration_specifiers -> . function_specifier declaration_specifiers
    (103) declaration_specifiers -> . function_specifier
    (104) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (105) declaration_specifiers -> . alignment_specifier
    (110) storage_class_specifier -> . TYPEDEF
    (111) storage_class_specifier -> . EXTERN
    (112) storage_class_specifier -> . STATIC
    (113) storage_class_specifier -> . THREAD_LOCAL
    (114) storage_class_specifier -> . AUTO
    (115) storage_class_specifier -> . REGISTER
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (162) function_specifier -> . INLINE
    (163) function_specifier -> . NORETURN
    (164) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (165) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    RPAREN          shift and go to state 405
    TYPEDEF         shift and go to state 19
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    THREAD_LOCAL    shift and go to state 25
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 14
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INLINE          shift and go to state 41
    NORETURN        shift and go to state 20
    ALIGNAS         shift and go to state 23
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 149
    parameter_type_list            shift and go to state 406
    parameter_declaration          shift and go to state 146
    type_qualifier                 shift and go to state 34
    alignment_specifier            shift and go to state 35
    enum_specifier                 shift and go to state 37
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 147
    function_specifier             shift and go to state 11

state 339

    (201) abstract_declarator -> pointer direct_abstract_declarator .
    (213) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET RBRACKET
    (214) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (215) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET STATIC assignment_expression RBRACKET
    (217) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list assignment_expression RBRACKET
    (218) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET type_qualifier_list RBRACKET
    (220) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression RBRACKET
    (223) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (224) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 201 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 201 (abstract_declarator -> pointer direct_abstract_declarator .)
    COLON           reduce using rule 201 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 337
    LPAREN          shift and go to state 338


state 340

    (157) enumerator -> enumeration_constant EQUALS constant_expression .

    COMMA           reduce using rule 157 (enumerator -> enumeration_constant EQUALS constant_expression .)
    RBRACE          reduce using rule 157 (enumerator -> enumeration_constant EQUALS constant_expression .)


state 341

    (156) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 156 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 156 (enumerator_list -> enumerator_list COMMA enumerator .)


state 342

    (151) enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .

    TYPEDEF         reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    EXTERN          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    STATIC          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    THREAD_LOCAL    reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    AUTO            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    REGISTER        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    VOID            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    CHAR            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    SHORT           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    INT             reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    LONG            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    FLOAT           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    DOUBLE          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    SIGNED          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    UNSIGNED        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    BOOL            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    COMPLEX         reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    IMAGINARY       reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    TYPEID          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    CONST           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    RESTRICT        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    VOLATILE        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    INLINE          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    NORETURN        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    ALIGNAS         reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    ENUM            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    STRUCT          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    UNION           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    SEMI            reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    TIMES           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    IDENTIFIER      reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    LPAREN          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    LBRACKET        reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    COMMA           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    RPAREN          reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)
    COLON           reduce using rule 151 (enum_specifier -> ENUM left_brace enumerator_list COMMA right_brace .)


state 343

    (152) enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .

    TYPEDEF         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    EXTERN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    STATIC          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    THREAD_LOCAL    reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    AUTO            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    REGISTER        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    VOID            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    CHAR            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    SHORT           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    INT             reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    LONG            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    FLOAT           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    DOUBLE          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    SIGNED          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    UNSIGNED        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    BOOL            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    COMPLEX         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    IMAGINARY       reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    TYPEID          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    CONST           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    RESTRICT        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    VOLATILE        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    INLINE          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    NORETURN        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    ALIGNAS         reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    ENUM            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    STRUCT          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    UNION           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    SEMI            reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    TIMES           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    IDENTIFIER      reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    LPAREN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    LBRACKET        reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    COMMA           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    RPAREN          reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)
    COLON           reduce using rule 152 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list right_brace .)


state 344

    (153) enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA . right_brace
    (156) enumerator_list -> enumerator_list COMMA . enumerator
    (276) right_brace -> . RBRACE
    (157) enumerator -> . enumeration_constant EQUALS constant_expression
    (158) enumerator -> . enumeration_constant
    (11) enumeration_constant -> . IDENTIFIER

    RBRACE          shift and go to state 183
    IDENTIFIER      shift and go to state 127

    enumerator                     shift and go to state 341
    enumeration_constant           shift and go to state 125
    right_brace                    shift and go to state 407

state 345

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL . RPAREN SEMI

    RPAREN          shift and go to state 408


state 346

    (147) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 147 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 147 (struct_declarator -> COLON constant_expression .)


state 347

    (146) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (147) struct_declarator -> . COLON constant_expression
    (148) struct_declarator -> . declarator COLON constant_expression
    (149) struct_declarator -> . declarator
    (166) declarator -> . pointer direct_declarator
    (167) declarator -> . direct_declarator
    (184) pointer -> . TIMES type_qualifier_list pointer
    (185) pointer -> . TIMES type_qualifier_list
    (186) pointer -> . TIMES pointer
    (187) pointer -> . TIMES
    (168) direct_declarator -> . IDENTIFIER
    (169) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (170) direct_declarator -> . direct_declarator LPAREN RPAREN
    (171) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (172) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET
    (173) direct_declarator -> . IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator LBRACKET TIMES RBRACKET
    (178) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (179) direct_declarator -> . direct_declarator LBRACKET STATIC assignment_expression RBRACKET
    (180) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET
    (181) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (182) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET
    (183) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list RBRACKET

    COLON           shift and go to state 240
    TIMES           shift and go to state 50
    IDENTIFIER      shift and go to state 48
    LPAREN          shift and go to state 51

    struct_declarator              shift and go to state 409
    direct_declarator              shift and go to state 49
    declarator                     shift and go to state 243
    pointer                        shift and go to state 46

state 348

    (139) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STATIC_ASSERT   reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    BOOL            reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    COMPLEX         reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    IMAGINARY       reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPEID          reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    RESTRICT        reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 139 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 349

    (148) struct_declarator -> declarator COLON . constant_expression
    (92) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 123
    constant_expression            shift and go to state 410
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 350

    (132) struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .

    TYPEDEF         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    EXTERN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    STATIC          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    THREAD_LOCAL    reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    AUTO            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    REGISTER        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    VOID            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    CHAR            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    SHORT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    INT             reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    LONG            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    FLOAT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    DOUBLE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    SIGNED          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    UNSIGNED        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    BOOL            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    COMPLEX         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    IMAGINARY       reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    TYPEID          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    CONST           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    RESTRICT        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    VOLATILE        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    INLINE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    NORETURN        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    ALIGNAS         reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    ENUM            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    STRUCT          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    UNION           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    SEMI            reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    TIMES           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    IDENTIFIER      reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    LPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    LBRACKET        reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    COMMA           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    RPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)
    COLON           reduce using rule 132 (struct_or_union_specifier -> struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace .)


state 351

    (173) direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET . arrayindex RBRACKET
    (174) arrayindex -> . IDENTIFIER
    (175) arrayindex -> . I_CONSTANT

    IDENTIFIER      shift and go to state 137
    I_CONSTANT      shift and go to state 139

    arrayindex                     shift and go to state 411

state 352

    (181) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 412


state 353

    (182) direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LPAREN          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SEMI            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    TYPEID          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 182 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 354

    (180) direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .

    LPAREN          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LBRACKET        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EQUALS          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SEMI            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMMA           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RPAREN          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COLON           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LBRACE          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC_ASSERT   reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    TYPEDEF         reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    EXTERN          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STATIC          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    THREAD_LOCAL    reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    AUTO            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    REGISTER        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOID            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CHAR            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SHORT           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INT             reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    LONG            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    FLOAT           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    DOUBLE          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    SIGNED          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNSIGNED        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    BOOL            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    COMPLEX         reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    IMAGINARY       reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    TYPEID          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    CONST           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    RESTRICT        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    VOLATILE        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    INLINE          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    NORETURN        reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ALIGNAS         reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    ENUM            reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    STRUCT          reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)
    UNION           reduce using rule 180 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list TIMES RBRACKET .)


state 355

    (179) direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 179 (direct_declarator -> direct_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 356

    (178) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 413


state 357

    (198) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 198 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 198 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 358

    (190) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 190 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 359

    (193) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 193 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 193 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 360

    (78) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 78 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 361

    (24) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list COMMA right_brace
    (46) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (275) left_brace -> . LBRACE
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LBRACE          shift and go to state 57
    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    string                         shift and go to state 87
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 115
    generic_selection              shift and go to state 94
    left_brace                     shift and go to state 390
    cast_expression                shift and go to state 389
    unary_operator                 shift and go to state 117
    primary_expression             shift and go to state 111

state 362

    (235) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 414


state 363

    (225) initializer -> left_brace initializer_list right_brace .

    COMMA           reduce using rule 225 (initializer -> left_brace initializer_list right_brace .)
    RBRACE          reduce using rule 225 (initializer -> left_brace initializer_list right_brace .)
    SEMI            reduce using rule 225 (initializer -> left_brace initializer_list right_brace .)


state 364

    (226) initializer -> left_brace initializer_list COMMA . right_brace
    (230) initializer_list -> initializer_list COMMA . designation initializer
    (231) initializer_list -> initializer_list COMMA . initializer
    (276) right_brace -> . RBRACE
    (232) designation -> . designator_list EQUALS
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (233) designator_list -> . designator
    (234) designator_list -> . designator_list designator
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (235) designator -> . LBRACKET constant_expression RBRACKET
    (236) designator -> . PERIOD IDENTIFIER
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 183
    LBRACE          shift and go to state 57
    LBRACKET        shift and go to state 275
    PERIOD          shift and go to state 278
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    right_brace                    shift and go to state 415
    initializer                    shift and go to state 416
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    designator                     shift and go to state 277
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    designation                    shift and go to state 417
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160
    designator_list                shift and go to state 280

state 365

    (236) designator -> PERIOD IDENTIFIER .

    EQUALS          reduce using rule 236 (designator -> PERIOD IDENTIFIER .)
    LBRACKET        reduce using rule 236 (designator -> PERIOD IDENTIFIER .)
    PERIOD          reduce using rule 236 (designator -> PERIOD IDENTIFIER .)


state 366

    (228) initializer_list -> designation initializer .

    COMMA           reduce using rule 228 (initializer_list -> designation initializer .)
    RBRACE          reduce using rule 228 (initializer_list -> designation initializer .)


state 367

    (234) designator_list -> designator_list designator .

    EQUALS          reduce using rule 234 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 234 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 234 (designator_list -> designator_list designator .)


state 368

    (232) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 232 (designation -> designator_list EQUALS .)
    INC_OP          reduce using rule 232 (designation -> designator_list EQUALS .)
    DEC_OP          reduce using rule 232 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 232 (designation -> designator_list EQUALS .)
    ALIGNOF         reduce using rule 232 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 232 (designation -> designator_list EQUALS .)
    IDENTIFIER      reduce using rule 232 (designation -> designator_list EQUALS .)
    AND_OP          reduce using rule 232 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 232 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 232 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 232 (designation -> designator_list EQUALS .)
    NOT_OP          reduce using rule 232 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 232 (designation -> designator_list EQUALS .)
    I_CONSTANT      reduce using rule 232 (designation -> designator_list EQUALS .)
    F_CONSTANT      reduce using rule 232 (designation -> designator_list EQUALS .)
    CCONST          reduce using rule 232 (designation -> designator_list EQUALS .)
    STRINGLITERAL   reduce using rule 232 (designation -> designator_list EQUALS .)
    FUNC_NAME       reduce using rule 232 (designation -> designator_list EQUALS .)
    GENERIC         reduce using rule 232 (designation -> designator_list EQUALS .)


state 369

    (264) jump_statement -> GOTO IDENTIFIER SEMI .

    RBRACE          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STATIC_ASSERT   reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CASE            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEFAULT         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SEMI            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IF              reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SWITCH          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    WHILE           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DO              reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FOR             reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GOTO            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONTINUE        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BREAK           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RETURN          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TYPEDEF         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    EXTERN          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STATIC          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    THREAD_LOCAL    reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AUTO            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    REGISTER        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    VOID            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CHAR            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SHORT           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INT             reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LONG            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FLOAT           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIGNED          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    UNSIGNED        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    BOOL            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    COMPLEX         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    IMAGINARY       reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TYPEID          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CONST           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    RESTRICT        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    VOLATILE        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INLINE          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    NORETURN        reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ALIGNAS         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LBRACE          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ENUM            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRUCT          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    UNION           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    INC_OP          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    DEC_OP          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    SIZEOF          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ALIGNOF         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LPAREN          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    AND_OP          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    TIMES           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    PLUS            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    MINUS           reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    NOT_OP          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    LNOT            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    I_CONSTANT      reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    F_CONSTANT      reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    CCONST          reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    STRINGLITERAL   reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    FUNC_NAME       reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    GENERIC         reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)
    ELSE            reduce using rule 264 (jump_statement -> GOTO IDENTIFIER SEMI .)


state 370

    (268) jump_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    STATIC_ASSERT   reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    IDENTIFIER      reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    THREAD_LOCAL    reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    BOOL            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    COMPLEX         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    IMAGINARY       reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    NORETURN        reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    ALIGNAS         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    INC_OP          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    DEC_OP          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    ALIGNOF         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    AND_OP          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    NOT_OP          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    I_CONSTANT      reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    F_CONSTANT      reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    CCONST          reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    STRINGLITERAL   reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    FUNC_NAME       reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    GENERIC         reduce using rule 268 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 268 (jump_statement -> RETURN expression SEMI .)


state 371

    (260) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (261) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 184
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 418
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 372

    (262) iteration_statement -> FOR LPAREN declaration . expression_statement RPAREN statement
    (263) iteration_statement -> FOR LPAREN declaration . expression_statement expression RPAREN statement
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            shift and go to state 184
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 419
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 373

    (91) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 91 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 91 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 91 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 91 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 91 (expression -> expression COMMA assignment_expression .)


state 374

    (246) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    STATIC_ASSERT   reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    THREAD_LOCAL    reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    COMPLEX         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    IMAGINARY       reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    TYPEID          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    NORETURN        reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNAS         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNOF         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    AND_OP          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    NOT_OP          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    I_CONSTANT      reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    F_CONSTANT      reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    CCONST          reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    STRINGLITERAL   reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    FUNC_NAME       reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    GENERIC         reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 246 (labeled_statement -> DEFAULT COLON statement .)


state 375

    (258) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 420
    COMMA           shift and go to state 288


state 376

    (245) labeled_statement -> CASE constant_expression COLON . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 421
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 377

    (257) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 422
    COMMA           shift and go to state 288


state 378

    (244) labeled_statement -> IDENTIFIER COLON statement .

    RBRACE          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC_ASSERT   reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    THREAD_LOCAL    reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    REGISTER        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    COMPLEX         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    IMAGINARY       reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEID          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    RESTRICT        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    NORETURN        reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNAS         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    LBRACE          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNOF         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    AND_OP          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT_OP          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    LNOT            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    I_CONSTANT      reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    F_CONSTANT      reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    CCONST          reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    STRINGLITERAL   reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    FUNC_NAME       reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    GENERIC         reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 244 (labeled_statement -> IDENTIFIER COLON statement .)


state 379

    (259) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 423


state 380

    (255) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (256) selection_statement -> IF LPAREN expression . RPAREN statement
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 424
    COMMA           shift and go to state 288


state 381

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA . generic_assoc_list RPAREN
    (15) generic_assoc_list -> . generic_association
    (16) generic_assoc_list -> . generic_assoc_list COMMA generic_association
    (17) generic_association -> . type_name COLON assignment_expression
    (18) generic_association -> . DEFAULT COLON assignment_expression
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    DEFAULT         shift and go to state 427
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 96
    type_qualifier                 shift and go to state 100
    generic_association            shift and go to state 428
    struct_or_union_specifier      shift and go to state 5
    type_name                      shift and go to state 426
    specifier_qualifier_list       shift and go to state 122
    enum_specifier                 shift and go to state 37
    generic_assoc_list             shift and go to state 425

state 382

    (38) unary_expression -> ALIGNOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 38 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)


state 383

    (24) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list COMMA right_brace
    (275) left_brace -> . LBRACE

    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 390

state 384

    (37) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (24) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN . left_brace initializer_list COMMA right_brace
    (275) left_brace -> . LBRACE

    EQUALS          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 37 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 57

    left_brace                     shift and go to state 390

state 385

    (28) postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .
    (29) postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET . LBRACKET expression RBRACKET

    LPAREN          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    PTR_OP          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    INC_OP          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    DEC_OP          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    SUB_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LEFT_ASSIGN     reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RIGHT_ASSIGN    reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    XOR_ASSIGN      reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR_ASSIGN       reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MOD             reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LEFT_OP         reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RIGHT_OP        reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LT_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    GT_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LE_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    GE_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQ_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    NE_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND_OP          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    XOR             reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR_OP           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LAND            reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LOR             reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    COLON           reduce using rule 28 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LBRACKET        shift and go to state 429


state 386

    (21) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LPAREN          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PTR_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_OP         reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_OP        reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_OP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_OP           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 21 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 387

    (31) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 430
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 388

    (76) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 120
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 90
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    additive_expression            shift and go to state 105
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    and_expression                 shift and go to state 114
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    relational_expression          shift and go to state 107
    string                         shift and go to state 87
    multiplicative_expression      shift and go to state 97
    conditional_expression         shift and go to state 431
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112

state 389

    (46) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_OP         reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_OP        reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_OP          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_OP           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 46 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 390

    (24) postfix_expression -> LPAREN type_name RPAREN left_brace . initializer_list right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN left_brace . initializer_list COMMA right_brace
    (228) initializer_list -> . designation initializer
    (229) initializer_list -> . initializer
    (230) initializer_list -> . initializer_list COMMA designation initializer
    (231) initializer_list -> . initializer_list COMMA initializer
    (232) designation -> . designator_list EQUALS
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (233) designator_list -> . designator
    (234) designator_list -> . designator_list designator
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (235) designator -> . LBRACKET constant_expression RBRACKET
    (236) designator -> . PERIOD IDENTIFIER
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 57
    LBRACKET        shift and go to state 275
    PERIOD          shift and go to state 278
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    initializer                    shift and go to state 274
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    initializer_list               shift and go to state 432
    designator                     shift and go to state 277
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    designation                    shift and go to state 279
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160
    designator_list                shift and go to state 280

state 391

    (208) direct_abstract_declarator -> LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 433


state 392

    (207) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 434
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 393

    (212) direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 212 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 212 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 212 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 212 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 212 (direct_abstract_declarator -> LBRACKET assignment_expression RBRACKET .)


state 394

    (209) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 435
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 395

    (210) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 436


state 396

    (211) direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 211 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 211 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 211 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 211 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 211 (direct_abstract_declarator -> LBRACKET type_qualifier_list RBRACKET .)


state 397

    (206) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 206 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 206 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 206 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 206 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 398

    (222) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 222 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 222 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 222 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 222 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 222 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 399

    (204) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 204 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 204 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 204 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 204 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COLON           reduce using rule 204 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 400

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC . assignment_expression RBRACKET
    (188) type_qualifier_list -> . type_qualifier
    (189) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 437
    multiplicative_expression      shift and go to state 97
    type_qualifier_list            shift and go to state 438
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 160

state 401

    (220) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression . RBRACKET

    RBRACKET        shift and go to state 439


state 402

    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . assignment_expression RBRACKET
    (218) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (219) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list . RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 440
    RBRACKET        shift and go to state 442
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 441
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 403

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (40) unary_operator -> TIMES .

    RBRACKET        shift and go to state 443
    LPAREN          reduce using rule 40 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 40 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 40 (unary_operator -> TIMES .)
    ALIGNOF         reduce using rule 40 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> TIMES .)
    AND_OP          reduce using rule 40 (unary_operator -> TIMES .)
    TIMES           reduce using rule 40 (unary_operator -> TIMES .)
    PLUS            reduce using rule 40 (unary_operator -> TIMES .)
    MINUS           reduce using rule 40 (unary_operator -> TIMES .)
    NOT_OP          reduce using rule 40 (unary_operator -> TIMES .)
    LNOT            reduce using rule 40 (unary_operator -> TIMES .)
    I_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    F_CONSTANT      reduce using rule 40 (unary_operator -> TIMES .)
    CCONST          reduce using rule 40 (unary_operator -> TIMES .)
    STRINGLITERAL   reduce using rule 40 (unary_operator -> TIMES .)
    FUNC_NAME       reduce using rule 40 (unary_operator -> TIMES .)
    GENERIC         reduce using rule 40 (unary_operator -> TIMES .)


state 404

    (213) direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .

    LBRACKET        reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)
    COLON           reduce using rule 213 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET RBRACKET .)


state 405

    (223) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COLON           reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 406

    (224) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 444


state 407

    (153) enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .

    TYPEDEF         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    EXTERN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    STATIC          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    THREAD_LOCAL    reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    AUTO            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    REGISTER        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    VOID            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    CHAR            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    SHORT           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    INT             reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    LONG            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    FLOAT           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    DOUBLE          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    SIGNED          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    UNSIGNED        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    BOOL            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    COMPLEX         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    IMAGINARY       reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    TYPEID          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    CONST           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    RESTRICT        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    VOLATILE        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    INLINE          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    NORETURN        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    ALIGNAS         reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    ENUM            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    STRUCT          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    UNION           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    SEMI            reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    TIMES           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    IDENTIFIER      reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    LPAREN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    LBRACKET        reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    COMMA           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    RPAREN          reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)
    COLON           reduce using rule 153 (enum_specifier -> ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace .)


state 408

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN . SEMI

    SEMI            shift and go to state 445


state 409

    (146) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 146 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 146 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 410

    (148) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 148 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 148 (struct_declarator -> declarator COLON constant_expression .)


state 411

    (173) direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex . RBRACKET

    RBRACKET        shift and go to state 446


state 412

    (181) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LPAREN          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    BOOL            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    NORETURN        reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 181 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 413

    (178) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LBRACKET        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SEMI            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC_ASSERT   reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    THREAD_LOCAL    reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    BOOL            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMPLEX         reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    IMAGINARY       reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEID          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INLINE          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    NORETURN        reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ALIGNAS         reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNION           reduce using rule 178 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 414

    (235) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 235 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 235 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 235 (designator -> LBRACKET constant_expression RBRACKET .)


state 415

    (226) initializer -> left_brace initializer_list COMMA right_brace .

    COMMA           reduce using rule 226 (initializer -> left_brace initializer_list COMMA right_brace .)
    RBRACE          reduce using rule 226 (initializer -> left_brace initializer_list COMMA right_brace .)
    SEMI            reduce using rule 226 (initializer -> left_brace initializer_list COMMA right_brace .)


state 416

    (231) initializer_list -> initializer_list COMMA initializer .

    COMMA           reduce using rule 231 (initializer_list -> initializer_list COMMA initializer .)
    RBRACE          reduce using rule 231 (initializer_list -> initializer_list COMMA initializer .)


state 417

    (230) initializer_list -> initializer_list COMMA designation . initializer
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    initializer                    shift and go to state 447
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160

state 418

    (260) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (261) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 448
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 449

state 419

    (262) iteration_statement -> FOR LPAREN declaration expression_statement . RPAREN statement
    (263) iteration_statement -> FOR LPAREN declaration expression_statement . expression RPAREN statement
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 450
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 451

state 420

    (258) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 452
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 421

    (245) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC_ASSERT   reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    THREAD_LOCAL    reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    COMPLEX         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    IMAGINARY       reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEID          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    NORETURN        reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNAS         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNOF         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    AND_OP          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT_OP          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    I_CONSTANT      reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    F_CONSTANT      reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    CCONST          reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    STRINGLITERAL   reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    FUNC_NAME       reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    GENERIC         reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 245 (labeled_statement -> CASE constant_expression COLON statement .)


state 422

    (257) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 453
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 423

    (259) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 454

state 424

    (255) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (256) selection_statement -> IF LPAREN expression RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 455
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 425

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list . RPAREN
    (16) generic_assoc_list -> generic_assoc_list . COMMA generic_association

    RPAREN          shift and go to state 456
    COMMA           shift and go to state 457


state 426

    (17) generic_association -> type_name . COLON assignment_expression

    COLON           shift and go to state 458


state 427

    (18) generic_association -> DEFAULT . COLON assignment_expression

    COLON           shift and go to state 459


state 428

    (15) generic_assoc_list -> generic_association .

    RPAREN          reduce using rule 15 (generic_assoc_list -> generic_association .)
    COMMA           reduce using rule 15 (generic_assoc_list -> generic_association .)


state 429

    (29) postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET . expression RBRACKET
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 460

state 430

    (31) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 31 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 31 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 431

    (76) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    RPAREN          reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 76 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 432

    (24) postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list . right_brace
    (25) postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list . COMMA right_brace
    (230) initializer_list -> initializer_list . COMMA designation initializer
    (231) initializer_list -> initializer_list . COMMA initializer
    (276) right_brace -> . RBRACE

    COMMA           shift and go to state 462
    RBRACE          shift and go to state 183

    right_brace                    shift and go to state 461

state 433

    (208) direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 208 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 208 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 208 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 208 (direct_abstract_declarator -> LBRACKET STATIC assignment_expression RBRACKET .)


state 434

    (207) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 463


state 435

    (209) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 464


state 436

    (210) direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 210 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 210 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 210 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 210 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 210 (direct_abstract_declarator -> LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 437

    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 465


state 438

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (189) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 466
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 160

state 439

    (220) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .

    LBRACKET        reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    LPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    RPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COMMA           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)
    COLON           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression RBRACKET .)


state 440

    (218) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 467
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 441

    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 468


state 442

    (219) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .

    LBRACKET        reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    LPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    RPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COMMA           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)
    COLON           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list RBRACKET .)


state 443

    (214) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COLON           reduce using rule 214 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 444

    (224) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 445

    (237) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .

    STATIC_ASSERT   reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TYPEDEF         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    EXTERN          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STATIC          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    THREAD_LOCAL    reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    AUTO            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    REGISTER        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    VOID            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CHAR            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SHORT           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INT             reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LONG            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FLOAT           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DOUBLE          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SIGNED          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    UNSIGNED        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    BOOL            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    COMPLEX         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IMAGINARY       reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TYPEID          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CONST           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RESTRICT        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    VOLATILE        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INLINE          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    NORETURN        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ALIGNAS         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ENUM            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STRUCT          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    UNION           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    $end            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SEMI            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    INC_OP          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DEC_OP          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SIZEOF          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    ALIGNOF         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LPAREN          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IDENTIFIER      reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    AND_OP          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    TIMES           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    PLUS            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    MINUS           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    NOT_OP          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LNOT            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    I_CONSTANT      reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    F_CONSTANT      reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CCONST          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    STRINGLITERAL   reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FUNC_NAME       reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    GENERIC         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RBRACE          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CASE            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DEFAULT         reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    IF              reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    SWITCH          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    WHILE           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    DO              reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    FOR             reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    GOTO            reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    CONTINUE        reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    BREAK           reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    RETURN          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)
    LBRACE          reduce using rule 237 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRINGLITERAL RPAREN SEMI .)


state 446

    (173) direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .

    LPAREN          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    LBRACKET        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    EQUALS          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    SEMI            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    COMMA           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    RPAREN          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    COLON           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    LBRACE          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    STATIC_ASSERT   reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    TYPEDEF         reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    EXTERN          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    STATIC          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    THREAD_LOCAL    reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    AUTO            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    REGISTER        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    VOID            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    CHAR            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    SHORT           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    INT             reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    LONG            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    FLOAT           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    DOUBLE          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    SIGNED          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    UNSIGNED        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    BOOL            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    COMPLEX         reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    IMAGINARY       reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    TYPEID          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    CONST           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    RESTRICT        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    VOLATILE        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    INLINE          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    NORETURN        reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    ALIGNAS         reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    ENUM            reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    STRUCT          reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)
    UNION           reduce using rule 173 (direct_declarator -> IDENTIFIER LBRACKET arrayindex RBRACKET LBRACKET arrayindex RBRACKET .)


state 447

    (230) initializer_list -> initializer_list COMMA designation initializer .

    COMMA           reduce using rule 230 (initializer_list -> initializer_list COMMA designation initializer .)
    RBRACE          reduce using rule 230 (initializer_list -> initializer_list COMMA designation initializer .)


state 448

    (260) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 469
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 449

    (261) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 470
    COMMA           shift and go to state 288


state 450

    (262) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 471
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 451

    (263) iteration_statement -> FOR LPAREN declaration expression_statement expression . RPAREN statement
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 472
    COMMA           shift and go to state 288


state 452

    (258) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 258 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 453

    (257) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 257 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 454

    (259) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (91) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 473
    COMMA           shift and go to state 288


state 455

    (255) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (256) selection_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 474
    RBRACE          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND_OP          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT_OP          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 256 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 456

    (14) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .

    LPAREN          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PERIOD          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PTR_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    INC_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DEC_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQUALS          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MUL_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIV_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    ADD_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SUB_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR_ASSIGN      reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_ASSIGN       reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    TIMES           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIVIDE          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PLUS            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MINUS           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_OP         reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_OP        reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LT_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GT_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQ_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    NE_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_OP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_OP           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LAND            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    CONDOP          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LOR             reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COMMA           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACE          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RBRACKET        reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COLON           reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SEMI            reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RPAREN          reduce using rule 14 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)


state 457

    (16) generic_assoc_list -> generic_assoc_list COMMA . generic_association
    (17) generic_association -> . type_name COLON assignment_expression
    (18) generic_association -> . DEFAULT COLON assignment_expression
    (199) type_name -> . specifier_qualifier_list abstract_declarator
    (200) type_name -> . specifier_qualifier_list
    (141) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (142) specifier_qualifier_list -> . type_specifier
    (143) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (144) specifier_qualifier_list -> . type_qualifier
    (116) type_specifier -> . VOID
    (117) type_specifier -> . CHAR
    (118) type_specifier -> . SHORT
    (119) type_specifier -> . INT
    (120) type_specifier -> . LONG
    (121) type_specifier -> . FLOAT
    (122) type_specifier -> . DOUBLE
    (123) type_specifier -> . SIGNED
    (124) type_specifier -> . UNSIGNED
    (125) type_specifier -> . BOOL
    (126) type_specifier -> . COMPLEX
    (127) type_specifier -> . IMAGINARY
    (128) type_specifier -> . struct_or_union_specifier
    (129) type_specifier -> . enum_specifier
    (130) type_specifier -> . TYPEID
    (159) type_qualifier -> . CONST
    (160) type_qualifier -> . RESTRICT
    (161) type_qualifier -> . VOLATILE
    (131) struct_or_union_specifier -> . struct_or_union left_brace struct_declaration_list right_brace
    (132) struct_or_union_specifier -> . struct_or_union IDENTIFIER left_brace struct_declaration_list right_brace
    (133) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (150) enum_specifier -> . ENUM left_brace enumerator_list right_brace
    (151) enum_specifier -> . ENUM left_brace enumerator_list COMMA right_brace
    (152) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list right_brace
    (153) enum_specifier -> . ENUM IDENTIFIER left_brace enumerator_list COMMA right_brace
    (154) enum_specifier -> . ENUM IDENTIFIER
    (134) struct_or_union -> . STRUCT
    (135) struct_or_union -> . UNION

    DEFAULT         shift and go to state 427
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    SHORT           shift and go to state 8
    INT             shift and go to state 32
    LONG            shift and go to state 16
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 33
    SIGNED          shift and go to state 36
    UNSIGNED        shift and go to state 15
    BOOL            shift and go to state 39
    COMPLEX         shift and go to state 38
    IMAGINARY       shift and go to state 18
    TYPEID          shift and go to state 28
    CONST           shift and go to state 3
    RESTRICT        shift and go to state 27
    VOLATILE        shift and go to state 17
    ENUM            shift and go to state 24
    STRUCT          shift and go to state 31
    UNION           shift and go to state 21

    struct_or_union                shift and go to state 43
    type_specifier                 shift and go to state 96
    type_qualifier                 shift and go to state 100
    generic_association            shift and go to state 475
    struct_or_union_specifier      shift and go to state 5
    type_name                      shift and go to state 426
    specifier_qualifier_list       shift and go to state 122
    enum_specifier                 shift and go to state 37

state 458

    (17) generic_association -> type_name COLON . assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 476
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 459

    (18) generic_association -> DEFAULT COLON . assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 477
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    conditional_expression         shift and go to state 160

state 460

    (29) postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression . RBRACKET
    (91) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 478
    COMMA           shift and go to state 288


state 461

    (24) postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .

    LPAREN          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    PERIOD          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    PTR_OP          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    INC_OP          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    DEC_OP          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    EQUALS          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    MUL_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    DIV_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    MOD_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    ADD_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    SUB_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LEFT_ASSIGN     reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    RIGHT_ASSIGN    reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    AND_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    XOR_ASSIGN      reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    OR_ASSIGN       reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    TIMES           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    DIVIDE          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    MOD             reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    PLUS            reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    MINUS           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LEFT_OP         reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    RIGHT_OP        reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LT_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    GT_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LE_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    GE_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    EQ_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    NE_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    AND_OP          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    XOR             reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    OR_OP           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LAND            reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    CONDOP          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    LOR             reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    SEMI            reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    COMMA           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    RBRACKET        reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    RPAREN          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    RBRACE          reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)
    COLON           reduce using rule 24 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list right_brace .)


state 462

    (25) postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA . right_brace
    (230) initializer_list -> initializer_list COMMA . designation initializer
    (231) initializer_list -> initializer_list COMMA . initializer
    (276) right_brace -> . RBRACE
    (232) designation -> . designator_list EQUALS
    (225) initializer -> . left_brace initializer_list right_brace
    (226) initializer -> . left_brace initializer_list COMMA right_brace
    (227) initializer -> . assignment_expression
    (233) designator_list -> . designator
    (234) designator_list -> . designator_list designator
    (275) left_brace -> . LBRACE
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (235) designator -> . LBRACKET constant_expression RBRACKET
    (236) designator -> . PERIOD IDENTIFIER
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 183
    LBRACE          shift and go to state 57
    LBRACKET        shift and go to state 275
    PERIOD          shift and go to state 278
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    IDENTIFIER      shift and go to state 109
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    right_brace                    shift and go to state 479
    initializer                    shift and go to state 416
    generic_selection              shift and go to state 94
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    relational_expression          shift and go to state 107
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 157
    multiplicative_expression      shift and go to state 97
    designator                     shift and go to state 277
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    shift_expression               shift and go to state 99
    equality_expression            shift and go to state 112
    designation                    shift and go to state 417
    left_brace                     shift and go to state 159
    conditional_expression         shift and go to state 160
    designator_list                shift and go to state 280

state 463

    (207) direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 207 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 207 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 207 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 207 (direct_abstract_declarator -> LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 464

    (209) direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 209 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 209 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 209 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 209 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 209 (direct_abstract_declarator -> LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 465

    (216) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 216 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC assignment_expression RBRACKET .)


state 466

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 480


state 467

    (218) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 481


state 468

    (217) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 217 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list assignment_expression RBRACKET .)


state 469

    (260) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMI            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    EXTERN          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AUTO            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    REGISTER        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOID            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SHORT           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT             reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LONG            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIGNED          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BOOL            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEID          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONST           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INLINE          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NORETURN        reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ENUM            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRUCT          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNION           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INC_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AND_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT_OP          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CCONST          reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRINGLITERAL   reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GENERIC         reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 260 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 470

    (261) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 482
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 471

    (262) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .

    RBRACE          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CASE            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SEMI            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IF              reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SWITCH          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    WHILE           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DO              reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FOR             reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GOTO            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BREAK           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RETURN          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    EXTERN          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AUTO            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    REGISTER        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOID            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CHAR            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SHORT           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INT             reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LONG            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FLOAT           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIGNED          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BOOL            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEID          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONST           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RESTRICT        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INLINE          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NORETURN        reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LBRACE          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ENUM            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRUCT          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNION           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INC_OP          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LPAREN          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AND_OP          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TIMES           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    PLUS            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    MINUS           reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NOT_OP          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LNOT            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CCONST          reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRINGLITERAL   reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GENERIC         reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ELSE            reduce using rule 262 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)


state 472

    (263) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 483
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 473

    (259) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 484


state 474

    (255) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (238) statement -> . labeled_statement
    (239) statement -> . compound_statement
    (240) statement -> . expression_statement
    (241) statement -> . selection_statement
    (242) statement -> . iteration_statement
    (243) statement -> . jump_statement
    (244) labeled_statement -> . IDENTIFIER COLON statement
    (245) labeled_statement -> . CASE constant_expression COLON statement
    (246) labeled_statement -> . DEFAULT COLON statement
    (247) compound_statement -> . left_brace right_brace
    (248) compound_statement -> . left_brace block_item_list right_brace
    (253) expression_statement -> . SEMI
    (254) expression_statement -> . expression SEMI
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . IF LPAREN expression RPAREN statement
    (257) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (258) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (259) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (260) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (261) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (262) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (263) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (264) jump_statement -> . GOTO IDENTIFIER SEMI
    (265) jump_statement -> . CONTINUE SEMI
    (266) jump_statement -> . BREAK SEMI
    (267) jump_statement -> . RETURN SEMI
    (268) jump_statement -> . RETURN expression SEMI
    (275) left_brace -> . LBRACE
    (90) expression -> . assignment_expression
    (91) expression -> . expression COMMA assignment_expression
    (77) assignment_expression -> . conditional_expression
    (78) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (32) unary_expression -> . postfix_expression
    (33) unary_expression -> . INC_OP unary_expression
    (34) unary_expression -> . DEC_OP unary_expression
    (35) unary_expression -> . unary_operator cast_expression
    (36) unary_expression -> . SIZEOF unary_expression
    (37) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (38) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (73) logical_or_expression -> . logical_and_expression
    (74) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (19) postfix_expression -> . primary_expression
    (20) postfix_expression -> . postfix_expression LPAREN RPAREN
    (21) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (22) postfix_expression -> . postfix_expression PERIOD IDENTIFIER
    (23) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (24) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list right_brace
    (25) postfix_expression -> . LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace
    (26) postfix_expression -> . postfix_expression INC_OP
    (27) postfix_expression -> . postfix_expression DEC_OP
    (28) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (29) postfix_expression -> . IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET
    (39) unary_operator -> . AND_OP
    (40) unary_operator -> . TIMES
    (41) unary_operator -> . PLUS
    (42) unary_operator -> . MINUS
    (43) unary_operator -> . NOT_OP
    (44) unary_operator -> . LNOT
    (71) logical_and_expression -> . inclusive_or_expression
    (72) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (3) primary_expression -> . constant
    (4) primary_expression -> . string
    (5) primary_expression -> . LPAREN expression RPAREN
    (6) primary_expression -> . generic_selection
    (7) primary_expression -> . IDENTIFIER
    (69) inclusive_or_expression -> . exclusive_or_expression
    (70) inclusive_or_expression -> . inclusive_or_expression OR_OP exclusive_or_expression
    (8) constant -> . I_CONSTANT
    (9) constant -> . F_CONSTANT
    (10) constant -> . CCONST
    (12) string -> . STRINGLITERAL
    (13) string -> . FUNC_NAME
    (14) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (67) exclusive_or_expression -> . and_expression
    (68) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (65) and_expression -> . equality_expression
    (66) and_expression -> . and_expression AND_OP equality_expression
    (62) equality_expression -> . relational_expression
    (63) equality_expression -> . equality_expression EQ_OP relational_expression
    (64) equality_expression -> . equality_expression NE_OP relational_expression
    (57) relational_expression -> . shift_expression
    (58) relational_expression -> . relational_expression LT_OP shift_expression
    (59) relational_expression -> . relational_expression GT_OP shift_expression
    (60) relational_expression -> . relational_expression LE_OP shift_expression
    (61) relational_expression -> . relational_expression GE_OP shift_expression
    (54) shift_expression -> . additive_expression
    (55) shift_expression -> . shift_expression LEFT_OP additive_expression
    (56) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (51) additive_expression -> . multiplicative_expression
    (52) additive_expression -> . additive_expression PLUS multiplicative_expression
    (53) additive_expression -> . additive_expression MINUS multiplicative_expression
    (47) multiplicative_expression -> . cast_expression
    (48) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (49) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 177
    CASE            shift and go to state 174
    DEFAULT         shift and go to state 172
    SEMI            shift and go to state 184
    IF              shift and go to state 187
    SWITCH          shift and go to state 175
    WHILE           shift and go to state 173
    DO              shift and go to state 182
    FOR             shift and go to state 168
    GOTO            shift and go to state 164
    CONTINUE        shift and go to state 170
    BREAK           shift and go to state 180
    RETURN          shift and go to state 166
    LBRACE          shift and go to state 57
    INC_OP          shift and go to state 89
    DEC_OP          shift and go to state 91
    SIZEOF          shift and go to state 95
    ALIGNOF         shift and go to state 88
    LPAREN          shift and go to state 158
    AND_OP          shift and go to state 119
    TIMES           shift and go to state 118
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    NOT_OP          shift and go to state 83
    LNOT            shift and go to state 113
    I_CONSTANT      shift and go to state 102
    F_CONSTANT      shift and go to state 121
    CCONST          shift and go to state 101
    STRINGLITERAL   shift and go to state 93
    FUNC_NAME       shift and go to state 92
    GENERIC         shift and go to state 82

    expression_statement           shift and go to state 161
    selection_statement            shift and go to state 185
    constant                       shift and go to state 104
    unary_expression               shift and go to state 155
    exclusive_or_expression        shift and go to state 103
    generic_selection              shift and go to state 94
    iteration_statement            shift and go to state 163
    and_expression                 shift and go to state 114
    string                         shift and go to state 87
    compound_statement             shift and go to state 167
    inclusive_or_expression        shift and go to state 85
    postfix_expression             shift and go to state 115
    shift_expression               shift and go to state 99
    relational_expression          shift and go to state 107
    statement                      shift and go to state 485
    cast_expression                shift and go to state 108
    logical_or_expression          shift and go to state 116
    unary_operator                 shift and go to state 117
    assignment_expression          shift and go to state 186
    multiplicative_expression      shift and go to state 97
    additive_expression            shift and go to state 105
    primary_expression             shift and go to state 111
    logical_and_expression         shift and go to state 98
    equality_expression            shift and go to state 112
    jump_statement                 shift and go to state 179
    labeled_statement              shift and go to state 165
    left_brace                     shift and go to state 81
    conditional_expression         shift and go to state 160
    expression                     shift and go to state 171

state 475

    (16) generic_assoc_list -> generic_assoc_list COMMA generic_association .

    RPAREN          reduce using rule 16 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)
    COMMA           reduce using rule 16 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)


state 476

    (17) generic_association -> type_name COLON assignment_expression .

    RPAREN          reduce using rule 17 (generic_association -> type_name COLON assignment_expression .)
    COMMA           reduce using rule 17 (generic_association -> type_name COLON assignment_expression .)


state 477

    (18) generic_association -> DEFAULT COLON assignment_expression .

    RPAREN          reduce using rule 18 (generic_association -> DEFAULT COLON assignment_expression .)
    COMMA           reduce using rule 18 (generic_association -> DEFAULT COLON assignment_expression .)


state 478

    (29) postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .

    LPAREN          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    PTR_OP          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    INC_OP          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    DEC_OP          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    SUB_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LEFT_ASSIGN     reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    RIGHT_ASSIGN    reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    AND_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    XOR_ASSIGN      reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    OR_ASSIGN       reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    MOD             reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LEFT_OP         reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    RIGHT_OP        reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LT_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    GT_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LE_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    GE_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    EQ_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    NE_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    AND_OP          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    XOR             reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    OR_OP           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LAND            reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    LOR             reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)
    COLON           reduce using rule 29 (postfix_expression -> IDENTIFIER LBRACKET expression RBRACKET LBRACKET expression RBRACKET .)


state 479

    (25) postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .

    LPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    PERIOD          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    PTR_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    INC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    DEC_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    EQUALS          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    MUL_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    DIV_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    MOD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    ADD_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    SUB_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LEFT_ASSIGN     reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    RIGHT_ASSIGN    reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    AND_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    XOR_ASSIGN      reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    OR_ASSIGN       reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    TIMES           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    DIVIDE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    MOD             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    PLUS            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    MINUS           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LEFT_OP         reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    RIGHT_OP        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LT_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    GT_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    GE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    EQ_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    NE_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    AND_OP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    XOR             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    OR_OP           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LAND            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    CONDOP          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    LOR             reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    SEMI            reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    COMMA           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    RBRACKET        reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    RPAREN          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    RBRACE          reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)
    COLON           reduce using rule 25 (postfix_expression -> LPAREN type_name RPAREN left_brace initializer_list COMMA right_brace .)


state 480

    (215) direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COLON           reduce using rule 215 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 481

    (218) direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 482

    (261) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOID            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LONG            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEID          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONST           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNION           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AND_OP          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT_OP          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CCONST          reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 261 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 483

    (263) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CASE            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SEMI            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IF              reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DO              reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FOR             reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOID            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INT             reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LONG            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEID          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONST           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RESTRICT        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INLINE          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNION           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AND_OP          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NOT_OP          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CCONST          reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 263 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)


state 484

    (259) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC_ASSERT   reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    THREAD_LOCAL    reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BOOL            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    COMPLEX         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IMAGINARY       reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NORETURN        reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ALIGNAS         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INC_OP          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEC_OP          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ALIGNOF         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND_OP          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT_OP          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    I_CONSTANT      reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    F_CONSTANT      reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CCONST          reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRINGLITERAL   reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FUNC_NAME       reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GENERIC         reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 259 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 485

    (255) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC_ASSERT   reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THREAD_LOCAL    reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    COMPLEX         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IMAGINARY       reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NORETURN        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNAS         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC_OP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC_OP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNOF         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND_OP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT_OP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    I_CONSTANT      reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    F_CONSTANT      reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRINGLITERAL   reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNC_NAME       reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GENERIC         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 48 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 245 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 455 resolved as shift
